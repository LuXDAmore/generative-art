(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{221:function(e,n,t){"use strict";t.r(n);var o=t(21),r=t(6),v=t(172),c=t.n(v),x=t(167);function l(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}var y={animate:!0,context:"webgl",attributes:{antialias:!0}},d={name:"page-9",data:()=>({drawManager:null}),mounted(){var e=this;this.$nextTick(Object(r.a)((function*(){try{e.drawManager=yield e.$sketch(function(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?l(Object(source),!0).forEach((function(n){Object(o.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):l(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}({},y,{canvas:e.$refs.canvas}),e.sketch)}catch(e){console.error(e)}})))},beforeDestroy(){this.drawManager&&this.drawManager.unload()},methods:{sketch:e=>Object(r.a)((function*(){var{context:n,canvas:canvas,width:o,height:r,update:v}=e,{OrbitControls:l}=t(168),y="".concat("/generative-art/","luna.jpg"),image=yield c()(y),{width:d,height:m}=image,f=d/m;v({dimensions:[d,m]});var w=new x.A({context:n}),h=new x.l(45,o/r,.001,1e3),z=new l(h,canvas),O=new x.m(f,1,45,45),j=new x.r({vertexShader:"precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vUv;\nvarying float vWave;\nuniform float time;\n\nvec3 mod289(vec3 x) {\n\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n\n}\n\nvec4 mod289(vec4 x) {\n\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n\n}\n\nvec4 permute(vec4 x) {\n\n    return mod289(((x*34.0)+1.0)*x);\n\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n\n    return 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise(vec3 v) {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy;\n  vec3 x3 = x0 - D.yyy;\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n\n    vUv = uv;\n\n    vec3 pos = position;\n    float noiseFreq = 3.5;\n    float noiseAmp = 0.15;\n\n    vec3 noisePos = vec3( pos.x * noiseFreq + time, pos.y, pos.z );\n    pos.z += snoise( noisePos ) * noiseAmp;\n\n    vWave = pos.z;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n}\n",fragmentShader:"precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vUv;\nvarying float vWave;\nuniform sampler2D image;\n\nvoid main() {\n\n    float wave = vWave * 0.25;\n    float r = texture2D(image, vUv + wave).r;\n    float g = texture2D(image, vUv).g;\n    float b = texture2D(image, vUv).b;\n\n    vec3 texture = vec3(r, g, b);\n\n    gl_FragColor = vec4(texture, 1.);\n\n}\n",extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:x.g,uniforms:{image:{type:"t",value:(new x.v).load(y)},time:{type:"f",value:0},resolution:{type:"v2",value:new x.w(o,r)},uvRate1:{value:new x.w(1,1)}}}),P=new x.k(O,j),_=new x.q;return h.position.set(.3,0,-1.5),_.add(P),{resize(e){var{pixelRatio:n,viewportWidth:t,viewportHeight:o}=e;v({dimensions:[t,o]}),w.setPixelRatio(n),w.setSize(t,o),j.uniforms.resolution.value.x=t,j.uniforms.resolution.value.y=o,h.aspect=t/o,h.updateProjectionMatrix()},render(e){var{time:time}=e;j.uniforms.time.value=time,z.update(),w.render(_,h)},unload(){w.dispose()}}}))()}},m=t(20),component=Object(m.a)(d,(function(){var e=this.$createElement,n=this._self._c||e;return n("main",{staticClass:"container canvas-container"},[n("canvas",{ref:"canvas"})])}),[],!1,null,null,null);n.default=component.exports}}]);