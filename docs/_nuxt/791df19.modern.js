/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[25],Array(274).concat([function(e,t,n){"use strict";n.d(t,"bd",(function(){return oe.a})),n.d(t,"cd",(function(){return oe.b})),n.d(t,"Pd",(function(){return et.a})),n.d(t,"Vd",(function(){return et.b})),n.d(t,"md",(function(){return tt.a})),n.d(t,"pd",(function(){return tt.b})),n.d(t,"qd",(function(){return tt.c})),n.d(t,"rd",(function(){return tt.d})),n.d(t,"sd",(function(){return tt.e})),n.d(t,"td",(function(){return tt.f})),n.d(t,"vd",(function(){return tt.g})),n.d(t,"yd",(function(){return tt.h})),n.d(t,"Ed",(function(){return tt.k})),n.d(t,"Hd",(function(){return tt.l})),n.d(t,"Id",(function(){return tt.m})),n.d(t,"Jd",(function(){return tt.n})),n.d(t,"Kd",(function(){return tt.o})),n.d(t,"Md",(function(){return tt.q})),n.d(t,"Nd",(function(){return tt.r})),n.d(t,"Od",(function(){return tt.t})),n.d(t,"Qd",(function(){return tt.u})),n.d(t,"Rd",(function(){return tt.v})),n.d(t,"Sd",(function(){return tt.w})),n.d(t,"Ud",(function(){return tt.x})),n.d(t,"Xd",(function(){return tt.y})),n.d(t,"Ad",(function(){return tt.j})),n.d(t,"wd",(function(){return nt.b})),n.d(t,"Td",(function(){return nt.f})),n.d(t,"Cd",(function(){return nt.d})),n.d(t,"zd",(function(){return nt.c})),n.d(t,"Fd",(function(){return nt.e})),n.d(t,"Gd",(function(){return Te.d})),n.d(t,"xd",(function(){return m.b})),n.d(t,"od",(function(){return o})),n.d(t,"Bd",(function(){return r})),n.d(t,"Wd",(function(){return Je})),n.d(t,"nd",(function(){return l})),n.d(t,"Ld",(function(){return c})),n.d(t,"ud",(function(){return Qt})),n.d(t,"Dd",(function(){return h})),n.d(t,"xb",(function(){return tn.b})),n.d(t,"M",(function(){return tn.a})),n.d(t,"a",(function(){return Se.a})),n.d(t,"b",(function(){return Se.b})),n.d(t,"c",(function(){return Se.c})),n.d(t,"d",(function(){return Se.d})),n.d(t,"e",(function(){return Se.e})),n.d(t,"f",(function(){return Se.f})),n.d(t,"g",(function(){return Se.g})),n.d(t,"h",(function(){return Se.h})),n.d(t,"i",(function(){return Se.i})),n.d(t,"j",(function(){return Se.j})),n.d(t,"k",(function(){return Se.k})),n.d(t,"l",(function(){return Se.l})),n.d(t,"n",(function(){return Se.n})),n.d(t,"m",(function(){return Se.m})),n.d(t,"o",(function(){return Se.o})),n.d(t,"r",(function(){return Se.r})),n.d(t,"p",(function(){return Se.p})),n.d(t,"q",(function(){return Se.q})),n.d(t,"s",(function(){return Se.s})),n.d(t,"t",(function(){return Se.t})),n.d(t,"u",(function(){return Se.u})),n.d(t,"v",(function(){return Se.v})),n.d(t,"w",(function(){return Se.w})),n.d(t,"x",(function(){return Se.x})),n.d(t,"y",(function(){return Se.y})),n.d(t,"z",(function(){return Se.z})),n.d(t,"A",(function(){return Se.A})),n.d(t,"B",(function(){return Se.B})),n.d(t,"C",(function(){return Se.C})),n.d(t,"D",(function(){return Se.D})),n.d(t,"E",(function(){return Se.E})),n.d(t,"F",(function(){return Se.F})),n.d(t,"G",(function(){return Se.G})),n.d(t,"H",(function(){return Se.H})),n.d(t,"I",(function(){return Se.I})),n.d(t,"J",(function(){return Se.J})),n.d(t,"L",(function(){return Se.L})),n.d(t,"K",(function(){return Se.K})),n.d(t,"N",(function(){return Se.M})),n.d(t,"O",(function(){return Se.N})),n.d(t,"P",(function(){return Se.O})),n.d(t,"Q",(function(){return Se.P})),n.d(t,"R",(function(){return Se.Q})),n.d(t,"S",(function(){return Se.R})),n.d(t,"T",(function(){return Se.S})),n.d(t,"V",(function(){return Se.U})),n.d(t,"U",(function(){return Se.T})),n.d(t,"lc",(function(){return Se.jc})),n.d(t,"W",(function(){return Se.V})),n.d(t,"X",(function(){return Se.W})),n.d(t,"Y",(function(){return Se.X})),n.d(t,"ab",(function(){return Se.Z})),n.d(t,"Z",(function(){return Se.Y})),n.d(t,"bb",(function(){return Se.ab})),n.d(t,"cb",(function(){return Se.bb})),n.d(t,"db",(function(){return Se.cb})),n.d(t,"eb",(function(){return Se.db})),n.d(t,"fb",(function(){return Se.eb})),n.d(t,"gb",(function(){return Se.fb})),n.d(t,"hb",(function(){return Se.gb})),n.d(t,"ib",(function(){return Se.hb})),n.d(t,"kb",(function(){return Se.jb})),n.d(t,"ob",(function(){return Se.nb})),n.d(t,"nb",(function(){return Se.mb})),n.d(t,"pb",(function(){return Se.ob})),n.d(t,"qb",(function(){return Se.pb})),n.d(t,"sb",(function(){return Se.rb})),n.d(t,"rb",(function(){return Se.qb})),n.d(t,"tb",(function(){return Se.sb})),n.d(t,"ub",(function(){return Se.tb})),n.d(t,"vb",(function(){return Se.ub})),n.d(t,"wb",(function(){return Se.vb})),n.d(t,"Ab",(function(){return Se.yb})),n.d(t,"Bb",(function(){return Se.zb})),n.d(t,"Cb",(function(){return Se.Ab})),n.d(t,"Db",(function(){return Se.Bb})),n.d(t,"Eb",(function(){return Se.Cb})),n.d(t,"Fb",(function(){return Se.Db})),n.d(t,"Gb",(function(){return Se.Eb})),n.d(t,"Hb",(function(){return Se.Fb})),n.d(t,"Ib",(function(){return Se.Gb})),n.d(t,"yb",(function(){return Se.wb})),n.d(t,"zb",(function(){return Se.xb})),n.d(t,"Jb",(function(){return Se.Hb})),n.d(t,"Pb",(function(){return Se.Nb})),n.d(t,"Kb",(function(){return Se.Ib})),n.d(t,"Nb",(function(){return Se.Lb})),n.d(t,"Lb",(function(){return Se.Jb})),n.d(t,"Mb",(function(){return Se.Kb})),n.d(t,"Ob",(function(){return Se.Mb})),n.d(t,"Qb",(function(){return Se.Ob})),n.d(t,"Rb",(function(){return Se.Pb})),n.d(t,"Sb",(function(){return Se.Qb})),n.d(t,"Tb",(function(){return Se.Rb})),n.d(t,"Ub",(function(){return Se.Sb})),n.d(t,"Vb",(function(){return Se.Tb})),n.d(t,"Wb",(function(){return Se.Ub})),n.d(t,"Xb",(function(){return Se.Vb})),n.d(t,"bc",(function(){return Se.Zb})),n.d(t,"Yb",(function(){return Se.Wb})),n.d(t,"Zb",(function(){return Se.Xb})),n.d(t,"ac",(function(){return Se.Yb})),n.d(t,"dc",(function(){return Se.bc})),n.d(t,"cc",(function(){return Se.ac})),n.d(t,"ec",(function(){return Se.cc})),n.d(t,"fc",(function(){return Se.dc})),n.d(t,"gc",(function(){return Se.ec})),n.d(t,"hc",(function(){return Se.fc})),n.d(t,"ic",(function(){return Se.gc})),n.d(t,"jc",(function(){return Se.hc})),n.d(t,"kc",(function(){return Se.ic})),n.d(t,"mc",(function(){return Se.kc})),n.d(t,"nc",(function(){return Se.lc})),n.d(t,"pc",(function(){return Se.nc})),n.d(t,"sc",(function(){return Se.qc})),n.d(t,"tc",(function(){return Se.rc})),n.d(t,"qc",(function(){return Se.oc})),n.d(t,"rc",(function(){return Se.pc})),n.d(t,"oc",(function(){return Se.mc})),n.d(t,"uc",(function(){return Se.sc})),n.d(t,"wc",(function(){return Se.uc})),n.d(t,"xc",(function(){return Se.vc})),n.d(t,"yc",(function(){return Se.wc})),n.d(t,"zc",(function(){return Se.xc})),n.d(t,"Ac",(function(){return Se.yc})),n.d(t,"Fc",(function(){return Se.Dc})),n.d(t,"Dc",(function(){return Se.Bc})),n.d(t,"Ec",(function(){return Se.Cc})),n.d(t,"Cc",(function(){return Se.Ac})),n.d(t,"Bc",(function(){return Se.zc})),n.d(t,"Hc",(function(){return Se.Fc})),n.d(t,"Pc",(function(){return Se.Nc})),n.d(t,"Yc",(function(){return Se.Wc})),n.d(t,"Ic",(function(){return Se.Gc})),n.d(t,"Oc",(function(){return Se.Mc})),n.d(t,"Gc",(function(){return Se.Ec})),n.d(t,"Jc",(function(){return Se.Hc})),n.d(t,"Kc",(function(){return Se.Ic})),n.d(t,"Lc",(function(){return Se.Jc})),n.d(t,"Mc",(function(){return Se.Kc})),n.d(t,"Nc",(function(){return Se.Lc})),n.d(t,"Rc",(function(){return Se.Pc})),n.d(t,"Qc",(function(){return Se.Oc})),n.d(t,"Tc",(function(){return Se.Rc})),n.d(t,"Uc",(function(){return Se.Sc})),n.d(t,"Vc",(function(){return Se.Tc})),n.d(t,"Wc",(function(){return Se.Uc})),n.d(t,"Xc",(function(){return Se.Vc})),n.d(t,"Zc",(function(){return Se.Xc})),n.d(t,"ad",(function(){return Se.Yc})),n.d(t,"dd",(function(){return Se.Zc})),n.d(t,"ed",(function(){return Se.ad})),n.d(t,"fd",(function(){return Se.bd})),n.d(t,"gd",(function(){return Se.cd})),n.d(t,"hd",(function(){return Se.dd})),n.d(t,"id",(function(){return Se.ed})),n.d(t,"jd",(function(){return Se.fd})),n.d(t,"kd",(function(){return Se.gd})),n.d(t,"Sc",(function(){return Se.Qc})),n.d(t,"jb",(function(){return Se.ib})),n.d(t,"vc",(function(){return Se.tc})),n.d(t,"ld",(function(){return Se.hd})),n.d(t,"lb",(function(){return Se.kb})),n.d(t,"mb",(function(){return Se.lb}));var r={};n.r(r),n.d(r,"copyModel",(function(){return J})),n.d(r,"listModels",(function(){return Z})),n.d(r,"moveModel",(function(){return ee})),n.d(r,"removeModel",(function(){return Q})),n.d(r,"browserFiles",(function(){return le})),n.d(r,"browserHTTPRequest",(function(){return Oe})),n.d(r,"concatenateArrayBuffers",(function(){return y.d})),n.d(r,"decodeWeights",(function(){return y.e})),n.d(r,"encodeWeights",(function(){return y.f})),n.d(r,"fromMemory",(function(){return Ie})),n.d(r,"getLoadHandlers",(function(){return k})),n.d(r,"getModelArtifactsForJSON",(function(){return y.g})),n.d(r,"getModelArtifactsInfoForJSON",(function(){return y.h})),n.d(r,"getSaveHandlers",(function(){return w})),n.d(r,"http",(function(){return ve})),n.d(r,"isHTTPScheme",(function(){return ye})),n.d(r,"loadWeights",(function(){return me})),n.d(r,"registerLoadRouter",(function(){return O})),n.d(r,"registerSaveRouter",(function(){return v})),n.d(r,"weightsLoaderFactory",(function(){return be})),n.d(r,"withSaveHandler",(function(){return Ne}));var o={};n.r(o),n.d(o,"fromPixelsAsync",(function(){return Fe})),n.d(o,"toPixels",(function(){return _e})),n.d(o,"fromPixels",(function(){return De}));var c={};n.r(c),n.d(c,"assertParamsValid",(function(){return Me})),n.d(c,"maskToAxes",(function(){return Pe})),n.d(c,"computeOutShape",(function(){return We})),n.d(c,"stridesWithElidedDims",(function(){return Le})),n.d(c,"getNormalizedAxes",(function(){return Ve})),n.d(c,"startIndicesWithElidedDims",(function(){return Ue})),n.d(c,"stopIndicesWithElidedDims",(function(){return Ge})),n.d(c,"stridesForAxis",(function(){return He})),n.d(c,"startForAxis",(function(){return Ke})),n.d(c,"stopForAxis",(function(){return qe})),n.d(c,"isSliceContinous",(function(){return Xe})),n.d(c,"computeFlatOffset",(function(){return Ye})),n.d(c,"parseSliceParams",(function(){return Ze})),n.d(c,"sliceInfo",(function(){return Qe}));var d={};n.r(d),n.d(d,"segOpComputeOptimalWindowSize",(function(){return Kt})),n.d(d,"computeOutShape",(function(){return qt})),n.d(d,"collectGatherOpShapeInfo",(function(){return Xt}));var l={};n.r(l),n.d(l,"axesAreInnerMostDims",(function(){return at.b})),n.d(l,"combineLocations",(function(){return at.c})),n.d(l,"computeOutAndReduceShapes",(function(){return at.d})),n.d(l,"expandShapeToKeepDim",(function(){return at.e})),n.d(l,"assertAxesAreInnerMostDims",(function(){return at.a})),n.d(l,"getAxesPermutation",(function(){return at.f})),n.d(l,"getUndoAxesPermutation",(function(){return at.h})),n.d(l,"getInnerMostAxes",(function(){return at.g})),n.d(l,"getBroadcastDims",(function(){return st.b})),n.d(l,"getReductionAxes",(function(){return st.c})),n.d(l,"assertAndGetBroadcastShape",(function(){return st.a})),n.d(l,"assertParamsConsistent",(function(){return ot})),n.d(l,"computeOutShape",(function(){return it})),n.d(l,"computeDilation2DInfo",(function(){return ct.d})),n.d(l,"computePool2DInfo",(function(){return ct.e})),n.d(l,"computePool3DInfo",(function(){return ct.f})),n.d(l,"computeConv2DInfo",(function(){return ct.a})),n.d(l,"computeConv3DInfo",(function(){return ct.b})),n.d(l,"computeDefaultPad",(function(){return ct.c})),n.d(l,"tupleValuesAreOne",(function(){return ct.i})),n.d(l,"eitherStridesOrDilationsAreOne",(function(){return ct.h})),n.d(l,"convertConv2DDataFormat",(function(){return ct.g})),n.d(l,"getFusedDyActivation",(function(){return ut.c})),n.d(l,"getFusedBiasGradient",(function(){return ut.b})),n.d(l,"applyActivation",(function(){return ut.a})),n.d(l,"shouldFuse",(function(){return ut.d})),n.d(l,"PARALLELIZE_THRESHOLD",(function(){return lt})),n.d(l,"computeOptimalWindowSize",(function(){return pt})),n.d(l,"slice_util",(function(){return c})),n.d(l,"upcastType",(function(){return et.b})),n.d(l,"getImageCenter",(function(){return ht})),n.d(l,"getReshaped",(function(){return ft})),n.d(l,"getPermuted",(function(){return mt})),n.d(l,"getReshapedPermuted",(function(){return bt})),n.d(l,"getSliceBeginCoords",(function(){return gt})),n.d(l,"getSliceSize",(function(){return yt})),n.d(l,"prepareAndValidate",(function(){return xt})),n.d(l,"validateUpdateShape",(function(){return vt.c})),n.d(l,"validateInput",(function(){return vt.b})),n.d(l,"calculateShapes",(function(){return vt.a})),n.d(l,"SELU_SCALEALPHA",(function(){return Ot})),n.d(l,"SELU_SCALE",(function(){return wt})),n.d(l,"ERF_P",(function(){return kt})),n.d(l,"ERF_A1",(function(){return It})),n.d(l,"ERF_A2",(function(){return Nt})),n.d(l,"ERF_A3",(function(){return St})),n.d(l,"ERF_A4",(function(){return Tt})),n.d(l,"ERF_A5",(function(){return $t})),n.d(l,"warn",(function(){return jt.b})),n.d(l,"log",(function(){return jt.a})),n.d(l,"mergeRealAndImagArrays",(function(){return Ct})),n.d(l,"splitRealAndImagArrays",(function(){return Et})),n.d(l,"complexWithEvenIndex",(function(){return At})),n.d(l,"complexWithOddIndex",(function(){return Rt})),n.d(l,"getComplexWithIndex",(function(){return Ft})),n.d(l,"assignToTypedArray",(function(){return _t})),n.d(l,"exponents",(function(){return Dt})),n.d(l,"exponent",(function(){return Mt})),n.d(l,"decodeEinsumEquation",(function(){return Lt})),n.d(l,"getEinsumPermutation",(function(){return Bt})),n.d(l,"checkEinsumDimSizes",(function(){return zt})),n.d(l,"getEinsumComputePath",(function(){return Vt})),n.d(l,"isIdentityPermutation",(function(){return Ut})),n.d(l,"prepareSplitSize",(function(){return Ht})),n.d(l,"segment_util",(function(){return d})),n.d(l,"fromUint8ToStringArray",(function(){return Yt})),n.d(l,"fromStringArrayToUint8",(function(){return Zt}));var h={};n.r(h),n.d(h,"nonMaxSuppressionV3Impl",(function(){return Jt.a})),n.d(h,"nonMaxSuppressionV4Impl",(function(){return Jt.b})),n.d(h,"nonMaxSuppressionV5Impl",(function(){return Jt.c})),n.d(h,"whereImpl",(function(){return en.a}));var f=n(277),m=(n(328),n(286)),y=n(298);class x{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==x.instance&&(x.instance=new x),x.instance}static registerSaveRouter(e){x.getInstance().saveRouters.push(e)}static registerLoadRouter(e){x.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return x.getHandlers(e,"save")}static getLoadHandlers(e,t){return x.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?x.getInstance().loadRouters:x.getInstance().saveRouters).forEach((t=>{const o=t(e,n);null!==o&&r.push(o)})),r}}const v=e=>x.registerSaveRouter(e),O=e=>x.registerLoadRouter(e),w=e=>x.getSaveHandlers(e),k=(e,t)=>x.getLoadHandlers(e,t),I="tensorflowjs",N="models_store",S="model_info_store";function T(){if(!Object(m.b)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function $(e){const t=e.result;t.createObjectStore(N,{keyPath:"modelPath"}),t.createObjectStore(S,{keyPath:"modelPath"})}class j{constructor(e){if(this.indexedDB=T(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(I,1);r.onupgradeneeded=()=>$(r),r.onsuccess=()=>{const o=r.result;if(null==t){const t=o.transaction(N,"readonly"),r=t.objectStore(N).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return o.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(o.close(),n(r.error)),t.oncomplete=()=>o.close()}else{const r=Object(y.h)(t),c=o.transaction(S,"readwrite");let d=c.objectStore(S);const l=d.put({modelPath:this.modelPath,modelArtifactsInfo:r});let h;l.onsuccess=()=>{h=o.transaction(N,"readwrite");const l=h.objectStore(N).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});l.onsuccess=()=>e({modelArtifactsInfo:r}),l.onerror=e=>{d=c.objectStore(S);const t=d.delete(this.modelPath);t.onsuccess=()=>(o.close(),n(l.error)),t.onerror=e=>(o.close(),n(l.error))}},l.onerror=e=>(o.close(),n(l.error)),c.oncomplete=()=>{null==h?o.close():h.oncomplete=()=>o.close()}}},r.onerror=e=>n(r.error)}))}}j.URL_SCHEME="indexeddb://";const C=e=>{return Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(j.URL_SCHEME)?(t=e.slice(j.URL_SCHEME.length),new j(t)):null;var t};x.registerSaveRouter(C),x.registerLoadRouter(C);class E{constructor(){this.indexedDB=T()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(I,1);n.onupgradeneeded=()=>$(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(S,"readonly"),c=o.objectStore(S).getAll();c.onsuccess=()=>{const t={};for(const e of c.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},c.onerror=e=>(r.close(),t(c.error)),o.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(path){var e;return path=(e=path).startsWith(j.URL_SCHEME)?e.slice(j.URL_SCHEME.length):e,new Promise(((e,t)=>{const n=this.indexedDB.open(I,1);n.onupgradeneeded=()=>$(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(S,"readwrite"),c=o.objectStore(S),d=c.get(path);let l;d.onsuccess=()=>{if(null==d.result)return r.close(),t(new Error(`Cannot find model with path '${path}' in IndexedDB.`));{const n=c.delete(path),o=()=>{l=r.transaction(N,"readwrite");const n=l.objectStore(N).delete(path);n.onsuccess=()=>e(d.result.modelArtifactsInfo),n.onerror=e=>t(d.error)};n.onsuccess=o,n.onerror=e=>(o(),r.close(),t(d.error))}},d.onerror=e=>(r.close(),t(d.error)),o.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},n.onerror=e=>t(n.error)}))}}var A=n(326);const R="/",F="tensorflowjs_models",_="info",D="model_topology",M="weight_specs",P="weight_data",W="model_metadata";function L(path){return{info:[F,path,_].join(R),topology:[F,path,D].join(R),weightSpecs:[F,path,M].join(R),weightData:[F,path,P].join(R),modelMetadata:[F,path,W].join(R)}}function B(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function z(e){const t=e.split(R);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(R)}class V{constructor(e){if(!Object(m.b)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=L(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Object(y.h)(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(y.a)(e.weightData));const o={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(o)),{modelArtifactsInfo:r}}catch(e){throw B(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const o=this.LS.getItem(this.keys.modelMetadata);if(null!=o){const e=JSON.parse(o);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const c=this.LS.getItem(this.keys.weightData);if(null==c)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Object(y.b)(c),t}}V.URL_SCHEME="localstorage://";const U=e=>{return Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(V.URL_SCHEME)?(t=e.slice(V.URL_SCHEME.length),new V(t)):null;var t};x.registerSaveRouter(U),x.registerLoadRouter(U);class G{constructor(){Object(A.b)(Object(m.b)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Object(A.b)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=F+R,n=R+_;for(let i=0;i<this.LS.length;++i){const r=this.LS.key(i);if(r.startsWith(t)&&r.endsWith(n)){e[z(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(path){var e;const t=L(path=(e=path).startsWith(V.URL_SCHEME)?e.slice(V.URL_SCHEME.length):e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${path}'`);const n=JSON.parse(this.LS.getItem(t.info));return B(t),n}}const H="://";class K{constructor(){this.managers={}}static getInstance(){return null==K.instance&&(K.instance=new K),K.instance}static registerManager(e,t){Object(A.b)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(H)&&(e=e.slice(0,e.indexOf(H))),Object(A.b)(e.length>0,(()=>"scheme must not be an empty string."));const n=K.getInstance();Object(A.b)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function X(e){if(-1===e.indexOf(H))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${K.getSchemes().join(",")}`);return{scheme:e.split(H)[0],path:e.split(H)[1]}}async function Y(e,t,n=!1){Object(A.b)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=x.getLoadHandlers(e);Object(A.b)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Object(A.b)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const o=r[0],c=x.getSaveHandlers(t);Object(A.b)(c.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Object(A.b)(c.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const d=c[0],l=X(e).scheme,h=X(e).path,f=l===X(e).scheme,m=await o.load();n&&f&&await K.getManager(l).removeModel(h);const y=await d.save(m);return n&&!f&&await K.getManager(l).removeModel(h),y.modelArtifactsInfo}async function Z(){const e=K.getSchemes(),t={};for(const n of e){const e=await K.getManager(n).listModels();for(const path in e){t[n+H+path]=e[path]}}return t}async function Q(e){const t=X(e);return K.getManager(t.scheme).removeModel(t.path)}async function J(e,t){return Y(e,t,!1)}async function ee(e,t){return Y(e,t,!0)}class te{fetch(path,e){return fetch(path,e)}now(){return performance.now()}encode(text,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(text)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Object(m.b)().get("IS_BROWSER")){Object(m.b)().setPlatform("browser",new te);try{K.registerManager(V.URL_SCHEME,new G)}catch(e){}try{K.registerManager(j.URL_SCHEME,new E)}catch(e){}}n(621);var ne=n(310),re=n(291),ae=n(318),se=n(368),oe=n(294);Object(f.b)();const ie={buffer:ne.a,cast:re.a,clone:ae.a,print:se.a};Object(oe.e)(ie);function ce(e){return new Promise((e=>setTimeout(e))).then(e)}class ue{constructor(e){if(!Object(m.b)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ue.URL_SCHEME)&&(e=e.slice(ue.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=Object(y.i)(e,n),o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),c=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(c.download=this.modelJsonFileName,c.href=o,await ce((()=>c.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ce((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Object(y.h)(e)}}}}ue.URL_SCHEME="downloads://";class de{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),o=r.modelTopology;if(null==o)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:o});const c=Object(y.g)(r,(e=>this.loadWeights(e)));e(c)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),o=n.map((path=>this.loadWeightsFile(path,r[path])));return Promise.all(o).then((e=>[t,Object(y.d)(e)]))}loadWeightsFile(path,e){return new Promise(((t,n)=>{const r=new FileReader;r.onload=e=>{const n=e.target.result;t(n)},r.onerror=e=>n(`Failed to weights data from file of path '${path}'.`),r.readAsArrayBuffer(e)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Object(y.c)(e.name))),r={};for(const o of e)o.paths.forEach((path=>{const e=Object(y.c)(path);if(-1!==t.indexOf(e))throw new Error(`Duplicate file basename found in weights manifest: '${e}'`);if(t.push(e),-1===n.indexOf(e))throw new Error(`Weight file with basename '${e}' is not provided.`);r[path]=this.weightsFiles[n.indexOf(e)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function le(e){return new de(e)}function pe(e,t,n,r){!function(e){Object(A.b)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Object(A.b)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Object(A.b)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Object(A.b)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let o=0;return Promise.all(e.map((c=>(c.then((c=>{const d=n+ ++o/e.length*(r-n);return t(d),c})),c))))}x.registerSaveRouter((e=>Object(m.b)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ue.URL_SCHEME)?function(e="model"){return new ue(e)}(e.slice(ue.URL_SCHEME.length)):null));var he=n(457);async function fe(e,t){null==t&&(t={});const n=null==t.fetchFunc?Object(m.b)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),o=(null==t.onProgress?await Promise.all(r):await pe(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(o):await pe(o,t.onProgress,.5,1)}async function me(e,t="",n,r){return be((e=>fe(e,{requestInit:r})))(e,t,n)}function be(e){return async(t,n="",r)=>{const o=t.map((()=>!1)),c={},d=null!=r?r.map((()=>!1)):[],l=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const h="quantization"in e?e.quantization.dtype:e.dtype,f=he.a[h]*A.O(e.shape),m=()=>{o[t]=!0,null==c[t]&&(c[t]=[]),c[t].push({manifestEntry:e,groupOffset:n,sizeBytes:f})};null!=r?r.forEach(((t,n)=>{t===e.name&&(m(),d[n]=!0)})):m(),l.push(e.name),n+=f}))})),!d.every((e=>e))){const e=r.filter(((e,i)=>!d[i]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const h=o.reduce(((e,t,i)=>(t&&e.push(i),e)),[]),f=[];h.forEach((i=>{t[i].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;f.push(t)}))}));const m=await e(f),x={};let v=0;return h.forEach((i=>{const e=t[i].paths.length;let n=0;for(let i=0;i<e;i++)n+=m[v+i].byteLength;const r=new ArrayBuffer(n),o=new Uint8Array(r);let d=0;for(let i=0;i<e;i++){const e=new Uint8Array(m[v+i]);o.set(e,d),d+=e.byteLength}c[i].forEach((e=>{const t=r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=Object(y.e)(t,[e.manifestEntry]);for(const e in n)x[e]=n[e]})),v+=e})),x}}class ge{constructor(path,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(Object(A.b)("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=Object(m.b)().platform.fetch,Object(A.b)(null!=path&&path.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(path)&&Object(A.b)(2===path.length,(()=>`URL paths for http must have a length of 2, (actual length is ${path.length}).`)),this.path=path,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=Object(y.i)(e,n);t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const o=await this.fetch(this.path,t);if(o.ok)return{modelArtifactsInfo:Object(y.h)(e),responses:[o]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Object(y.g)(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),o=n>t?e.substring(n):"";return[r+"/",o]}(t),o=this.weightPathPrefix||n,c=[];for(const t of e)c.push(...t.weights);const d=[],l=[];for(const t of e)for(const path of t.paths)null!=this.weightUrlConverter?l.push(this.weightUrlConverter(path)):d.push(o+path+r);this.weightUrlConverter&&d.push(...await Promise.all(l));const h=await fe(d,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[c,Object(y.d)(h)]}}function ye(e){return null!=e.match(ge.URL_SCHEME_REGEX)}ge.URL_SCHEME_REGEX=/^https?:\/\//;const xe=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ye(e))):ye(e),n)return ve(e,t)}return null};function ve(path,e){return new ge(path,e)}function Oe(path,e){return ve(path,e)}x.registerSaveRouter(xe),x.registerLoadRouter(xe);class we{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ke{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Ie(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new we(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new we({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new we({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Ne(e){return new ke(e)}var Se=n(278),Te=n(343),$e=n(276),je=n(275),Ce=n(397);let Ee;function Ae(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,o=!1,c=!1,d=!1,l=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)c=!0;else if(null!=e.getContext)d=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);l=!0}if(o){const t=2;if(o&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Object(Te.b)(Se.ib,f.a.backendName)){const n={pixels:e},r={numChannels:t};return f.a.runKernel(Se.ib,n,r)}const[h,m]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];let y,x;if(d?y=e.getContext("2d").getImageData(0,0,h,m).data:r||n?y=e.data:(c||o||l)&&(null==Ee&&(Ee=document.createElement("canvas").getContext("2d")),Ee.canvas.width=h,Ee.canvas.height=m,Ee.drawImage(e,0,0,h,m),y=Ee.getImageData(0,0,h,m).data),4===t)x=new Int32Array(y);else{const e=h*m;x=new Int32Array(e*t);for(let i=0;i<e;i++)for(let e=0;e<t;++e)x[i*t+e]=y[4*i+e]}const v=[m,h,t];return Object(Ce.a)(x,v,"int32")}function Re(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Fe(e,t=3){let n=null;if(Object(m.b)().getBool("WRAP_TO_IMAGEBITMAP")&&Re(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Ae(n,t)}async function _e(img,canvas){let e=Object($e.a)(img,"img","toPixels");if(!(img instanceof oe.a)){const t=e;e=Object(re.a)(t,"int32"),t.dispose()}if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const[t,n]=e.shape.slice(0,2),r=2===e.rank?1:e.shape[2];if(r>4||2===r)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);const data=await e.data(),o="float32"===e.dtype?255:1,c=new Uint8ClampedArray(n*t*4);for(let i=0;i<t*n;++i){const t=[0,0,0,255];for(let n=0;n<r;n++){const c=data[i*r+n];if("float32"===e.dtype){if(c<0||c>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${c}.`)}else if("int32"===e.dtype&&(c<0||c>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${c}.`);1===r?(t[0]=c*o,t[1]=c*o,t[2]=c*o):t[n]=c*o}const n=4*i;c[n+0]=Math.round(t[0]),c[n+1]=Math.round(t[1]),c[n+2]=Math.round(t[2]),c[n+3]=Math.round(t[3])}if(null!=canvas){canvas.width=n,canvas.height=t;const e=canvas.getContext("2d"),r=new ImageData(c,n,t);e.putImageData(r,0,0)}return e!==img&&e.dispose(),c}const De=Object(je.a)({fromPixels_:Ae});function Me(input,e,t){const n=input.shape.length;A.b(n===e.length,(()=>`Error in slice${n}D: Length of begin ${e} must match the rank of the array (${n}).`)),A.b(n===t.length,(()=>`Error in slice${n}D: Length of size ${t} must match the rank of the array (${n}).`));for(let i=0;i<n;++i)A.b(e[i]+t[i]<=input.shape[i],(()=>`Error in slice${n}D: begin[${i}] + size[${i}] (${e[i]+t[i]}) would overflow input.shape[${i}] (${input.shape[i]})`))}function Pe(mask){const e=[];let t=0;for(;mask>0;)1&mask&&e.push(t),mask/=2,t++;return e}function We(e,t,n){const r=[];for(let o=0;o<e.length;o++)r[o]=Math.ceil((t[o]-e[o])/n[o]);return r}function Le(e,t,n,r){const o=[...e];for(let i=o.length;i<r.length;i++)o.push(1);for(let i=0;i<n;i++)0===i?o[t]=1:(o.splice(t,0,1),o.pop());return o}function Be(e,t,n){return n<=e?n:n-(t-1)}function ze(e,t){const n=[];for(let i=0;i<e;i++)n.push(t+i);return n}function Ve(e,t,n,r,o,c,d,l,h){const f=e.length;let m=new Array(f),y=new Array(f),x=new Array(f);if(t.length&&n>0){const h=t[0],f=n+1;m=Ue(d,h,f,r,e),y=Ge(l,h,f,o,e),x=Le(c,h,f,e)}else for(let t=0;t<f;t++)m[t]=Ke(d,r,c,e,t,h),y[t]=qe(l,o,c,e,t,h),x[t]=He(c,t,h);return{begin:m,end:y,strides:x}}function Ue(e,t,n,r,o){const c=[...o],d=ze(n,t);for(let o=0;o<c.length;o++)if(d.indexOf(o)>-1)c[o]=0;else{const d=Be(t,n,o);let l=r[d];e&1<<d&&(l=0),c[o]=l}return c}function Ge(e,t,n,r,o){const c=[...o],d=ze(n,t);for(let o=0;o<c.length;o++)if(d.indexOf(o)>-1)c[o]=Number.MAX_SAFE_INTEGER;else{const d=Be(t,n,o);let l=r[d];e&1<<d&&(l=Number.MAX_SAFE_INTEGER),c[o]=l}for(let i=0;i<c.length;i++){const e=o[i];c[i]<0&&(c[i]+=e),c[i]=A.i(0,c[i],o[i])}return c}function He(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Ke(e,t,n,r,o,c){let d=t[o];const l=n[o]||1;(e&1<<o||c&1<<o||null==d)&&(d=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const h=r[o];return d<0&&(d+=h),d=A.i(0,d,h-1),d}function qe(e,t,n,r,o,c){let d=t[o];const l=n[o]||1;(e&1<<o||c&1<<o||null==d)&&(d=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const h=r[o];return d<0&&(d+=h),d=l>0?A.i(0,d,h):A.i(-1,d,h-1),d}function Xe(e,t,n){let r=n.length;for(let i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(let i=r+1;i<n.length;i++)if(t[i]>0||n[i]!==e[i])return!1;return!0}function Ye(e,t){let n=e.length>0?e[e.length-1]:1;for(let i=0;i<e.length-1;i++)n+=e[i]*t[i];return n}function Ze(e,t,n){let r;const o=e.shape.length;let c;return r="number"==typeof t?[t,...new Array(o-1).fill(0)]:t.length<o?t.concat(new Array(o-t.length).fill(0)):t.slice(),r.forEach((e=>{A.b(-1!==e,(()=>"slice() does not support negative begin indexing."))})),c=null==n?new Array(o).fill(-1):"number"==typeof n?[n,...new Array(o-1).fill(-1)]:n.length<o?n.concat(new Array(o-n.length).fill(-1)):n,c=c.map(((t,i)=>t>=0?t:(A.b(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${i}.`)),e.shape[i]-r[i]))),[r,c]}function Qe(e,t,n,r,o,c,d,l,h){let f=t.slice(),m=n.slice(),y=r;null==r&&(y=new Array(f.length));const x=Pe(d);if(x.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==d&&0!==l)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==d&&0!==h)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const v=e.length-f.length,O=Pe(l),w=e.slice();O.forEach((e=>{f[e]=0,m[e]=1,w.splice(e,0,1)}));const{begin:k,end:I,strides:N}=Ve(w,x,v,f,m,y,o,c,d);f=k,m=I,y=N;const S=Pe(h);S.forEach((e=>{m[e]=f[e]+1,y[e]=1}));const T=We(f,m,y),$=T.filter(((e,t)=>-1===S.indexOf(t)));return{nonStrided:y.every((e=>1===e)),$begin:f,$end:m,$strides:y,size:T,newShape:w,outShape:$}}var Je=n(279),et=n(308),tt=n(539),nt=n(384),at=n(333),st=n(288);function ot(e,t){const n=e[0].length;e.forEach(((e,i)=>{A.b(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${i}] must be the same as the rank of the rest (${n})`))})),A.b(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,i)=>{for(let o=0;o<n;o++)A.b(o===t||e[o]===r[o],(()=>`Error in concat${n}D: Shape of tensors[${i}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${i}.`))}))}function it(e,t){const n=e[0].slice();for(let i=1;i<e.length;i++)n[t]+=e[i][t];return n}var ct=n(302),ut=n(314);const lt=30;function pt(e){return e<=lt?e:Object(A.G)(e,Math.floor(Math.sqrt(e)))}function ht(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function ft(e,t,n,r=!0){let o=[];if(r)o=o.concat(t.slice(0)),o.push(e[0]/n),o=o.concat(e.slice(1));else{o=o.concat(e[0]);const n=t.length;for(let i=0;i<n;++i)o=o.concat([e[i+1]/t[i],t[i]]);o=o.concat(e.slice(n+1))}return o}function mt(e,t,n=!0){const r=[];if(n){r.push(t);for(let i=t+1;i<e;++i)i<=2*t?(r.push(i),r.push(i-(t+1))):r.push(i)}else{const n=[],o=[];for(let i=1;i<e;++i)i>=2*t+1||i%2==1?o.push(i):n.push(i);r.push(...n),r.push(0),r.push(...o)}return r}function bt(e,t,n,r=!0){const o=[];r?o.push(e[0]/n):o.push(e[0]*n);for(let i=1;i<e.length;++i)i<=t.length?r?o.push(t[i-1]*e[i]):o.push(e[i]/t[i-1]):o.push(e[i]);return o}function gt(e,t){const n=[0];for(let i=0;i<t;++i)n.push(e[i][0]);return n}function yt(e,t,n){const r=e.slice(0,1);for(let i=0;i<n;++i)r.push(e[i+1]-t[i][0]-t[i][1]);return r}function xt(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Object(A.O)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const o=t.shape,c=o[o.length-1];let d=1;for(let i=0;i<o.length-1;++i)d*=o[i];const l=e.shape,h=o.slice();h.pop();let f=1;for(let i=c;i<n;++i)f*=l[i],h.push(l[i]);const m=[...Object(A.j)(e.shape).map((e=>e/f)),1].slice(0,c);return[h,d,f,m]}var vt=n(337);const Ot=1.7580993408473768,wt=1.0507009873554805,kt=.3275911,It=.254829592,Nt=-.284496736,St=1.421413741,Tt=-1.453152027,$t=1.061405429;var jt=n(327);function Ct(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let i=0;i<n.length;i+=2)n[i]=e[i/2],n[i+1]=t[i/2];return n}function Et(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let i=0;i<e.length;i+=2)t[i/2]=e[i],n[i/2]=e[i+1];return{real:t,imag:n}}function At(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let i=0;i<e.length;i+=4)n[Math.floor(i/4)]=e[i],r[Math.floor(i/4)]=e[i+1];return{real:n,imag:r}}function Rt(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let i=2;i<e.length;i+=4)n[Math.floor(i/4)]=e[i],r[Math.floor(i/4)]=e[i+1];return{real:n,imag:r}}function Ft(e,t){return{real:e[2*t],imag:e[2*t+1]}}function _t(data,e,t,n){data[2*n]=e,data[2*n+1]=t}function Dt(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let i=0;i<Math.ceil(e/2);i++){const o=(t?2:-2)*Math.PI*(i/e);n[i]=Math.cos(o),r[i]=Math.sin(o)}return{real:n,imag:r}}function Mt(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Pt="->",Wt=/->/g;function Lt(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Wt,"").length)/Pt.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,o]=e.split(Pt);Object(A.b)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const c=r.split(","),d=c.length;if(t!==d)throw new Error(`Expected ${d} input tensors, received ${t}`);if(d>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const l=[];for(let i=0;i<o.length;++i){const e=o[i];if(!c.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===l.indexOf(e)&&l.push(e)}for(let i=0;i<r.length;++i){const e=r[i];-1===l.indexOf(e)&&","!==e&&l.push(e)}const h=new Array(c.length);for(let i=0;i<d;++i){if(new Set(c[i].split("")).size!==c[i].length)throw new Error(`Found duplicate axes in input component ${c[i]}. Support for duplicate axes in input is not implemented yet.`);h[i]=[];for(let e=0;e<c[i].length;++e)h[i].push(l.indexOf(c[i][e]))}const f=l.length,m=[];for(let i=o.length;i<f;++i)m.push(i);return{allDims:l,summedDims:m,idDims:h}}function Bt(e,t){let n=new Array(e);n.fill(-1);for(let i=0;i<t.length;++i)n[t[i]]=i;const r=[];for(let i=0;i<e;++i)-1===n[i]&&r.push(i);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function zt(e,t,n){const r=new Array(e);for(let i=0;i<n.length;++i){const e=n[i].shape;for(let n=0;n<t[i].length;++n)void 0===r[t[i][n]]?r[t[i][n]]=e[n]:Object(A.b)(r[t[i][n]]===e[n],(()=>`Expected dimension ${r[t[i][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function Vt(e,t){const path=e,n=[];let r=0;0===e.length&&path.push(-1),r=e.length+1;for(let i=0;i<r;++i)n.push([]);const o=[];for(let i=0;i<path.length;++i){const e=Gt(t,path[i]);for(const t of e)-1===o.indexOf(t)&&(n[i].push(t),o.push(t))}return{path:path,steps:n}}function Ut(e){return e.every(((e,t)=>e===t))}function Gt(e,t){const n=[];for(let i=0;i<e.length;++i)0!==e[i].length&&-1===e[i].indexOf(t)&&-1!==t||n.push(i);return n}function Ht(e,t,n=0){let r=[];if("number"==typeof t)Object(A.b)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const o=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);Object(A.b)(o<=1,(()=>"There should be only one negative value in split array."));const c=t.indexOf(-1);if(-1!==c){const r=t.reduce(((a,b)=>b>0?a+b:a));t[c]=e.shape[n]-r}Object(A.b)(e.shape[n]===t.reduce(((a,b)=>a+b)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Kt(e,t){let n,r=!1;for(e<=lt?(n=e,r=!0):n=Object(A.G)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Object(A.G)(e,n+1);return n}function qt(e,t,n){const r=[],o=e.length;for(let c=0;c<o;c++)c!==t?r.push(e[c]):r.push(n);return r}function Xt(e,t,n,r){const o=t.shape.length,c=e.shape.length;if(0!==r&&(r<-o||r>o))throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${r}`);if(r<0&&(r+=o),r>c)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${c}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let i=0;i<r;++i)if(e.shape[i]!==t.shape[i])throw new Error(`x.shape[${i}]: ${e.shape[i]} should be equal to indices.shape[${i}]: ${t.shape[i]}.`);const d=e.shape[n],l=[];let h=1,f=1,m=1;for(let i=0;i<r;++i)l.push(e.shape[i]),h*=e.shape[i];for(let i=r;i<n;i++)l.push(e.shape[i]),f*=e.shape[i];for(let i=r;i<o;i++)l.push(t.shape[i]);for(let i=n+1;i<c;i++)l.push(e.shape[i]),m*=e.shape[i];return{batchSize:h,sliceSize:m,outerSize:f,dimSize:d,outputShape:l}}function Yt(e){try{return e.map((e=>Object(Je.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Zt(e){return e.map((s=>Object(Je.encodeString)(s)))}var Qt=n(367),Jt=n(317),en=n(398),tn=n(344)},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(277),o=n(326);function c(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const c=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const d=(...e)=>{r.a.startScope(n);try{const t=c(...e);return Object(o.x)(t)&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(t),t}catch(e){throw r.a.endScope(null),e}};return Object.defineProperty(d,"name",{value:n,configurable:!0}),d}},function(e,t,n){"use strict";n.d(t,"c",(function(){return h})),n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return x}));var r=n(277),o=n(286),c=n(294),d=n(326),l=n(279);function h(e,t){let n=e;if(Object(d.A)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Object(d.A)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Object(o.b)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&f(e,r,[]),r}function f(e,t,n){if(n=n||[],!Array.isArray(e)&&!Object(d.A)(e))return void Object(d.b)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Object(d.b)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Object(d.b)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let i=0;i<e.length;++i)f(e[i],r,n.concat(i))}function m(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function y(e,t,n,o="numeric"){if(e instanceof c.a)return m(o,e.dtype,t,n),e;let f=Object(d.r)(e);if("string"!==f&&["bool","int32","float32"].indexOf(o)>=0&&(f=o),m(o,f,t,n),null==e||!Object(d.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const y=h(e,f);Object(d.A)(e)||Array.isArray(e)||(e=[e]);const x="string"!==f?Object(l.toTypedArray)(e,f):Object(d.m)(e,[],!0);return r.a.makeTensor(x,y,f)}function x(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,i)=>y(e,`${t}[${i}]`,n,r)))}},function(e,t,n){"use strict";n.d(t,"b",(function(){return S})),n.d(t,"a",(function(){return T}));var r=n(344),o=n(286),c=n(366),d=n(278),l=n(343),h=n(279),f=n(326);class m{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new x)}profileKernel(e,t,n){let r;const c=()=>{r=n()};let d;const l=h.now();if(this.backendTimer.timerAvailable())d=this.backendTimer.time(c);else{c();for(const output of r)output.dataSync();d=Promise.resolve({kernelMs:h.now()-l})}if(Object(o.b)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<r.length;i++){const output=r[i];output.data().then((t=>{y(t,output.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:d.then((e=>e.kernelMs)),extraInfo:d.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:o,extraInfo:c}=e;n.forEach((e=>{Promise.all([e.data(),r,c]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],o,n[2])}))}))}}function y(e,t,n){if("float32"!==t)return!1;for(let i=0;i<e.length;i++){const t=e[i];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class x{logKernelProfile(e,t,n,r,o,c){const time="number"==typeof r?f.L(`${r}ms`,9):r.error,d=f.L(e,25),l=t.rank,h=t.size,m=f.L(t.shape.toString(),14);let y="";for(const e in o){const input=o[e];if(null!=input){const n=input.shape||t.shape,r=n.length;y+=`${e}: ${r}D ${r>0?n:""} `}}console.log(`%c${d}\t%c${time}\t%c${l}D ${m}\t%c${h}\t%c${y}\t%c${c}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var v=n(294),O=n(283),w=n(327);function k(e){return null!=e.kernelName}class I{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class N{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new I}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let i=0;i<e.length;i++){const t=e[i];if(await this.initializeBackend(t).success)return void await this.setBackend(t)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(w.b(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new m(this.backendInstance),!0}setupRegisteredKernels(){Object(l.c)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Object(l.c)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.b||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,w.b(`Initialization of backend ${e} failed`),w.b(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return w.b(`Initialization of backend ${e} failed`),w.b(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((a,b)=>this.registryFactory[b].priority-this.registryFactory[a].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let i=0;i<e.length;i++){const t=e[i],{success:n,asyncInit:r}=this.initializeBackend(t);if(r||n)return{name:t,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,o=this.readSync(t),c=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,o,n.shape,n.dtype,c),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return N.nextTensorId++}nextVariableId(){return N.nextVariableId++}clone(e){const t=T.runKernel(d.rb,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return T.runKernel(d.w,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Object(l.b)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let o=0;n.forEach((e=>{o+="complex64"===e.dtype?3:1}));const c=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],d=r-t-o-c;if(d>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${d} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),o=this.state.numBytes,c=this.state.numTensors;let d,h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const m=k(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(k(e)){const{kernelName:t,inputs:o,attrs:c}=e;null==this.backendName&&this.backend;const m=Object(l.b)(t,this.backendName);f.b(null!=m,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),d=()=>{const e=this.backend.numDataIds();h=m.kernelFunc({inputs:o,attrs:c,backend:this.backend});const d=Array.isArray(h)?h:[h];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,d);const l=d.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,o,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,o=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};d=()=>{const e=this.backend.numDataIds();h=this.tidy((()=>t(this.backend,o)));const n=Array.isArray(h)?h:[h];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(m,e,n),n}}const{inputs:y,attrs:x}=e,v=k(e)?null:e.backwardsFunc;let O;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(O=this.profiler.profileKernel(m,y,(()=>d())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(O),t=O.outputs):t=d()})),r&&this.addTapeNode(m,y,t,v,n,x),this.state.profiling&&this.state.activeProfile.kernels.push({name:m,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-c,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(y).map((e=>null!=y[e]?y[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:O.timeMs,extraInfo:O.extraInfo}),Array.isArray(h)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=Object(l.a)(e);if(null!=r){const e=r.inputsToSave||[],o=r.outputsToSave||[];let c;r.saveAllInputs?(f.b(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),c=Object.keys(t).map((e=>t[e]))):c=e.map((e=>t[e]));const d=n.filter(((e,i)=>o[i]));return c.concat(d)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let o=e;"string"===n&&f.z(e[0])&&(o=e.map((e=>h.encodeString(e))));const c=r.write(o,t,n),d=new v.a(t,n,c,this.nextTensorId());if(this.trackTensor(d,r),"string"===n){const e=this.state.tensorInfo.get(c),t=Object(f.f)(o);this.state.numBytes+=t-e.bytes,e.bytes=t}return d}makeTensorFromDataId(e,t,n,r){n=n||"float32";const o=new v.a(t,n,e,this.nextTensorId());return this.trackTensor(o,r),o}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const o=new v.c(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}trackTensor(a,e){this.state.numTensors++,"string"===a.dtype&&this.state.numStringTensors++;let t=0;"complex64"!==a.dtype&&"string"!==a.dtype&&(t=a.size*f.g(a.dtype)),this.state.numBytes+=t,this.state.tensorInfo.has(a.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(a.dataId,{backend:e||this.backend,dtype:a.dtype,shape:a.shape,bytes:t})),a instanceof v.c||this.track(a)}incRef(a,e){this.trackTensor(a,e),this.backend.incRef(a.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(a){if(!this.state.tensorInfo.has(a.dataId))return;const e=this.state.tensorInfo.get(a.dataId);if(this.state.numTensors--,"string"===a.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),"complex64"!==a.dtype&&"string"!==a.dtype){const e=a.size*f.g(a.dtype);this.state.numBytes-=e}e.backend.disposeData(a.dataId)&&this.removeDataId(a.dataId,e.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,o,c){const d={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:o},h=Object(l.a)(e);null!=h&&(r=h.gradFunc),null!=r&&(d.gradient=e=>(e=e.map(((e,i)=>{if(null==e){const output=n[i],e=f.F(output.size,output.dtype);return this.makeTensor(e,output.shape,output.dtype)}return e})),r(e.length>1?e:e[0],o,c))),this.state.activeTape.push(d)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Object(O.a)(e),n=new Set(t.map((e=>e.id)));for(let i=0;i<this.state.activeScope.track.length;i++){const e=this.state.activeScope.track[i];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(f.b(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));f.b(o instanceof v.a,(()=>"The result y returned by f() must be a tensor."));const c=function(e,t,n){const r={},o={};for(let i=0;i<t.length;i++)r[t[i].id]=!0;for(let i=0;i<e.length;i++){const n=e[i],c=n.inputs;for(const e in c){const input=c[e];let d=!1;for(let e=0;e<t.length;e++)if(r[input.id]){n.outputs.forEach((output=>r[output.id]=!0)),d=!0,o[n.id]=!0;break}if(d)break}}const c={};c[n.id]=!0;const d={};for(let i=e.length-1;i>=0;i--){const t=e[i],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(c[t.outputs[e].id]){for(const e in n)c[n[e].id]=!0,d[t.id]=!0;break}}const l=[];for(let i=0;i<e.length;i++){const t=e[i];if(o[t.id]&&d[t.id]){const e={};for(const n in t.inputs){const o=t.inputs[n];r[o.id]&&(e[n]=o)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,l.push(n)}}return l}(this.state.activeTape,t,o);if(!r&&0===c.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[o.id]=null==n?function(e){const t=Object(f.D)(Object(f.O)(e),"float32");return T.makeTensor(t,e,"float32")}(o.shape):n,function(e,t,n,r){for(let i=t.length-1;i>=0;i--){const o=t[i],c=[];if(o.outputs.forEach((t=>{const n=e[t.id];null!=n?c.push(n):c.push(null)})),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const d=o.gradient(c);for(const t in o.inputs){if(!(t in d))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(d)}.`);const c=n((()=>d[t]()));if("float32"!==c.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${c.dtype}'`);const l=o.inputs[t];if(!f.a(c.shape,l.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${t}' has shape '${c.shape}', which does not match the shape of the input '${l.shape}'`);if(null==e[l.id])e[l.id]=c;else{const t=e[l.id];e[l.id]=r(t,c),t.dispose()}}}}(e,c,(e=>this.tidy(e)),$);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:o,grads:r}}))}customGrad(e){return f.b(f.u(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;f.b(t.every((e=>e instanceof v.a)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((input,i)=>{r[i]=input}));return this.runKernelFunc({forwardFunc:(r,o)=>(n=e(...t,o),f.b(n.value instanceof v.a,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),f.b(f.u(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const o=n.gradFunc(e,r),c=Array.isArray(o)?o:[o];f.b(c.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),f.b(c.every((e=>e instanceof v.a)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const d={};return c.forEach(((e,i)=>{d[i]=()=>e})),d},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Object(h.now)(),n=await this.backend.time(e);return n.wallMs=Object(h.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new I;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function S(){const e=Object(c.b)();if(null==e._tfengine){const t=new o.a(e);e._tfengine=new N(t)}return Object(o.c)(e._tfengine.ENV),Object(v.f)((()=>e._tfengine)),e._tfengine}N.nextTensorId=0,N.nextVariableId=0;const T=S();function $(a,b){const e={a:a,b:b};return T.runKernel(d.d,e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return d})),n.d(t,"e",(function(){return l})),n.d(t,"f",(function(){return h})),n.d(t,"g",(function(){return f})),n.d(t,"h",(function(){return m})),n.d(t,"i",(function(){return y})),n.d(t,"j",(function(){return x})),n.d(t,"k",(function(){return v})),n.d(t,"l",(function(){return O})),n.d(t,"n",(function(){return w})),n.d(t,"m",(function(){return k})),n.d(t,"o",(function(){return I})),n.d(t,"r",(function(){return N})),n.d(t,"p",(function(){return S})),n.d(t,"q",(function(){return T})),n.d(t,"s",(function(){return $})),n.d(t,"t",(function(){return j})),n.d(t,"u",(function(){return C})),n.d(t,"v",(function(){return E})),n.d(t,"w",(function(){return A})),n.d(t,"x",(function(){return R})),n.d(t,"y",(function(){return F})),n.d(t,"z",(function(){return _})),n.d(t,"A",(function(){return D})),n.d(t,"B",(function(){return M})),n.d(t,"C",(function(){return P})),n.d(t,"D",(function(){return W})),n.d(t,"E",(function(){return L})),n.d(t,"F",(function(){return B})),n.d(t,"G",(function(){return z})),n.d(t,"H",(function(){return V})),n.d(t,"I",(function(){return U})),n.d(t,"J",(function(){return G})),n.d(t,"L",(function(){return H})),n.d(t,"K",(function(){return K})),n.d(t,"M",(function(){return X})),n.d(t,"N",(function(){return Y})),n.d(t,"O",(function(){return Z})),n.d(t,"P",(function(){return Q})),n.d(t,"Q",(function(){return J})),n.d(t,"R",(function(){return ee})),n.d(t,"S",(function(){return te})),n.d(t,"U",(function(){return ne})),n.d(t,"T",(function(){return re})),n.d(t,"jc",(function(){return ae})),n.d(t,"V",(function(){return se})),n.d(t,"W",(function(){return oe})),n.d(t,"X",(function(){return ie})),n.d(t,"Z",(function(){return ce})),n.d(t,"Y",(function(){return ue})),n.d(t,"ab",(function(){return de})),n.d(t,"bb",(function(){return le})),n.d(t,"cb",(function(){return pe})),n.d(t,"db",(function(){return he})),n.d(t,"eb",(function(){return fe})),n.d(t,"fb",(function(){return me})),n.d(t,"gb",(function(){return be})),n.d(t,"hb",(function(){return ge})),n.d(t,"jb",(function(){return ye})),n.d(t,"nb",(function(){return xe})),n.d(t,"mb",(function(){return ve})),n.d(t,"ob",(function(){return Oe})),n.d(t,"pb",(function(){return we})),n.d(t,"rb",(function(){return ke})),n.d(t,"qb",(function(){return Ie})),n.d(t,"sb",(function(){return Ne})),n.d(t,"tb",(function(){return Se})),n.d(t,"ub",(function(){return Te})),n.d(t,"vb",(function(){return $e})),n.d(t,"yb",(function(){return je})),n.d(t,"zb",(function(){return Ce})),n.d(t,"Ab",(function(){return Ee})),n.d(t,"Bb",(function(){return Ae})),n.d(t,"Cb",(function(){return Re})),n.d(t,"Db",(function(){return Fe})),n.d(t,"Eb",(function(){return _e})),n.d(t,"Fb",(function(){return De})),n.d(t,"Gb",(function(){return Me})),n.d(t,"wb",(function(){return Pe})),n.d(t,"xb",(function(){return We})),n.d(t,"Hb",(function(){return Le})),n.d(t,"Nb",(function(){return Be})),n.d(t,"Ib",(function(){return ze})),n.d(t,"Lb",(function(){return Ve})),n.d(t,"Jb",(function(){return Ue})),n.d(t,"Kb",(function(){return Ge})),n.d(t,"Mb",(function(){return He})),n.d(t,"Ob",(function(){return Ke})),n.d(t,"Pb",(function(){return qe})),n.d(t,"Qb",(function(){return Xe})),n.d(t,"Rb",(function(){return Ye})),n.d(t,"Sb",(function(){return Ze})),n.d(t,"Tb",(function(){return Qe})),n.d(t,"Ub",(function(){return Je})),n.d(t,"Vb",(function(){return et})),n.d(t,"Zb",(function(){return tt})),n.d(t,"Wb",(function(){return nt})),n.d(t,"Xb",(function(){return at})),n.d(t,"Yb",(function(){return st})),n.d(t,"bc",(function(){return ot})),n.d(t,"ac",(function(){return it})),n.d(t,"cc",(function(){return ct})),n.d(t,"dc",(function(){return ut})),n.d(t,"ec",(function(){return lt})),n.d(t,"fc",(function(){return pt})),n.d(t,"gc",(function(){return ht})),n.d(t,"hc",(function(){return ft})),n.d(t,"ic",(function(){return mt})),n.d(t,"kc",(function(){return bt})),n.d(t,"lc",(function(){return gt})),n.d(t,"nc",(function(){return yt})),n.d(t,"qc",(function(){return xt})),n.d(t,"rc",(function(){return vt})),n.d(t,"oc",(function(){return Ot})),n.d(t,"pc",(function(){return wt})),n.d(t,"mc",(function(){return kt})),n.d(t,"sc",(function(){return It})),n.d(t,"uc",(function(){return Nt})),n.d(t,"vc",(function(){return St})),n.d(t,"wc",(function(){return Tt})),n.d(t,"xc",(function(){return $t})),n.d(t,"yc",(function(){return jt})),n.d(t,"Dc",(function(){return Ct})),n.d(t,"Bc",(function(){return Et})),n.d(t,"Cc",(function(){return At})),n.d(t,"Ac",(function(){return Rt})),n.d(t,"zc",(function(){return Ft})),n.d(t,"Fc",(function(){return _t})),n.d(t,"Nc",(function(){return Dt})),n.d(t,"Wc",(function(){return Mt})),n.d(t,"Gc",(function(){return Pt})),n.d(t,"Mc",(function(){return Wt})),n.d(t,"Ec",(function(){return Lt})),n.d(t,"Hc",(function(){return Bt})),n.d(t,"Ic",(function(){return zt})),n.d(t,"Jc",(function(){return Vt})),n.d(t,"Kc",(function(){return Ut})),n.d(t,"Lc",(function(){return Gt})),n.d(t,"Pc",(function(){return Ht})),n.d(t,"Oc",(function(){return Kt})),n.d(t,"Rc",(function(){return qt})),n.d(t,"Sc",(function(){return Xt})),n.d(t,"Tc",(function(){return Yt})),n.d(t,"Uc",(function(){return Zt})),n.d(t,"Vc",(function(){return Qt})),n.d(t,"Xc",(function(){return Jt})),n.d(t,"Yc",(function(){return en})),n.d(t,"Zc",(function(){return tn})),n.d(t,"ad",(function(){return nn})),n.d(t,"bd",(function(){return rn})),n.d(t,"cd",(function(){return an})),n.d(t,"dd",(function(){return sn})),n.d(t,"ed",(function(){return on})),n.d(t,"fd",(function(){return cn})),n.d(t,"gd",(function(){return un})),n.d(t,"Qc",(function(){return dn})),n.d(t,"ib",(function(){return ln})),n.d(t,"tc",(function(){return pn})),n.d(t,"hd",(function(){return hn})),n.d(t,"kb",(function(){return fn})),n.d(t,"lb",(function(){return mn}));const r="Abs",o="Acos",c="Acosh",d="Add",l="AddN",h="All",f="Any",m="ArgMax",y="ArgMin",x="Asin",v="Asinh",O="Atan",w="Atanh",k="Atan2",I="AvgPool",N="AvgPoolGrad",S="AvgPool3D",T="AvgPool3DGrad",$="BatchMatMul",j="BatchToSpaceND",C="Bincount",E="BroadcastArgs",A="Cast",R="Ceil",F="ClipByValue",_="Complex",D="ComplexAbs",M="Concat",P="Conv2D",W="Conv2DBackpropFilter",L="Conv2DBackpropInput",B="Conv3D",z="Conv3DBackpropFilterV2",V="Conv3DBackpropInputV2",U="Cos",G="Cosh",H="Cumsum",K="CropAndResize",X="DenseBincount",Y="DepthToSpace",Z="DepthwiseConv2dNative",Q="DepthwiseConv2dNativeBackpropFilter",J="DepthwiseConv2dNativeBackpropInput",ee="Diag",te="Dilation2D",ne="Dilation2DBackpropInput",re="Dilation2DBackpropFilter",ae="RealDiv",se="Einsum",oe="Elu",ie="EluGrad",ce="Erf",ue="Equal",de="Exp",le="ExpandDims",pe="Expm1",he="FFT",fe="Fill",me="FlipLeftRight",be="Floor",ge="FloorDiv",ye="FusedBatchNorm",xe="GatherV2",ve="GatherNd",Oe="Greater",we="GreaterEqual",ke="Identity",Ie="IFFT",Ne="Imag",Se="IsFinite",Te="IsInf",$e="IsNan",je="LeakyRelu",Ce="Less",Ee="LessEqual",Ae="LinSpace",Re="Log",Fe="Log1p",_e="LogicalAnd",De="LogicalNot",Me="LogicalOr",Pe="LRN",We="LRNGrad",Le="Max",Be="Maximum",ze="MaxPool",Ve="MaxPoolGrad",Ue="MaxPool3D",Ge="MaxPool3DGrad",He="MaxPoolWithArgmax",Ke="Mean",qe="Min",Xe="Minimum",Ye="MirrorPad",Ze="Mod",Qe="Multinomial",Je="Multiply",et="Neg",tt="NotEqual",nt="NonMaxSuppressionV3",at="NonMaxSuppressionV4",st="NonMaxSuppressionV5",ot="OnesLike",it="OneHot",ct="Pack",ut="PadV2",lt="Pow",pt="Prelu",ht="Prod",ft="Range",mt="Real",bt="Reciprocal",gt="Relu",yt="Reshape",xt="ResizeNearestNeighbor",vt="ResizeNearestNeighborGrad",Ot="ResizeBilinear",wt="ResizeBilinearGrad",kt="Relu6",It="Reverse",Nt="Round",St="Rsqrt",Tt="ScatterNd",$t="Select",jt="Selu",Ct="Slice",Et="Sin",At="Sinh",Rt="Sign",Ft="Sigmoid",_t="Softplus",Dt="Sqrt",Mt="Sum",Pt="SpaceToBatchND",Wt="SplitV",Lt="Softmax",Bt="SparseFillEmptyRows",zt="SparseReshape",Vt="SparseSegmentMean",Ut="SparseSegmentSum",Gt="SparseToDense",Ht="SquaredDifference",Kt="Square",qt="StridedSlice",Xt="StringNGrams",Yt="StringSplit",Zt="StringToHashBucketFast",Qt="Sub",Jt="Tan",en="Tanh",tn="Tile",nn="TopK",rn="Transform",an="Transpose",sn="Unique",on="Unpack",cn="UnsortedSegmentSum",un="ZerosLike",dn="Step",ln="FromPixels",pn="RotateWithOffset",hn="_FusedMatMul",fn="FusedConv2D",mn="FusedDepthwiseConv2D"},function(e,t,n){"use strict";n.r(t),n.d(t,"shuffle",(function(){return o.M})),n.d(t,"shuffleCombo",(function(){return o.N})),n.d(t,"clamp",(function(){return o.i})),n.d(t,"nearestLargerEven",(function(){return o.H})),n.d(t,"swap",(function(){return o.S})),n.d(t,"sum",(function(){return o.R})),n.d(t,"randUniform",(function(){return o.J})),n.d(t,"distSquared",(function(){return o.l})),n.d(t,"assert",(function(){return o.b})),n.d(t,"assertShapesMatch",(function(){return o.e})),n.d(t,"assertNonNull",(function(){return o.d})),n.d(t,"flatten",(function(){return o.m})),n.d(t,"sizeFromShape",(function(){return o.O})),n.d(t,"isScalarShape",(function(){return o.y})),n.d(t,"arraysEqual",(function(){return o.a})),n.d(t,"isInt",(function(){return o.v})),n.d(t,"tanh",(function(){return o.T})),n.d(t,"sizeToSquarishShape",(function(){return o.P})),n.d(t,"createShuffledIndices",(function(){return o.k})),n.d(t,"rightPad",(function(){return o.L})),n.d(t,"repeatedTry",(function(){return o.K})),n.d(t,"inferFromImplicitShape",(function(){return o.s})),n.d(t,"parseAxisParam",(function(){return o.I})),n.d(t,"squeezeShape",(function(){return o.Q})),n.d(t,"getTypedArrayFromDType",(function(){return o.o})),n.d(t,"getArrayFromDType",(function(){return o.n})),n.d(t,"checkConversionForErrors",(function(){return o.h})),n.d(t,"isValidDtype",(function(){return o.B})),n.d(t,"hasEncodingLoss",(function(){return o.p})),n.d(t,"isTypedArray",(function(){return o.A})),n.d(t,"bytesPerElement",(function(){return o.g})),n.d(t,"bytesFromStringArray",(function(){return o.f})),n.d(t,"isString",(function(){return o.z})),n.d(t,"isBoolean",(function(){return o.t})),n.d(t,"isNumber",(function(){return o.w})),n.d(t,"inferDtype",(function(){return o.r})),n.d(t,"isFunction",(function(){return o.u})),n.d(t,"nearestDivisor",(function(){return o.G})),n.d(t,"computeStrides",(function(){return o.j})),n.d(t,"toNestedArray",(function(){return o.U})),n.d(t,"makeOnesTypedArray",(function(){return o.D})),n.d(t,"makeZerosTypedArray",(function(){return o.F})),n.d(t,"makeZerosNestedTypedArray",(function(){return o.E})),n.d(t,"assertNonNegativeIntegerDimensions",(function(){return o.c})),n.d(t,"locToIndex",(function(){return o.C})),n.d(t,"indexToLoc",(function(){return o.q})),n.d(t,"isPromise",(function(){return o.x})),n.d(t,"hexToLong",(function(){return l})),n.d(t,"fingerPrint64",(function(){return N})),n.d(t,"createScalarValue",(function(){return S})),n.d(t,"toTypedArray",(function(){return T})),n.d(t,"now",(function(){return $})),n.d(t,"fetch",(function(){return j})),n.d(t,"encodeString",(function(){return C})),n.d(t,"decodeString",(function(){return E}));var r=n(286),o=n(326),c=n(617);const d=n.n(c).a||c;function l(e){return d.fromString(e,!0,16)}const h=l("c3a5c85c97cb3127"),f=l("b492b66fbe98f273"),m=l("9ae16a3b2f90404f");function y(e){return e.xor(e.shru(47))}function x(s,e,t){const n=s.slice(e,e+t);return d.fromBytes(Array.from(n),!0,!0)}function v(s,e){return x(s,e,8)}function O(s,e){return x(s,e,4)}function w(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function k(u,e,t=l("9ddfea08eb382d69")){let a=u.xor(e).mul(t);a=a.xor(a.shru(47));let b=e.xor(a).mul(t);return b=b.xor(b.shru(47)),b=b.mul(t),b}function I(s,e,a,b){return function(e,t,n,r,a,b){a=a.add(e),b=w(b.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),b=b.add(w(a,44)),[a.add(r),b.add(o)]}(v(s,e),v(s,e+8),v(s,e+16),v(s,e+24),a,b)}function N(s,e=s.length){const t=d.fromNumber(81,!0);if(e<=32)return e<=16?function(s,e=s.length){if(e>=8){const t=m.add(2*e),a=v(s,0).add(m),b=v(s,e-8);return k(w(b,37).mul(t).add(a),w(a,25).add(b).mul(t),t)}if(e>=4){const t=m.add(2*e);return k(O(s,0).shl(3).add(e),O(s,e-4),t)}if(e>0){const t=s[0]+(s[e>>1]<<8),n=e+(s[e-1]<<2);return y(m.mul(t).xor(h.mul(n))).mul(m)}return m}(s,e):function(s,e=s.length){const t=m.add(2*e),a=v(s,0).mul(f),b=v(s,8),n=v(s,e-8).mul(t),r=v(s,e-16).mul(m);return k(w(a.add(b),43).add(w(n,30)).add(r),a.add(w(b.add(m),18)).add(n),t)}(s,e);if(e<=64)return function(s,e=s.length){const t=m.add(2*e),a=v(s,0).mul(m),b=v(s,8),n=v(s,e-8).mul(t),r=v(s,e-16).mul(m),o=w(a.add(b),43).add(w(n,30)).add(r),c=k(o,a.add(w(b.add(m),18)).add(n),t),d=v(s,16).mul(t),l=v(s,24),g=o.add(v(s,e-32)).mul(t),h=c.add(v(s,e-24)).mul(t);return k(w(d.add(l),43).add(w(g,30)).add(h),d.add(w(l.add(a),18)).add(g),t)}(s,e);let n=t,r=t.mul(f).add(113),o=y(r.mul(m).add(113)).mul(m),c=[d.UZERO,d.UZERO],l=[d.UZERO,d.UZERO];n=n.mul(m).add(v(s,0));let x=0;const N=64*(e-1>>6),S=N+(e-1&63)-63;do{n=w(n.add(r).add(c[0]).add(v(s,x+8)),37).mul(f),r=w(r.add(c[1]).add(v(s,x+48)),42).mul(f),n=n.xor(l[1]),r=r.add(c[0]).add(v(s,x+40)),o=w(o.add(l[0]),33).mul(f),c=I(s,x,c[1].mul(f),n.add(l[0])),l=I(s,x+32,o.add(l[1]),r.add(v(s,x+16))),[o,n]=[n,o],x+=64}while(x!==N);const T=f.add(o.and(255).shl(1));return x=S,l[0]=l[0].add(e-1&63),c[0]=c[0].add(l[0]),l[0]=l[0].add(c[0]),n=w(n.add(r).add(c[0]).add(v(s,x+8)),37).mul(T),r=w(r.add(c[1]).add(v(s,x+48)),42).mul(T),n=n.xor(l[1].mul(9)),r=r.add(c[0].mul(9).add(v(s,x+40))),o=w(o.add(l[0]),33).mul(T),c=I(s,x,c[1].mul(T),n.add(l[0])),l=I(s,x+32,o.add(l[1]),r.add(v(s,x+16))),[o,n]=[n,o],k(k(c[0],l[0],T).add(y(r).mul(h)).add(o),k(c[1],l[1],T).add(n),T)}function S(e,t){return"string"===t?C(e):T([e],t)}function T(a,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(a)&&(a=o.m(a)),Object(r.b)().getBool("DEBUG")&&o.h(a,e),function(a,e){return a instanceof Float32Array&&"float32"===e||a instanceof Int32Array&&"int32"===e||a instanceof Uint8Array&&"bool"===e}(a,e))return a;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(a);if("int32"===e)return new Int32Array(a);if("bool"===e){const e=new Uint8Array(a.length);for(let i=0;i<e.length;++i)0!==Math.round(a[i])&&(e[i]=1);return e}throw new Error(`Unknown data type ${e}`)}function $(){return Object(r.b)().platform.now()}function j(path,e){return Object(r.b)().platform.fetch(path,e)}function C(s,e="utf-8"){return e=e||"utf-8",Object(r.b)().platform.encode(s,e)}function E(e,t="utf-8"){return t=t||"utf-8",Object(r.b)().platform.decode(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.Wd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({reshape_:function(e,t){const n={x:Object(c.a)(e,"x","reshape","string_or_numeric")},d={shape:t};return r.a.runKernel(o.nc,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return d}));var r=n(274),o=n(280);function c(e,t,n){return({inputs:c,attrs:d,backend:l})=>{const{x:h}=c;if(Object(o.a)(h,e),"string"===h.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const f=l,m=f.data.get(h.dataId).values,y=r.Wd.sizeFromShape(h.shape),x=n||h.dtype,v=r.Wd.getArrayFromDType(x,y);for(let i=0;i<y;++i)v[i]=t(m[i],d);return f.makeTensorInfo(h.shape,x,v)}}function d(e,t,n){return({inputs:r,attrs:c,backend:d})=>{const{x:l}=r;if(Object(o.a)(l,e),"string"===l.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const h=d,f=h.data.get(l.dataId).values,m=n||l.dtype,y=t(f,m,c);return h.makeTensorInfo(l.shape,m,y)}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return d}));var r=n(294),o=n(308);n(326);function c(a,b){if(a.dtype===b.dtype)return[a,b];const e=Object(o.b)(a.dtype,b.dtype);return[a.cast(e),b.cast(e)]}function d(e){const t=[];return l(e,t,new Set),t}function l(e,t,n){if(null==e)return;if(e instanceof r.a)return void t.push(e);if(o=e,!Array.isArray(o)&&"object"!=typeof o)return;var o;const c=e;for(const e in c){const r=c[e];n.has(r)||(n.add(r),l(r,t,n))}}},function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return d})),n.d(t,"b",(function(){return l})),n.d(t,"g",(function(){return f})),n.d(t,"c",(function(){return m})),n.d(t,"a",(function(){return y}));var r=n(274);function o(e,t,n,o,d){const l=t.inputParams[e];if(l&&void 0!==l.inputIndexStart){const e=l.inputIndexStart,h=0===l.inputIndexEnd?void 0:void 0===l.inputIndexEnd?e+1:l.inputIndexEnd;if("tensor"===l.type)return c(t.inputNames[l.inputIndexStart],n,o,d);if("tensors"===l.type){return t.inputNames.slice(e,h).map((e=>c(e,n,o,d)))}const f=c(t.inputNames.slice(e)[0],n,o,d),data=f.dataSync();return"number"===l.type?data[0]:r.Wd.toNestedArray(f.shape,data)}const h=t.attrParams[e];return h&&h.value}function c(e,t,n,r){const[o,c]=f(e);if(null!=r){const e=r.getHashTableHandleByName(o);if(null!=e)return e}const d=n.currentContextIds.find((e=>!!t[h(o,e)]));return void 0!==d?t[h(o,d)][c]:void 0}function d(e,t,n){return t[h(e,n.currentContextId)]}function l(e,t){const[n,r,o]=f(e);return[h(n,t&&t.currentContextId),r,o]}function h(e,t){return t?`${e}-${t}`:e}function f(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function m(e,t,n){let r=o("pad",e,t,n);if("explicit"===r){r=o("explicitPaddings",e,t,n);const c=[[0,0],[0,0],[0,0],[0,0]];for(let i=0;i<4;i++)c[i][0]=r[2*i],c[i][1]=r[2*i+1];return c}return r}function y(e){return e.kept?e:Object(r.rd)(e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e){return(t,n,o,c,d)=>{const l=r.nd.assertAndGetBroadcastShape(t,n),h=l.length,f=r.Wd.computeStrides(l),m=r.Wd.sizeFromShape(l),y=r.Wd.getTypedArrayFromDType(d,m),x=t.length,v=n.length,O=r.Wd.computeStrides(t),w=r.Wd.computeStrides(n),k=r.nd.getBroadcastDims(t,l),I=r.nd.getBroadcastDims(n,l);if(k.length+I.length===0)for(let i=0;i<y.length;++i)y[i]=e(o[i%o.length],c[i%c.length]);else for(let i=0;i<y.length;++i){const t=r.Wd.indexToLoc(i,h,f),n=t.slice(-x);k.forEach((e=>n[e]=0));const d=r.Wd.locToIndex(n,x,O),l=t.slice(-v);I.forEach((e=>l[e]=0));const m=r.Wd.locToIndex(l,v,w);y[i]=e(o[d],c[m])}return[y,l]}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h})),n.d(t,"c",(function(){return m}));var r=n(326),o=n(327);const c="tfjsflags";class d{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=l,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&o.b(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];o.b(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Object(r.x)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(c in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function l(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((s,...e)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,e[0],e[1]),e.join("=")))),t}function h(){return f}let f=null;function m(e){f=e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var r=n(274),o=n(280),c=n(339),d=n(305);function l(e,t,n,l){return null==n?({inputs:n,backend:c})=>{const{a:a,b:b}=n,d=c;Object(o.a)([a,b],e);const h=d.data.get(a.dataId).values,f=d.data.get(b.dataId).values,m="string"===a.dtype?r.nd.fromUint8ToStringArray(h):h,y="string"===a.dtype?r.nd.fromUint8ToStringArray(f):f,x=l||a.dtype,[v,O]=t(a.shape,b.shape,m,y,x);return d.makeTensorInfo(O,x,v)}:({inputs:e,backend:r})=>{const{a:a,b:b}=e,o=r;if("complex64"===a.dtype||"complex64"===b.dtype){const e=Object(c.a)({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.real,l=t.complexTensorInfos.imag,h=o.data.get(r.dataId).values,f=o.data.get(l.dataId).values,m=Object(c.a)({inputs:{x:b},backend:o,attrs:{dtype:"complex64"}}),y=o.data.get(m.dataId),x=y.complexTensorInfos.real,v=y.complexTensorInfos.imag,O=o.data.get(x.dataId).values,w=o.data.get(v.dataId).values,[k,I,N]=n(a.shape,b.shape,h,f,O,w),S=o.makeTensorInfo(N,"float32",k),T=o.makeTensorInfo(N,"float32",I),$=Object(d.a)({inputs:{real:S,imag:T},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(m),o.disposeIntermediateTensorInfo(S),o.disposeIntermediateTensorInfo(T),$}{const e=o.data.get(a.dataId).values,n=o.data.get(b.dataId).values,r=l||a.dtype,[c,d]=t(a.shape,b.shape,e,n,r);return o.makeTensorInfo(d,r,c)}}}function h(e){return(t,n,o,c,d,l)=>{const h=r.nd.assertAndGetBroadcastShape(t,n),f=r.Wd.sizeFromShape(h),m=h.length,y=r.Wd.computeStrides(h),x=r.Wd.getTypedArrayFromDType("float32",f),v=r.Wd.getTypedArrayFromDType("float32",f),O=r.nd.getBroadcastDims(t,h),w=r.nd.getBroadcastDims(n,h),k=r.nd.mergeRealAndImagArrays(o,c),I=r.nd.mergeRealAndImagArrays(d,l),N=t.length,S=r.Wd.computeStrides(t),T=n.length,$=r.Wd.computeStrides(n);if(O.length+w.length===0)for(let i=0;i<x.length;i++){const t=i%k.length,n=i%I.length,r=e(k[2*t],k[2*t+1],I[2*n],I[2*n+1]);x[i]=r.real,v[i]=r.imag}else for(let i=0;i<x.length;i++){const t=r.Wd.indexToLoc(i,m,y),n=t.slice(-N);O.forEach((e=>n[e]=0));const o=r.Wd.locToIndex(n,N,S),c=t.slice(-T);w.forEach((e=>c[e]=0));const d=r.Wd.locToIndex(c,T,$),l=e(k[2*o],k[2*o+1],I[2*d],I[2*d+1]);x[i]=l.real,v[i]=l.imag}return[x,v,h]}}},function(e,t,n){"use strict";function r(e,t){const n=e.length,r=[];for(let i=0;i<n;i++){const o=n-1-i,a=e[o]||1;(t[t.length-1-i]||1)>1&&1===a&&r.unshift(o)}return r}function o(e,t){const n=[];for(let i=0;i<t.length;i++){const r=e[e.length-i-1],o=t.length-i-1,c=t[o];(null==r||1===r&&c>1)&&n.unshift(o)}return n}function c(e,t){const n=[],r=Math.max(e.length,t.length);for(let i=0;i<r;i++){let a=e[e.length-i-1];null==a&&(a=1);let b=t[t.length-i-1];if(null==b&&(b=1),1===a)n.unshift(b);else if(1===b)n.unshift(a);else{if(a!==b){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(a)}}return n}n.d(t,"b",(function(){return r})),n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return c}))},,function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({mul_:function(a,b){let e=Object(d.a)(a,"a","mul"),t=Object(d.a)(b,"b","mul");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.Ub,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({cast_:function(e,t){const n=Object(c.a)(e,"x","cast");if(!d.B(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const l={x:n},h={dtype:t};return r.a.runKernel(o.w,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return sub}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const sub=Object(l.a)({sub_:function(a,b){let e=Object(d.a)(a,"a","sub"),t=Object(d.a)(b,"b","sub");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.Vc,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(326),o=n(329);function c(e,t){if((Object(r.A)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Object(r.A)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(o.a)(e,[],[],t)}},function(e,t,n){"use strict";n.d(t,"b",(function(){return y})),n.d(t,"f",(function(){return w})),n.d(t,"e",(function(){return k})),n.d(t,"d",(function(){return I})),n.d(t,"a",(function(){return N})),n.d(t,"c",(function(){return S}));var r=n(366),o=n(326);function c(e,t,n,r){const c=Object(o.j)(t),l=function(e,t,n,r){const c=Object(o.O)(t),l=r[r.length-1],h=new Array(l).fill(0),m=t.length,y="complex64"===n?f(e):e;if(m>1)for(let e=0;e<c/l;e++){const t=e*l;for(let e=0;e<l;e++)h[e]=Math.max(h[e],d(y[t+e],0,n).length)}return h}(e,t,n,c),m=t.length,y=h(e,t,n,c,l),x=["Tensor"];return r&&(x.push(`  dtype: ${n}`),x.push(`  rank: ${m}`),x.push(`  shape: [${t}]`),x.push("  values:")),x.push(y.map((e=>"    "+e)).join("\n")),x.join("\n")}function d(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Object(o.z)(e)?`'${e}'`:"bool"===n?l(e):parseFloat(e.toFixed(7)).toString(),Object(o.L)(r,t)}function l(e){return 0===e?"false":"true"}function h(e,t,n,r,o,c=!0){const m="complex64"===n?2:1,y=t[0],x=t.length;if(0===x){if("complex64"===n){return[d(f(e)[0],0,n)]}return"bool"===n?[l(e[0])]:[e[0].toString()]}if(1===x){if(y>20){const t=3*m;let r=Array.from(e.slice(0,t)),c=Array.from(e.slice((y-3)*m,y*m));return"complex64"===n&&(r=f(r),c=f(c)),["["+r.map(((e,i)=>d(e,o[i],n))).join(", ")+", ..., "+c.map(((e,i)=>d(e,o[y-3+i],n))).join(", ")+"]"]}return["["+("complex64"===n?f(e):Array.from(e)).map(((e,i)=>d(e,o[i],n))).join(", ")+"]"]}const v=t.slice(1),O=r.slice(1),w=r[0]*m,k=[];if(y>20){for(let i=0;i<3;i++){const t=i*w,r=t+w;k.push(...h(e.slice(t,r),v,n,O,o,!1))}k.push("...");for(let i=y-3;i<y;i++){const t=i*w,r=t+w;k.push(...h(e.slice(t,r),v,n,O,o,i===y-1))}}else for(let i=0;i<y;i++){const t=i*w,r=t+w;k.push(...h(e.slice(t,r),v,n,O,o,i===y-1))}const I=2===x?",":"";k[0]="["+k[0]+I;for(let i=1;i<k.length-1;i++)k[i]=" "+k[i]+I;let N=",\n";for(let i=2;i<x;i++)N+="\n";return k[k.length-1]=" "+k[k.length-1]+"]"+(c?"":N),k}function f(e){const t=[];for(let i=0;i<e.length;i+=2)t.push([e[i],e[i+1]]);return t}var m=n(279);class y{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=o.O(e),null!=n){const e=n.length;o.b(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||o.n(t,this.size),this.strides=Object(o.j)(e)}set(e,...t){0===t.length&&(t=[0]),o.b(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let i=0;for(const t of e){if(t<0||t>=this.shape[i]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}i++}let t=e[e.length-1];for(let i=0;i<e.length-1;++i)t+=this.strides[i]*e[i];return this.values[t]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let i=0;i<e.length-1;++i)t+=this.strides[i]*e[i];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let i=0;i<t.length-1;++i)t[i]=Math.floor(e/this.strides[i]),e-=t[i]*this.strides[i];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return x().makeTensor(this.values,this.shape,this.dtype)}}let x=null,v=null,O=null;function w(e){x=e}function k(e){v=e}function I(e){O=e}class N{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=o.O(e),this.strides=Object(o.j)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return v.buffer(this.shape,this.dtype,e)}bufferSync(){return v.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Object(o.U)(this.shape,e,"complex64"===this.dtype)}arraySync(){return Object(o.U)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const data=x().read(this.dataId);if("string"===this.dtype){const e=await data;try{return e.map((b=>m.decodeString(b)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return data}dataSync(){this.throwIfDisposed();const data=x().readSync(this.dataId);if("string"===this.dtype)try{return data.map((b=>m.decodeString(b)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return data}async bytes(){this.throwIfDisposed();const data=await x().read(this.dataId);return"string"===this.dtype?data:new Uint8Array(data.buffer)}dispose(){this.isDisposed||(x().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return v.print(this,e)}clone(){return this.throwIfDisposed(),v.clone(this)}toString(e=!1){return c(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),v.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),x().makeVariable(this,e,t,n)}}Object.defineProperty(N,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Object(r.a)("Tensor",(()=>N));class S extends N{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!o.a(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);x().disposeTensor(this),this.dataId=e.dataId,x().incRef(this,null)}dispose(){x().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(S,Symbol.hasInstance,{value:e=>e instanceof N&&null!=e.assign&&e.assign instanceof Function})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(277);n(294),n(276),n(326);function o(e){return r.a.customGrad(e)}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return l}));var r=n(274),o=n(280),c=n(362);function d(e){const{inputs:t,attrs:n,backend:r}=e,{x:d}=t,{perm:l}=n;Object(o.a)(d,"transpose");const h=d.shape.length,f=new Array(h);for(let i=0;i<f.length;i++)f[i]=d.shape[l[i]];const m=r.data.get(d.dataId).values,y=Object(c.a)(m,d.shape,d.dtype,l,f);return{dataId:r.write(y,f,d.dtype),shape:f,dtype:d.dtype}}const l={kernelName:r.gd,backendName:"cpu",kernelFunc:d}},function(e,t,n){"use strict";(function(e){n.d(t,"f",(function(){return l})),n.d(t,"e",(function(){return h})),n.d(t,"a",(function(){return x})),n.d(t,"b",(function(){return v})),n.d(t,"d",(function(){return O})),n.d(t,"c",(function(){return w})),n.d(t,"i",(function(){return k})),n.d(t,"g",(function(){return I})),n.d(t,"h",(function(){return N}));var r=n(309),o=n(345),c=n(326),d=n(457);async function l(e,t){const n=[],r=[],o=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let i=0;i<o.length;++i){const c=o[i],d=Array.isArray(e)?e[i].tensor:e[c];if("float32"!==d.dtype&&"int32"!==d.dtype&&"bool"!==d.dtype&&"string"!==d.dtype&&"complex64"!==d.dtype)throw new Error(`Unsupported dtype in weight '${c}': ${d.dtype}`);const l={name:c,shape:d.shape,dtype:d.dtype};if("string"===d.dtype){const e=new Promise((async e=>{const t=await d.bytes(),n=t.reduce(((p,e)=>p+e.length),0)+4*t.length,r=new Uint8Array(n);let o=0;for(let i=0;i<t.length;i++){const e=t[i],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,o),o+=4,r.set(e,o),o+=e.length}e(r)}));r.push(e)}else r.push(d.data());null!=t&&(l.group=t),n.push(l)}return{data:f(await Promise.all(r)),specs:n}}function h(e,t){const n={};let l,h=0;for(const f of t){const t=f.name,m=f.dtype,y=f.shape,x=Object(c.O)(y);let v;if("quantization"in f){const n=f.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${f.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${f.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==m)throw new Error(`Weight ${f.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${m}.`)}const r=d.a[n.dtype],o=e.slice(h,h+x*r),c="uint8"===n.dtype?new Uint8Array(o):new Uint16Array(o);if("float32"===m)if("uint8"===n.dtype||"uint16"===n.dtype){v=new Float32Array(c.length);for(let i=0;i<c.length;i++){const e=c[i];v[i]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===l&&(l=S()),v=l(c)}else{if("int32"!==m)throw new Error(`Unsupported dtype in weight '${t}': ${m}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);v=new Int32Array(c.length);for(let i=0;i<c.length;i++){const e=c[i];v[i]=Math.round(e*n.scale+n.min)}}h+=x*r}else if("string"===m){const t=Object(c.O)(f.shape);v=[];for(let i=0;i<t;i++){const t=new Uint32Array(e.slice(h,h+4))[0];h+=4;const n=new Uint8Array(e.slice(h,h+t));v.push(n),h+=t}}else{const c=d.a[m],l=e.slice(h,h+x*c);if("float32"===m)v=new Float32Array(l);else if("int32"===m)v=new Int32Array(l);else if("bool"===m)v=new Uint8Array(l);else{if("complex64"!==m)throw new Error(`Unsupported dtype in weight '${t}': ${m}`);{v=new Float32Array(l);const e=new Float32Array(v.length/2),image=new Float32Array(v.length/2);for(let i=0;i<e.length;i++)e[i]=v[2*i],image[i]=v[2*i+1];const c=Object(o.a)(e,y,"float32"),d=Object(o.a)(image,y,"float32");n[t]=Object(r.a)(c,d),c.dispose(),d.dispose()}}h+=x*c}"complex64"!==m&&(n[t]=Object(o.a)(v,y,m))}return n}function f(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let o=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),o),o+=e.byteLength})),r.buffer}const m=void 0!==e&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function y(t){return m?e.byteLength(t):new Blob([t]).size}function x(t){if(m)return e.from(t).toString("base64");const n=new Uint8Array(t);let s="";for(let i=0,e=n.length;i<e;i++)s+=String.fromCharCode(n[i]);return btoa(s)}function v(t){if(m){const n=e.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const s=atob(t),n=new Uint8Array(s.length);for(let i=0;i<s.length;++i)n.set([s.charCodeAt(i)],i);return n.buffer}function O(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function w(path){for(path=path.trim();path.endsWith("/");)path=path.slice(0,path.length-1);const e=path.split("/");return e[e.length-1]}function k(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function I(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,o]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=o}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function N(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:y(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:y(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function S(){const e=function(){const e=i=>{let e=i<<13,t=0;for(;0==(8388608&e);)t-=8388608,e<<=1;return e&=-8388609,t+=947912704,e|t},t=new Uint32Array(2048);t[0]=0;for(let i=1;i<1024;i++)t[i]=e(i);for(let i=1024;i<2048;i++)t[i]=939524096+(i-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let i=1;i<31;i++)e[i]=i<<23;for(let i=33;i<63;i++)e[i]=2147483648+(i-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let i=0;i<64;i++)e[i]=1024;return e[0]=e[32]=0,e}();return r=>{const o=new ArrayBuffer(4*r.length),c=new Uint32Array(o);for(let o=0;o<r.length;o++){const d=r[o],l=e[n[d>>10]+(1023&d)]+t[d>>10];c[o]=l}return new Float32Array(o)}}}).call(this,n(456).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({add_:function(a,b){let e=Object(d.a)(a,"a","add"),t=Object(d.a)(b,"b","add");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.d,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(291),l=n(275);const h=Object(l.a)({sum_:function(e,t=null,n=!1){let l=Object(c.a)(e,"x","sum");"bool"===l.dtype&&(l=Object(d.a)(l,"int32"));const h={x:l},f={axis:t,keepDims:n};return r.a.runKernel(o.Wc,h,f)}})},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},function(e,t,n){"use strict";function r(e,t,n,r,o="NHWC",c){return d(e,[...t,e[3]],n,c,r,null,null,w(o))}function o(e,t,n,r,o,c,l="channelsLast"){const[h,m]=f(t);let y;if("channelsLast"===l)y=[h,m,e[3],e[3]];else{if("channelsFirst"!==l)throw new Error(`Unknown dataFormat ${l}`);y=[h,m,e[1],e[1]]}return d(e,y,n,r,o,c,!1,l)}function c(e,t,n,r,o,c,d="NDHWC"){const[h,f,y]=m(t);let x,v;if("NDHWC"===d)v="channelsLast",x=[h,f,y,e[4],e[4]];else{if("NCDHW"!==d)throw new Error(`Unknown dataFormat ${d}`);v="channelsFirst",x=[h,f,y,e[1],e[1]]}return l(e,x,n,r,o,!1,v,c)}function d(e,t,n,r,o,c,d=!1,l="channelsLast"){let[m,v,O,w]=[-1,-1,-1,-1];if("channelsLast"===l)[m,v,O,w]=e;else{if("channelsFirst"!==l)throw new Error(`Unknown dataFormat ${l}`);[m,w,v,O]=e}const[k,I,,N]=t,[S,T]=f(n),[$,j]=f(r),C=y(k,$),E=y(I,j),{padInfo:A,outHeight:R,outWidth:F}=function(e,t,n,r,o,c,d,l,f){let m,y,v;if("number"==typeof e){m={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const o=function(e,t,n,r,o){null==r&&(r=h(e,t,n));const c=e[0],d=e[1],l=x((c-t+2*r)/n+1,o),f=x((d-t+2*r)/n+1,o);return[l,f]}([t,n],c,r,e,l);y=o[0],v=o[1]}else if("same"===e){y=Math.ceil(t/r),v=Math.ceil(n/o);const e=Math.max(0,(y-1)*r+c-t),l=Math.max(0,(v-1)*o+d-n),h=Math.floor(e/2),f=e-h,x=Math.floor(l/2);m={top:h,bottom:f,left:x,right:l-x,type:"SAME"}}else if("valid"===e)m={top:0,bottom:0,left:0,right:0,type:"VALID"},y=Math.ceil((t-c+1)/r),v=Math.ceil((n-d+1)/o);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===f?e[1][0]:e[2][0],O="channelsLast"===f?e[1][1]:e[2][1],w="channelsLast"===f?e[2][0]:e[3][0],k="channelsLast"===f?e[2][1]:e[3][1];m={top:h,bottom:O,left:w,right:k,type:0===h&&0===O&&0===w&&0===k?"VALID":"EXPLICIT"},y=x((t-c+h+O)/r+1,l),v=x((n-d+w+k)/o+1,l)}}return{padInfo:m,outHeight:y,outWidth:v}}(o,v,O,S,T,C,E,c,l),_=d?N*w:N;let D;return"channelsFirst"===l?D=[m,_,R,F]:"channelsLast"===l&&(D=[m,R,F,_]),{batchSize:m,dataFormat:l,inHeight:v,inWidth:O,inChannels:w,outHeight:R,outWidth:F,outChannels:_,padInfo:A,strideHeight:S,strideWidth:T,filterHeight:k,filterWidth:I,effectiveFilterHeight:C,effectiveFilterWidth:E,dilationHeight:$,dilationWidth:j,inShape:e,outShape:D,filterShape:t}}function l(e,t,n,r,o,c=!1,d="channelsLast",l){let[f,v,O,w,k]=[-1,-1,-1,-1,-1];if("channelsLast"===d)[f,v,O,w,k]=e;else{if("channelsFirst"!==d)throw new Error(`Unknown dataFormat ${d}`);[f,k,v,O,w]=e}const[I,N,S,,T]=t,[$,j,C]=m(n),[E,A,R]=m(r),F=y(I,E),_=y(N,A),D=y(S,R),{padInfo:M,outDepth:P,outHeight:W,outWidth:L}=function(e,t,n,r,o,c,d,l,f,m,y){let v,O,w,k;if("number"==typeof e){v={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const c=function(e,t,n,r,o,c){null==o&&(o=h(e,t,r));const d=e[0],l=e[1],f=e[2],m=x((d-t+2*o)/r+1,c),y=x((l-t+2*o)/r+1,c),v=x((f-t+2*o)/r+1,c);return[m,y,v,n]}([t,n,r,1],l,1,o,e,y);O=c[0],w=c[1],k=c[2]}else if("same"===e){O=Math.ceil(t/o),w=Math.ceil(n/c),k=Math.ceil(r/d);const e=(O-1)*o+l-t,h=(w-1)*c+f-n,y=(k-1)*d+m-r,x=Math.floor(e/2),I=e-x,N=Math.floor(h/2),S=h-N,T=Math.floor(y/2);v={top:N,bottom:S,left:T,right:y-T,front:x,back:I,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);v={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},O=Math.ceil((t-l+1)/o),w=Math.ceil((n-f+1)/c),k=Math.ceil((r-m+1)/d)}return{padInfo:v,outDepth:O,outHeight:w,outWidth:k}}(o,v,O,w,$,j,C,F,_,D,l),B=c?T*k:T;let z;return"channelsFirst"===d?z=[f,B,P,W,L]:"channelsLast"===d&&(z=[f,P,W,L,B]),{batchSize:f,dataFormat:d,inDepth:v,inHeight:O,inWidth:w,inChannels:k,outDepth:P,outHeight:W,outWidth:L,outChannels:B,padInfo:M,strideDepth:$,strideHeight:j,strideWidth:C,filterDepth:I,filterHeight:N,filterWidth:S,effectiveFilterDepth:F,effectiveFilterHeight:_,effectiveFilterWidth:D,dilationDepth:E,dilationHeight:A,dilationWidth:R,inShape:e,outShape:z,filterShape:t}}function h(e,t,n,r=1){const o=y(t,r);return Math.floor((e[0]*(n-1)-n+o)/2)}function f(param){return"number"==typeof param?[param,param,param]:2===param.length?[param[0],param[1],1]:param}function m(param){return"number"==typeof param?[param,param,param]:param}function y(e,t){return t<=1?e:e+(e-1)*(t-1)}function x(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function v(param){const[e,t,n]=f(param);return 1===e&&1===t&&1===n}function O(e,t){return v(e)||v(t)}function w(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}n.d(t,"d",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"f",(function(){return c})),n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return h})),n.d(t,"i",(function(){return v})),n.d(t,"h",(function(){return O})),n.d(t,"g",(function(){return w}))},function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));const o={kernelName:n(274).sb,backendName:"cpu",kernelFunc:r}},function(e,t,n){"use strict";n.d(t,"a",(function(){return div}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(369),h=n(275);const div=Object(h.a)({div_:function(a,b){let e=Object(d.a)(a,"a","div"),t=Object(d.a)(b,"b","div");if([e,t]=Object(c.b)(e,t),"int32"===e.dtype&&"int32"===t.dtype)return Object(l.a)(e,t);const n={a:e,b:t};return r.a.runKernel(o.jc,n,{})}})},function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{real:r,imag:o}=t,c=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,l=n.makeTensorInfo(r.shape,"complex64");return n.data.get(l.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",c),imag:n.makeTensorInfo(o.shape,"float32",d)},l}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));const o={kernelName:n(274).z,backendName:"cpu",kernelFunc:r}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e){return(t,n,o)=>{const c=r.Wd.getTypedArrayFromDType(n,t.length);for(let i=0;i<t.length;++i)c[i]=e(t[i],o);return c}}},function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return l}));var r=n(274),o=n(280);function c(e,t,n,o,c){const d=r.Ld.isSliceContinous(o,t,n),l=r.Wd.sizeFromShape(n),h=r.Wd.computeStrides(o);if(d){const n=r.Ld.computeFlatOffset(t,h);return"string"===c?e.slice(n,n+l):e.subarray(n,n+l)}const f="string"===c?r.nd.fromUint8ToStringArray(e):e,m=Object(r.pd)(o,c,f),y=Object(r.pd)(n,c);for(let i=0;i<y.size;++i){const e=y.indexToLoc(i),n=e.map(((e,n)=>e+t[n]));y.set(m.get(...n),...e)}return"string"===c?r.nd.fromStringArrayToUint8(y.values):y.values}function d(e){const{inputs:t,backend:n,attrs:d}=e,{x:l}=t,{begin:h,size:f}=d;Object(o.a)(l,"slice");const[m,y]=r.Ld.parseSliceParams(l,h,f);r.Ld.assertParamsValid(l,m,y);const x=c(n.data.get(l.dataId).values,m,y,l.shape,l.dtype);return n.makeTensorInfo(y,l.dtype,x)}const l={kernelName:r.Fc,backendName:"cpu",kernelFunc:d}},function(e,t,n){"use strict";var r,o,c,d,l;n.d(t,"b",(function(){return f})),n.d(t,"a",(function(){return m})),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(c||(c={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(d||(d={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(l||(l={}));const h={float32:d,int32:o,bool:c,complex64:l};function f(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return h[e][t]}function m(e){return f(e,"int32")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({complex_:function(e,t){const n=Object(c.a)(e,"real","complex"),l=Object(c.a)(t,"imag","complex");d.e(n.shape,l.shape,`real and imag shapes, ${n.shape} and ${l.shape}, must match in call to tf.complex().`);const h={real:n,imag:l};return r.a.runKernel(o.z,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(294),o=n(326);function c(e,t="float32",n){return t=t||"float32",o.c(e),new r.b(e,t,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(318),h=n(275);const f=Object(h.a)({concat_:function(e,t=0){Object(d.b)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Object(c.b)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Object(l.a)(n[0]);const h=n,f={axis:t};return r.a.runKernel(o.B,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({slice_:function(e,t,n){const d=Object(c.a)(e,"x","slice","string_or_numeric");if(0===d.rank)throw new Error("Slicing scalar is not possible");const l={x:d},h={begin:t,size:n};return r.a.runKernel(o.Dc,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(276),o=n(326),c=n(329);function d(e,t){Object(o.d)(e);const n=Object(r.c)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(c.a)(e,null,n,t)}},function(e,t,n){"use strict";n.d(t,"c",(function(){return O})),n.d(t,"b",(function(){return w})),n.d(t,"a",(function(){return k})),n.d(t,"d",(function(){return I}));var r=n(288),o=n(392),c=n(395),d=n(290),l=n(394),h=n(335),f=n(393),m=n(281),y=n(371),x=n(391),v=n(300);function O(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Object(d.a)(e,Object(x.a)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function w(e,t){let n=t;const o=r.c(e.shape,t.shape);return o.length>0&&(n=Object(v.a)(n,o)),Object(m.a)(n,e.shape)}function k(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Object(h.a)(e);if("elu"===t)return Object(o.a)(e);if("relu6"===t)return Object(f.a)(e);if("prelu"===t)return Object(l.a)(e,n);if("leakyrelu"===t)return Object(c.a)(e,r);if("sigmoid"===t)return Object(y.a)(e);throw new Error(`Unknown fused activation ${t}.`)}const I=(e,t)=>!(e>0)||"linear"===t},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return f}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a+b)),l=Object(c.b)(((e,t,n,r)=>({real:e+n,imag:t+r}))),h=Object(c.a)(r.d,d,l),f={kernelName:r.d,backendName:"cpu",kernelFunc:h}},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return f}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((e,t)=>e*t)),l=Object(c.b)(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),h=Object(c.a)(r.Wb,d,l),f={kernelName:r.Wb,backendName:"cpu",kernelFunc:h}},function(e,t,n){"use strict";function r(e,element,t){const n=function(e,t,n){return function(e,t,n){let r=0,o=e.length,c=0,d=!1;for(;r<o;){c=r+(o-r>>>1);const l=n(t,e[c]);l>0?r=c+1:(o=c,d=!l)}return d?r:-r-1}(e,t,n||o)}(e,element,t),r=n<0?-(n+1):n;e.splice(r,0,element)}function o(a,b){return a>b?1:a<b?-1:0}function c(e,t,n,r,o){return h(e,t,n,r,o,0)}function d(e,t,n,r,o,c){return h(e,t,n,r,o,0,!1,c,!0)}function l(e,t,n,r,o,c){return h(e,t,n,r,o,c,!0)}function h(e,t,n,o,c,d,l=!1,h=!1,x=!1){const v=[];for(let i=0;i<t.length;i++)t[i]>c&&v.push({score:t[i],boxIndex:i,suppressBeginIndex:0});v.sort(y);const O=d>0?-.5/d:0,w=[],k=[];for(;w.length<n&&v.length>0;){const t=v.pop(),{score:n,boxIndex:d,suppressBeginIndex:l}=t;if(n<c)break;let h=!1;for(let n=w.length-1;n>=l;--n){const r=f(e,d,w[n]);if(r>=o){h=!0;break}if(t.score=t.score*m(o,O,r),t.score<=c)break}t.suppressBeginIndex=w.length,h||(t.score===n?(w.push(d),k.push(t.score)):t.score>c&&r(v,t,y))}const I=w.length,N=n-I;h&&N>0&&(w.push(...new Array(N).fill(0)),k.push(...new Array(N).fill(0)));const S={selectedIndices:w};return l&&(S.selectedScores=k),x&&(S.validOutputs=I),S}function f(e,i,t){const n=e.subarray(4*i,4*i+4),r=e.subarray(4*t,4*t+4),o=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),d=Math.max(n[0],n[2]),l=Math.max(n[1],n[3]),h=Math.min(r[0],r[2]),f=Math.min(r[1],r[3]),m=Math.max(r[0],r[2]),y=Math.max(r[1],r[3]),x=(d-o)*(l-c),v=(m-h)*(y-f);if(x<=0||v<=0)return 0;const O=Math.max(o,h),w=Math.max(c,f),k=Math.min(d,m),I=Math.min(l,y),N=Math.max(k-O,0)*Math.max(I-w,0);return N/(x+v-N)}function m(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function y(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return l}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({clone_:function(e){const t={x:Object(c.a)(e,"x","clone","string_or_numeric")};return r.a.runKernel(o.rb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(377),l=n(288),h=n(275);const f=Object(h.a)({where_:function(e,a,b){const t=Object(c.a)(a,"a","where"),n=Object(c.a)(b,"b","where"),h=Object(c.a)(e,"condition","where","bool"),f=Object(l.a)(Object(l.a)(h.shape,t.shape),n.shape),m={condition:Object(d.a)(h,f),t:Object(d.a)(t,f),e:Object(d.a)(n,f)};return r.a.runKernel(o.xc,m)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({abs_:function(e){const t=Object(c.a)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.a.runKernel(o.A,e)}{const e={x:t};return r.a.runKernel(o.a,e)}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({neg_:function(e){const t={x:Object(c.a)(e,"x","neg")};return r.a.runKernel(o.Vb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({exp_:function(e){const t={x:Object(c.a)(e,"x","exp")};return r.a.runKernel(o.ab,t)}})},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";function r(e){const{inputs:t,backend:n}=e,{input:input}=t,r=n.data.get(input.dataId).complexTensorInfos.real,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));const o={kernelName:n(274).kc,backendName:"cpu",kernelFunc:r}},,function(e,t,n){"use strict";function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,l(e,t,n)}function o(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,l(e,n,r),l(t,n,r)}function c(e,t,n){return Math.max(e,Math.min(t,n))}function d(e){return e%2==0?e:e+1}function l(object,e,t){const n=object[e];object[e]=object[t],object[t]=n}function h(e){let t=0;for(let i=0;i<e.length;i++)t+=e[i];return t}function f(a,b){const e=Math.random();return b*e+(1-e)*a}function m(a,b){let e=0;for(let i=0;i<a.length;i++){const t=Number(a[i])-Number(b[i]);e+=t*t}return e}function y(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function x(e,t,n=""){y(I(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function v(a){y(null!=a,(()=>"The input to the tensor constructor must be a non-null value."))}function O(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||W(e)&&!n)for(let i=0;i<e.length;++i)O(e[i],t,n);else t.push(e);return t}function w(e){if(0===e.length)return 1;let t=e[0];for(let i=1;i<e.length;i++)t*=e[i];return t}function k(e){return 0===e.length}function I(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0}function N(a){return a%1==0}function S(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function T(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function $(e){const t=new Uint32Array(e);for(let i=0;i<e;++i)t[i]=i;return r(t),t}function j(a,e){return e<=a.length?a:a+" ".repeat(e-a.length)}function C(e,t=(e=>0),n){return new Promise(((r,o)=>{let c=0;const d=()=>{if(e())return void r();c++;const l=t(c);null!=n&&c>=n?o():setTimeout(d,l)};d()}))}function E(e,t){let n=1,r=-1;for(let i=0;i<e.length;++i)if(e[i]>=0)n*=e[i];else if(-1===e[i]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${i}`);r=i}else if(e[i]<0)throw Error(`Shapes can not be < 0. Found ${e[i]} at dim ${i}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const o=e.slice();return o[r]=t/n,o}function A(e,t){const n=t.length;return y((e=null==e?t.map(((s,i)=>i)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),y(e.every((e=>N(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((a=>a<0?n+a:a))}function R(e,t){const n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,c=null==t||o?null:A(t,e).sort();let d=0;for(let i=0;i<e.length;++i){if(null!=c){if(c[d]===i&&1!==e[i])throw new Error(`Can't squeeze axis ${i} since its dim '${e[i]}' is not 1`);(null==c[d]||c[d]>i)&&1===e[i]&&(n.push(e[i]),r.push(i)),c[d]<=i&&d++}1!==e[i]&&(n.push(e[i]),r.push(i))}return{newShape:n,keptDims:r}}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function _(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function D(e,t){for(let i=0;i<e.length;i++){const n=e[i];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${t} being uploaded contains ${n}.`)}}function M(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function P(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function W(a){return a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array}function L(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function B(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function z(e){return"string"==typeof e||e instanceof String}function V(e){return"boolean"==typeof e}function U(e){return"number"==typeof e}function G(e){return Array.isArray(e)?G(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":U(e)?"float32":z(e)?"string":V(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let i=t;i<e;++i)if(e%i==0)return i;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let i=t-3;i>=0;--i)n[i]=n[i+1]*e[i+1];return n}function Y(e,t,a,n=!1){const r=new Array;if(1===t.length){const o=t[0]*(n?2:1);for(let i=0;i<o;i++)r[i]=a[e+i]}else{const o=t[0],c=t.slice(1),d=c.reduce(((e,t)=>e*t))*(n?2:1);for(let i=0;i<o;i++)r[i]=Y(e+i*d,c,a,n)}return r}function Z(e,a,t=!1){if(0===e.length)return a[0];const n=e.reduce(((e,t)=>e*t))*(t?2:1);if(0===n)return[];if(n!==a.length)throw new Error(`[${e}] does not match the input size ${a.length}${t?" for a complex tensor":""}.`);return Y(0,e,a,t)}function Q(e,t){const n=J(e,t);for(let i=0;i<n.length;i++)n[i]=1;return n}function J(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{y(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let i=0;i<e.length-1;++i)r+=n[i]*e[i];return r}function re(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let i=0;i<r.length-1;++i)r[i]=Math.floor(e/n[i]),e-=r[i]*n[i];return r[r.length-1]=e,r}function ae(object){return object&&object.then&&"function"==typeof object.then}n.d(t,"M",(function(){return r})),n.d(t,"N",(function(){return o})),n.d(t,"i",(function(){return c})),n.d(t,"H",(function(){return d})),n.d(t,"S",(function(){return l})),n.d(t,"R",(function(){return h})),n.d(t,"J",(function(){return f})),n.d(t,"l",(function(){return m})),n.d(t,"b",(function(){return y})),n.d(t,"e",(function(){return x})),n.d(t,"d",(function(){return v})),n.d(t,"m",(function(){return O})),n.d(t,"O",(function(){return w})),n.d(t,"y",(function(){return k})),n.d(t,"a",(function(){return I})),n.d(t,"v",(function(){return N})),n.d(t,"T",(function(){return S})),n.d(t,"P",(function(){return T})),n.d(t,"k",(function(){return $})),n.d(t,"L",(function(){return j})),n.d(t,"K",(function(){return C})),n.d(t,"s",(function(){return E})),n.d(t,"I",(function(){return A})),n.d(t,"Q",(function(){return R})),n.d(t,"o",(function(){return F})),n.d(t,"n",(function(){return _})),n.d(t,"h",(function(){return D})),n.d(t,"B",(function(){return M})),n.d(t,"p",(function(){return P})),n.d(t,"A",(function(){return W})),n.d(t,"g",(function(){return L})),n.d(t,"f",(function(){return B})),n.d(t,"z",(function(){return z})),n.d(t,"t",(function(){return V})),n.d(t,"w",(function(){return U})),n.d(t,"r",(function(){return G})),n.d(t,"u",(function(){return H})),n.d(t,"G",(function(){return K})),n.d(t,"j",(function(){return X})),n.d(t,"U",(function(){return Z})),n.d(t,"D",(function(){return Q})),n.d(t,"F",(function(){return J})),n.d(t,"E",(function(){return ee})),n.d(t,"c",(function(){return te})),n.d(t,"C",(function(){return ne})),n.d(t,"q",(function(){return re})),n.d(t,"x",(function(){return ae}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return c}));var r=n(286);function o(...e){Object(r.b)().getBool("IS_TEST")||Object(r.b)().getBool("PROD")||console.warn(...e)}function c(...e){Object(r.b)().getBool("IS_TEST")||Object(r.b)().getBool("PROD")||console.log(...e)}},function(e,t,n){"use strict";(function(e){n(277);var t=n(367),r=n(286);const o=Object(r.b)();o.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),o.registerFlag("IS_BROWSER",(()=>t.isBrowser())),o.registerFlag("IS_NODE",(()=>void 0!==e&&void 0!==e.versions&&void 0!==e.versions.node)),o.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),o.registerFlag("PROD",(()=>!1)),o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>o.getBool("DEBUG"))),o.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),o.registerFlag("IS_TEST",(()=>!1)),o.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),o.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1))}).call(this,n(144))},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(277),o=n(326),c=n(279);function d(e,t,n,d){if(null==d&&(d=Object(o.r)(e)),"complex64"===d)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(o.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Object(o.c)(t);const e=Object(o.O)(t),r=Object(o.O)(n);Object(o.b)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let i=0;i<n.length;++i){const e=n[i],r=i!==n.length-1||e!==Object(o.O)(t.slice(i));Object(o.b)(n[i]===t[i]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Object(o.A)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==d?Object(c.toTypedArray)(e,d):Object(o.m)(e,[],!0),r.a.makeTensor(e,t,d)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({stack_:function(e,t=0){const n=Object(c.b)(e,"tensors","stack","string_or_numeric");d.b(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&d.b(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const l=n,h={axis:t};return r.a.runKernel(o.cc,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(277),o=n(326),c=n(309);function d(e,t="float32"){if("complex64"===t){const t=d(e,"float32"),n=d(e,"float32");return Object(c.a)(t,n)}const n=Object(o.F)(Object(o.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({split_:function(e,t,n=0){const d={x:Object(c.a)(e,"x","split")},l={numOrSizeSplits:t,axis:n};return r.a.runKernel(o.Mc,d,l)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return d})),n.d(t,"e",(function(){return l})),n.d(t,"a",(function(){return h})),n.d(t,"f",(function(){return f})),n.d(t,"h",(function(){return m})),n.d(t,"g",(function(){return y}));var r=n(326);function o(e,t){for(let i=0;i<e.length;++i)if(e[e.length-i-1]!==t-1-i)return!1;return!0}function c(e,t,n){const r=e.length+t.length,o=[];let c=0,d=0;for(let l=0;l<r;l++)-1===n.indexOf(l)?o.push(e[c++]):o.push(t[d++]);return o}function d(e,t){const n=[],r=e.length;for(let o=0;o<r;o++)-1===t.indexOf(o)&&n.push(e[o]);return[n,t.map((t=>e[t]))]}function l(e,t){return c(e,t.map((e=>1)),t)}function h(e,t,n){r.b(o(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function f(e,t){if(o(e,t))return null;const n=[];for(let i=0;i<t;++i)-1===e.indexOf(i)&&n.push(i);return e.forEach((e=>n.push(e))),n}function m(e){return e.map(((e,i)=>[i,e])).sort(((a,b)=>a[1]-b[1])).map((e=>e[0]))}function y(e,t){const n=[];for(let i=t-e;i<t;++i)n.push(i);return n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({max_:function(e,t=null,n=!1){const d={x:Object(c.a)(e,"x","max")},l={reductionIndices:t,keepDims:n};return r.a.runKernel(o.Hb,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({relu_:function(e){const t={x:Object(c.a)(e,"x","relu")};return r.a.runKernel(o.lc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({log_:function(e){const t={x:Object(c.a)(e,"x","log")};return r.a.runKernel(o.Cb,t)}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return d}));var r=n(326);function o(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,o=t.rank>1?t.rank-1:1,c=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(c+` update.rank < ${o}. `);if(e.length<r+(n.rank-o))throw new Error(c+` Output shape length < ${r+(n.rank-o)}`);if(n.rank!==o+e.length-r)throw new Error(c+" update.rank != "+(o+e.length-r));for(let e=0;e<o;++e)if(n.shape[e]!==t.shape[e])throw new Error(c+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-o;++t)if(n.shape[t+o]!==e[t+r])throw new Error(c+` updates.shape[${t+o}] (${n.shape[t+o]}) != shape[${t+o}] (${e[t+o]})`)}function c(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}o(n,t,e)}function d(e,t,n){const o=t.shape.length,c=o>1?t.shape[o-1]:1,d=n.length;let l=1;for(let i=c;i<d;++i)l*=n[i];const h=c<1?1:c;return{sliceRank:c,numUpdates:Object(r.O)(t.shape)/h,sliceSize:l,strides:[...Object(r.j)(n.slice(0,c)),1],outputSize:Object(r.O)(n)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));const r={};function o(e){return r[e]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return m}));var r=n(274),o=n(285),c=n(533),d=n(305),l=n(303),h=n(324);function f(e){const{inputs:t,backend:n,attrs:m}=e,{x:y}=t,{dtype:x}=m;if("complex64"===x){if("complex64"===y.dtype)return Object(l.a)({inputs:{x:y},backend:n});const e=Object(c.a)(n,y.shape,y.dtype),t=f({inputs:{x:y},backend:n,attrs:{dtype:"float32"}}),r=Object(d.a)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===y.dtype){const e=Object(h.a)({inputs:{input:y},backend:n}),t=f({inputs:{x:e},backend:n,attrs:{dtype:x}});return n.disposeIntermediateTensorInfo(e),t}if(!r.Wd.hasEncodingLoss(y.dtype,x)){const e=Object(l.a)({inputs:{x:y},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:x}}if("int32"===x){const e=n.data.get(y.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(y.shape,"int32",t)}if("bool"===x){const e=n.data.get(y.dataId).values,t=r.Wd.toTypedArray([0],y.dtype),[c,d]=Object(o.a)(((a,b)=>a!==b?1:0))(y.shape,[],e,t,"bool");return n.makeTensorInfo(d,"bool",c)}throw new Error(`Error in Cast: failed to cast ${y.dtype} to ${x}`)}const m={kernelName:r.w,backendName:"cpu",kernelFunc:f}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return c}));var r=n(274);function o(e,t,n,o,c){const d=r.Wd.sizeFromShape(o),l=r.Wd.makeZerosTypedArray(c,n);for(let i=0;i<e.length;i++){const n=e[i];if(n<0)throw new Error("Input x must be non-negative!");n>=c||(l[n]+=d>0?t[i]:1)}return l}function c(e,t,n,o=!1){const c=e.shape[0],d=e.shape[1],l=Object(r.pd)([c,n],t.dtype);for(let i=0;i<c;i++)for(let r=0;r<d;r++){const c=e.get(i,r);if(c<0)throw new Error("Input x must be non-negative!");c>=n||(o?l.set(1,i,c):t.size>0?l.set(l.get(i,c)+t.get(i,r),i,c):l.set(l.get(i,c)+1,i,c))}return l}},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return sub})),n.d(t,"b",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((e,t)=>e-t)),l=Object(c.b)(((e,t,n,r)=>({real:e-n,imag:t-r}))),sub=Object(c.a)(r.Xc,d,l),h={kernelName:r.Xc,backendName:"cpu",kernelFunc:sub}},,function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return h})),n.d(t,"c",(function(){return f})),n.d(t,"d",(function(){return m}));n(286);var r=n(366),o=n(327);const c=Object(r.a)("kernelRegistry",(()=>new Map)),d=Object(r.a)("gradRegistry",(()=>new Map));function l(e,t){const n=y(e,t);return c.get(n)}function h(e){return d.get(e)}function f(e){const t=c.entries(),n=[];for(;;){const{done:r,value:o}=t.next();if(r)break;const[c,d]=o,[l]=c.split("_");l===e&&n.push(d)}return n}function m(e){const{kernelName:t,backendName:n}=e,r=y(t,n);c.has(r)&&o.b(`The kernel '${t}' for backend '${n}' is already registered`),c.set(r,e)}function y(e,t){return`${t}_${e}`}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class o{refCount(e){return c("refCount")}incRef(e){return c("incRef")}timerAvailable(){return!0}time(e){return c("time")}read(e){return c("read")}readSync(e){return c("readSync")}numDataIds(){return c("numDataIds")}disposeData(e,t){return c("disposeData")}write(e,t,n){return c("write")}move(e,t,n,r,o){return c("move")}memory(){return c("memory")}floatPrecision(){return c("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return c("dispose")}}function c(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(276),o=n(329);function c(e,t,n){const c=Object(r.c)(e,n);return Object(o.a)(e,t,c,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({unstack_:function(e,t=0){const n=Object(c.a)(e,"x","unstack","string_or_numeric");d.b(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const l={value:n},h={axis:t};return r.a.runKernel(o.ed,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(326),d=n(275);const l=Object(d.a)({fft_:function(input){Object(c.b)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${input.dtype}.`));const e={input:input};return r.a.runKernel(o.db,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(326),d=n(275);const l=Object(d.a)({ifft_:function(input){Object(c.b)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${input.dtype}.`));const e={input:input};return r.a.runKernel(o.qb,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return w}));var r=n(326),o=n(309),c=n(311),d=n(352),l=n(275),h=n(351),f=n(281),m=n(312),y=n(332),x=n(331),v=n(350),O=n(347);const w=Object(l.a)({rfft_:function(input,e){Object(r.b)("float32"===input.dtype,(()=>`The dtype for rfft() must be real value but got ${input.dtype}`));let t=input.shape[input.shape.length-1];const n=input.size/t;let l;if(null!=e&&e<t){const n=input.shape.map((e=>0)),r=input.shape.map((e=>e));r[input.shape.length-1]=e,l=Object(m.a)(input,n,r),t=e}else if(null!=e&&e>t){const n=input.shape.map((e=>e));n[input.shape.length-1]=e-t,l=Object(c.a)([input,Object(x.a)(n)],input.shape.length-1),t=e}else l=input;const w=Object(v.a)(l),k=Object(f.a)(Object(o.a)(l,w),[n,t]),I=Object(O.a)(k),N=Math.floor(t/2)+1,S=Object(h.a)(I),T=Object(d.a)(I),$=Object(y.a)(S,[N,t-N],S.shape.length-1),j=Object(y.a)(T,[N,t-N],T.shape.length-1),C=l.shape.slice();return C[l.shape.length-1]=N,Object(f.a)(Object(o.a)($[0],j[0]),C)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({zerosLike_:function(e){const t={x:Object(c.a)(e,"x","zerosLike")};return r.a.runKernel(o.gd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({real_:function(input){const e={input:Object(c.a)(input,"input","real")};return r.a.runKernel(o.ic,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({imag_:function(input){const e={input:Object(c.a)(input,"input","imag")};return r.a.runKernel(o.sb,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(277),o=n(278);function c(e,t,n){const c={shape:e,value:t,dtype:n};return r.a.runKernel(o.eb,{},c)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({tile_:function(e,t){const n=Object(c.a)(e,"x","tile","string_or_numeric");d.b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const l={x:n},h={reps:t};return r.a.runKernel(o.Zc,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({lessEqual_:function(a,b){let e=Object(d.a)(a,"a","lessEqual","string_or_numeric"),t=Object(d.a)(b,"b","lessEqual","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Ab,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({greater_:function(a,b){let e=Object(d.a)(a,"a","greater","string_or_numeric"),t=Object(d.a)(b,"b","greater","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.ob,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(277),o=n(278);function c(e,t,n=1,c="float32"){if(0===n)throw new Error("Cannot have a step of zero");const d={start:e,stop:t,step:n,dtype:c};return r.a.runKernel(o.hc,{},d)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(277),o=n(276),c=n(275);const d=Object(c.a)({square_:function(e){const t=Object(o.a)(e,"x","square");return r.a.runKernel("Square",{x:t},{})}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({matMul_:function(a,b,e=!1,t=!1){let n=Object(d.a)(a,"a","matMul"),l=Object(d.a)(b,"b","matMul");[n,l]=Object(c.b)(n,l);const h={a:n,b:l},f={transposeA:e,transposeB:t};return r.a.runKernel(o.s,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(302),h=n(275),f=n(281);const m=Object(h.a)({conv2d_:function(e,filter,t,n,h="NHWC",m=[1,1],y){const x=Object(c.a)(e,"x","conv2d"),v=Object(c.a)(filter,"filter","conv2d");let O=x,w=!1;3===x.rank&&(w=!0,O=Object(f.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),d.b(4===O.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${O.rank}.`)),d.b(4===v.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${v.rank}.`)),null!=y&&d.b(d.v(n),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${y} but got pad ${n}.`));const k="NHWC"===h?O.shape[3]:O.shape[1];d.b(k===v.shape[2],(()=>`Error in conv2d: depth of input (${k}) must match input depth for filter ${v.shape[2]}.`)),d.b(l.h(t,m),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${m}'`));const I={x:O,filter:v},N={strides:t,pad:n,dataFormat:h,dilations:m,dimRoundingMode:y},S=r.a.runKernel(o.C,I,N);return w?Object(f.a)(S,[S.shape[1],S.shape[2],S.shape[3]]):S}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>1/(1+Math.exp(-e)))),l=Object(c.a)(r.Bc,(e=>1/(1+Math.exp(-e)))),h={kernelName:r.Bc,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o,c){const d=t.length,l=r.Wd.sizeFromShape(t),h=r.Wd.computeStrides(t),f=r.Wd.computeStrides(c),m=r.Wd.getTypedArrayFromDType(n,r.Wd.sizeFromShape(c));for(let i=0;i<l;++i){const t=r.Wd.indexToLoc(i,d,h),n=new Array(t.length);for(let i=0;i<n.length;i++)n[i]=t[o[i]];m[r.Wd.locToIndex(n,d,f)]=e[i]}return m}},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a===b?1:0)),l=Object(c.a)(r.Z,d,null,"bool"),h={kernelName:r.Z,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.exp(e))),l=Object(c.b)(r.bb,d),h={kernelName:r.bb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(input,e,t,n,o,c=!1,d=0){const l=n.length;if(l!==o.length)throw new Error("segmentIds and indices should have same size.");const h=[e[0],input.length/e[0]],f=h[1],m=l>0?o[l-1]+1:0;if(m<0)throw new Error("segment ids must be >= 0");const y=e.slice();y[0]=m;const x=y.reduce(((e,t)=>e*t),1),output=r.Wd.getArrayFromDType(t,x);if(0===l)return m>0&&output.fill(d),[output,y];if(m<=0)throw new Error("segment ids must be >= 0");let v=0,O=1,w=0,k=o[v];for(;;){let e=0;if(O<l){if(e=o[O],k===e){++O;continue}if(k>=e)throw new Error("segment ids are not increasing")}if(k<0||k>=m)throw new Error(`Segment id ${k} out of range [0, ${m}), possibly because segmentIds input is not sorted.`);k>w&&output.fill(d,w*f,k*f);for(let i=v;i<O;++i){const e=n[i];if(e<0||e>=h[0])throw new Error(`Bad: indices[${i}] == ${n[i]} out of range [0, ${h[0]})`);for(let t=0;t<f;t++)output[k*f+t]+=input[e*f+t]}if(c)for(let e=0;e<f;e++)output[k*f+e]/=O-v;if(v=O,++O,w=k+1,k=e,O>l)break}return w<m&&output.fill(d,w*f,m*f),[output,y]}},function(e,t,n){"use strict";(function(e,r){let o;function c(){if(null==o){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==r)t=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}o=t}return o}function d(e,t){const n=function(){const e=c();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return d}))}).call(this,n(27),n(144))},function(e,t,n){"use strict";function r(nav){if(nav||"undefined"!=typeof navigator&&null!=navigator){if(nav||(nav=navigator),"ReactNative"===nav.product)return!0;const a=nav.userAgent||nav.vendor||("undefined"!=typeof window?window.opera:"");if(!a){const e=nav;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))}return!1}function o(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(t),n.d(t,"isMobile",(function(){return r})),n.d(t,"isBrowser",(function(){return o}))},function(e,t,n){"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({floorDiv_:function(a,b){let e=Object(d.a)(a,"a","floorDiv"),t=Object(d.a)(b,"b","floorDiv");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.hb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({expandDims_:function(e,t=0){const n=Object(c.a)(e,"x","expandDims","string_or_numeric");d.b(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const l={input:n},h={dim:t};return r.a.runKernel(o.bb,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({sigmoid_:function(e){const t={x:Object(c.a)(e,"x","sigmoid")};return r.a.runKernel(o.zc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(276),o=n(326),c=n(275),d=n(281);const l=Object(c.a)({squeeze_:function(e,t){const n=Object(r.a)(e,"x","squeeze");return Object(d.a)(n,Object(o.Q)(n.shape,t).newShape)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var r=n(309),o=n(311),c=n(352),d=n(290),l=n(275),h=n(351),f=n(281),m=n(374),y=n(293),x=n(312),v=n(348);const O=Object(l.a)({irfft_:function(input){const e=input.shape[input.shape.length-1],t=input.size/e;let n;if(e<=2){const r=Object(f.a)(input,[t,e]);n=Object(v.a)(r)}else{const l=[t,2*(e-1)],O=Object(f.a)(Object(h.a)(input),[t,e]),w=Object(f.a)(Object(c.a)(input),[t,e]),k=Object(m.a)(Object(x.a)(O,[0,1],[t,e-2]),1),I=Object(d.a)(Object(m.a)(Object(x.a)(w,[0,1],[t,e-2]),1),Object(y.a)(-1)),N=Object(o.a)([O,k],1),i=Object(o.a)([w,I],1),S=Object(f.a)(Object(r.a)(N,i),[l[0],l[1]]);n=Object(v.a)(S)}if(n=Object(h.a)(n),3===input.rank&&0!==input.shape[0]){const e=n,t=input.shape[0];n=Object(f.a)(n,[t,n.shape[0]/t,n.shape[1]]),e.dispose()}return n}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({reverse_:function(e,t){const n={x:Object(c.a)(e,"x","reverse")},d={dims:t};return r.a.runKernel(o.sc,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({bincount_:function(e,t,n){const l=Object(c.a)(e,"x","bincount"),h=Object(c.a)(t,"weights","bincount");d.b("int32"===l.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${l.dtype}`)),d.b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.b(h.size===l.size||0===h.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${l.shape}, weights shape: ${h.shape}.`));const f={x:l,weights:h},m={size:n};return r.a.runKernel(o.u,f,m)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({round_:function(e){const t={x:Object(c.a)(e,"x","round")};return r.a.runKernel(o.uc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(318),l=n(275),h=n(281);const f=Object(l.a)({broadcastTo_:function(e,t){let input=Object(c.a)(e,"broadcastTo","x");const n=input.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<input.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${input.rank}.`);if(t.length>input.rank){const e=input.shape.slice();for(;e.length<t.length;)e.unshift(1);input=Object(h.a)(input,e)}const l=input.shape,f=Array.from(t);for(let i=t.length-1;i>=0;i--)if(l[i]===t[i])f[i]=1;else if(1!==input.shape[i])throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${t}].`);if(0===f.map(((e,i)=>e>1?i:-1)).filter((i=>i>=0)).length)return Object(d.a)(input);const m={x:input},y={reps:f};return r.a.runKernel(o.Zc,m,y)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(288),l=n(275);const h=Object(l.a)({logicalAnd_:function(a,b){const e=Object(c.a)(a,"a","logicalAnd","bool"),t=Object(c.a)(b,"b","logicalAnd","bool");Object(d.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Eb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({greaterEqual_:function(a,b){let e=Object(d.a)(a,"a","greaterEqual","string_or_numeric"),t=Object(d.a)(b,"b","greaterEqual","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.pb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({min_:function(e,t=null,n=!1){const d={x:Object(c.a)(e,"x","min")},l={axis:t,keepDims:n};return r.a.runKernel(o.Pb,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({sqrt_:function(e){const t={x:Object(c.a)(e,"x","sqrt")};return r.a.runKernel(o.Nc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({pow_:function(base,e){let t=Object(d.a)(base,"base","pow"),n=Object(d.a)(e,"exp","pow");[t,n]=Object(c.b)(t,n);const l={a:t,b:n};return r.a.runKernel(o.ec,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({transpose_:function(e,t){const n=Object(c.a)(e,"x","transpose");if(null==t&&(t=n.shape.map(((s,i)=>i)).reverse()),d.b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{d.b(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const l={x:n},h={perm:t};return r.a.runKernel(o.cd,l,h)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"f",(function(){return h})),n.d(t,"a",(function(){return f})),n.d(t,"d",(function(){return m})),n.d(t,"c",(function(){return y})),n.d(t,"e",(function(){return x}));var r=n(277),o=n(286),c=n(294),d=n(283);function l(){return r.a}function h(e,t){return r.a.tidy(e,t)}function f(e){Object(d.a)(e).forEach((e=>e.dispose()))}function m(e){return r.a.keep(e)}function y(){return r.a.backendName}function x(e,t,n=1){return r.a.registerBackend(e,t,n)}Object(c.d)((function(e){Object(o.b)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({mean_:function(e,t=null,n=!1){const d={x:Object(c.a)(e,"x","mean")},l={axis:t,keepDims:n};return r.a.runKernel(o.Ob,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(326),c=n(309),d=n(331);function l(e,t="float32"){if("complex64"===t){const t=l(e,"float32"),n=Object(d.a)(e,"float32");return Object(c.a)(t,n)}const n=Object(o.D)(Object(o.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({notEqual_:function(a,b){let e=Object(d.a)(a,"a","notEqual","string_or_numeric"),t=Object(d.a)(b,"b","notEqual","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Zb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(291),f=n(275);const m=Object(f.a)({minimum_:function(a,b){let e=Object(d.a)(a,"a","minimum"),t=Object(d.a)(b,"b","minimum");[e,t]=Object(c.b)(e,t),"bool"===e.dtype&&(e=Object(h.a)(e,"int32"),t=Object(h.a)(t,"int32")),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Qb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({squaredDifference_:function(a,b){let e=Object(d.a)(a,"a","squaredDifference"),t=Object(d.a)(b,"b","squaredDifference");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Pc,n,{})}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({log1p_:function(e){const t={x:Object(c.a)(e,"x","log1p")};return r.a.runKernel(o.Db,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({step_:function(e,t=0){const n={x:Object(c.a)(e,"x","step")},d={alpha:t};return r.a.runKernel(o.Qc,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({elu_:function(e){const t={x:Object(c.a)(e,"x","elu")};return r.a.runKernel(o.W,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({relu6_:function(e){const t={x:Object(c.a)(e,"x","relu6")};return r.a.runKernel(o.mc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({prelu_:function(e,t){const n={x:Object(c.a)(e,"x","prelu"),alpha:Object(c.a)(t,"alpha","prelu")};return r.a.runKernel(o.fc,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({leakyRelu_:function(e,t=.2){const n={x:Object(c.a)(e,"x","leakyRelu")},d={alpha:t};return r.a.runKernel(o.yb,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275),h=n(281);const f=Object(l.a)({depthwiseConv2d_:function(e,filter,t,n,l="NHWC",f=[1,1],m){const y=Object(c.a)(e,"x","depthwiseConv2d"),x=Object(c.a)(filter,"filter","depthwiseConv2d");let v=y,O=!1;3===y.rank&&(O=!0,v=Object(h.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),d.b(4===v.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${v.rank}.`)),d.b(4===x.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${x.rank}.`)),d.b(v.shape[3]===x.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${v.shape[3]}) must match the inChannels dimension in filter ${x.shape[2]}.`)),null!=m&&d.b(d.v(n),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${m} but got pad ${n}.`));const w={x:v,filter:x},k={strides:t,pad:n,dataFormat:l,dilations:f,dimRoundingMode:m},I=r.a.runKernel(o.O,w,k);return O?Object(h.a)(I,[I.shape[1],I.shape[2],I.shape[3]]):I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(276),o=n(326),c=n(329);function d(e,t,n){if(Object(o.d)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const d=Object(r.c)(e,n);if(3!==d.length&&1!==d.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===d.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(c.a)(e,t,d,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(310);function o(e,t){const n=[];for(let i=0;i<t.length;i++)t[i]&&n.push(i);const o=Object(r.a)(e,"int32"),c=Object(r.a)([n.length,e.length],"int32");for(let i=0;i<n.length;i++){const t=o.indexToLoc(n[i]),r=i*e.length;c.values.set(t,r)}return c.toTensor()}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({equal_:function(a,b){let e=Object(d.a)(a,"a","equal","string_or_numeric"),t=Object(d.a)(b,"b","equal","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Y,n)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return c}));var r=n(277);n(276),n(326),n(279);function o(){return 32===r.a.backend.floatPrecision()?.001:.1}function c(a,e,t){if(null==t&&(t=o()),!d(a,e,t))throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`)}function d(a,e,t){return!isFinite(a)&&!isFinite(e)||!(isNaN(a)||isNaN(e)||Math.abs(a-e)>t)}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return d}));var r=n(274),o=n(280);function c(e){const t=new Float32Array(e.length);for(let i=0;i<e.length;++i)t[i]=Math.abs(e[i]);return t}const d={kernelName:r.a,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Object(o.a)(t,"abs");let d=new Float32Array(r.Wd.sizeFromShape(t.shape));return d=c(n.data.get(t.dataId).values),n.makeOutput(d,t.shape,"float32")}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.ceil(e))),l=Object(c.b)(r.x,d),h={kernelName:r.x,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o){const c=r.Wd.getArrayFromDType(n,r.Wd.sizeFromShape(t));if(o&&"string"!==n){let t=0;e.forEach((input=>{const e=r.Wd.sizeFromShape(input.shape);c.set(input.vals,t),t+=e}))}else{let o=0;e.forEach((input=>{const e="string"===n?r.nd.fromUint8ToStringArray(input.vals):input.vals;let d=0;for(let n=0;n<input.shape[0];++n){const r=n*t[1]+o;for(let col=0;col<input.shape[1];++col)c[r+col]=e[d++]}o+=input.shape[1]}))}return c}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.expm1(e))),l=Object(c.b)(r.db,d),h={kernelName:r.db,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.floor(e))),l=Object(c.b)(r.hb,d),h={kernelName:r.hb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o,c,d,l,h,f){const m=Object(r.pd)([o,d],n);for(let i=0;i<o;i++){const n=[];let r=0;for(let t=0;t<c;t++){const o=e[i*c+t];r+=o*l[t],n.push(o)}if(r<0||r>=f/d)throw new Error(`Invalid indices: ${n} does not index into ${h}`);for(let e=0;e<d;e++)m.values[i*d+e]=t.get(...t.indexToLoc(r*d+e))}return m}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n){const o=Object(r.pd)(n,e.dtype);for(let i=0;i<o.size;++i){const n=o.indexToLoc(i).slice(),r=n[0],c=n[2],d=t.locToIndex([r,c]);n[2]=t.values[d];const l=e.locToIndex(n);o.values[i]=e.values[l]}return o}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a>b?1:0)),l=Object(c.a)(r.pb,d,null,"bool"),h={kernelName:r.pb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a>=b?1:0)),l=Object(c.a)(r.qb,d,null,"bool"),h={kernelName:r.qb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a<b?1:0)),l=Object(c.a)(r.Bb,d,null,"bool"),h={kernelName:r.Bb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a<=b?1:0)),l=Object(c.a)(r.Cb,d,null,"bool"),h={kernelName:r.Cb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n){const o=(t-e)/(n-1),c=r.Wd.makeZerosTypedArray(n,"float32");c[0]=e;for(let i=1;i<c.length;i++)c[i]=c[i-1]+o;return c}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.log(e))),l=Object(c.b)(r.Eb,d),h={kernelName:r.Eb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((e,t)=>Math.max(e,t))),l=Object(c.a)(r.Pb,d),h={kernelName:r.Pb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o){const c=r.Wd.getTypedArrayFromDType(o,r.Wd.sizeFromShape(n));for(let i=0;i<c.length;++i){const n=i*t;let r=e[n];for(let o=0;o<t;++o){const t=e[n+o];(Number.isNaN(t)||t>r)&&(r=t)}c[i]=r}return c}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((e,t)=>Math.min(e,t))),l=Object(c.a)(r.Sb,d),h={kernelName:r.Sb,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return l}));var r=n(274),o=n(280),c=n(316);function d(e,t,n){const o=r.Wd.createScalarValue(-1,n);return Object(c.c)([],t,o,e,n)}const l={kernelName:r.Xb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;Object(o.a)(r,"neg");const c=n.data.get(r.dataId).values,[l,h]=d(c,r.shape,r.dtype);return n.makeTensorInfo(h,r.dtype,l)}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>a!==b?1:0)),l=Object(c.a)(r.bc,d,null,"bool"),h={kernelName:r.bc,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return l}));var r=n(274),o=n(280),c=n(297);function d(e,t,n,o){const[c,d]=r.nd.computeOutAndReduceShapes(e,o),l=Object(r.Vd)(t,"int32"),h=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(c),l),f=r.Wd.sizeFromShape(d);for(let i=0;i<h.length;++i){const e=i*f;let t=1;for(let r=0;r<f;++r)t*=n[e+r];h[i]=t}return{outVals:h,outShape:c,outDtype:l}}const l={kernelName:r.ic,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:l}=e,{x:h}=t,{axis:f,keepDims:m}=l;Object(o.a)(h,"prod");const y=h.shape.length,x=r.Wd.parseAxisParam(f,h.shape),v=r.nd.getAxesPermutation(x,y);let O=x,w=h;const k=[];null!=v&&(w=Object(c.a)({inputs:{x:h},backend:n,attrs:{perm:v}}),k.push(w),O=r.nd.getInnerMostAxes(O.length,y));const I=n.data.get(w.dataId).values,{outVals:N,outShape:S,outDtype:T}=d(w.shape,w.dtype,I,O);let $=S;return m&&($=r.nd.expandShapeToKeepDim(S,x)),k.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo($,T,N)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o){if(e===t||e<t&&n<0||t<e&&n>1)return r.Wd.makeZerosTypedArray(0,o);const c=Math.abs(Math.ceil((t-e)/n)),d=r.Wd.makeZerosTypedArray(c,o);t<e&&1===n&&(n=-1),d[0]=e;for(let i=1;i<d.length;i++)d[i]=d[i-1]+n;return d}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>1/Math.sqrt(e))),l=Object(c.b)(r.xc,d),h={kernelName:r.xc,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o,c,d,l){const h=t[0],f=d[0],m=new Array(f),y=new Array(h),x=t[1];if(0===f){if(0!==h)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${h}`);return[r.Wd.getArrayFromDType(n,0),[0,x],r.Wd.getArrayFromDType(c,0),m,y]}let v=!0,O=0;const w=new Array(f).fill(0);for(let i=0;i<h;++i){const t=e[i*x];if(t<0)throw new Error(`indices(${i}, 0) is invalid: ${t} < 0`);if(t>=f)throw new Error(`indices(${i}, 0) is invalid: ${t} >= ${f}`);++w[t],v=v&&t>=O,O=t}let k=!0;for(let e=0;e<f;++e){const t=0===w[e];m[e]=t,k=k&&!t,w[e]=Math.max(w[e],1),e>0&&(w[e]+=w[e-1])}if(k&&v){const t=e,n=o;for(let i=0;i<h;++i)y[i]=i;return[t,[h,x],n,m,y]}{const t=w[f-1],d=r.Wd.getArrayFromDType(n,t*x),v=r.Wd.getArrayFromDType(c,t),O=new Array(f).fill(0);for(let i=0;i<h;++i){const t=e[i*x],n=O[t],r=(0===t?0:w[t-1])+n;O[t]++;for(let t=0;t<x;++t)d[r*x+t]=e[i*x+t];v[r]=o[i],y[i]=r}for(let e=0;e<f;++e){if(0===O[e]){const t=0===e?0:w[e-1];d[t*x+0]=e;for(let col=1;col<x;++col)d[t*x+col]=0;v[t]=l}}return[d,[t,x],v,m,y]}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o,c){const d=r.Wd.sizeFromShape(o),l=t[0],h=c.length,f=[];let m=1,y=-1;for(let e=0;e<h;++e){const t=c[e];if(-1===t){if(-1!==y)throw new Error(`only one output dimension may be -1, not both ${y} and ${e}`);y=e,f.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);m*=t,f.push(t)}}if(-1!==y){if(m<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(d/m);if(m*e!==d)throw new Error(`Input to reshape is a SparseTensor with ${d}\n          dense values, but the requested shape requires a multiple of ${m}. inputShape=${o} outputShape= ${f}`);f[y]=e}const x=r.Wd.sizeFromShape(f);if(x!==d)throw new Error(`Input to reshape is a tensor with ${d} dense values, but the requested shape has ${x}. inputShape=${o} outputShape=${f}`);const v=o.length,O=[];if(v>0){O[v-1]=1;for(let e=v-2;e>=0;--e)O[e]=O[e+1]*o[e+1]}const w=[];if(h>0){w[h-1]=1;for(let e=h-2;e>=0;--e)w[e]=w[e+1]*f[e+1]}const k=r.Wd.getArrayFromDType(n,l*h);for(let i=0;i<l;++i){let t=0;for(let n=0;n<v;++n)t+=e[i*v+n]*O[n];for(let e=0;e<h;++e)k[i*h+e]=Math.trunc(t/w[e]),t%=w[e]}return[k,[l,h],f]}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(306),c=n(282);const d=Object(o.a)((e=>Math.sqrt(e))),l=Object(c.a)(r.Pc,(e=>Math.sqrt(e))),h={kernelName:r.Pc,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h}));var r=n(274),o=n(285),c=n(287);const d=Object(o.a)(((a,b)=>{const e=a-b;return e*e})),l=Object(c.a)(r.Rc,d),h={kernelName:r.Rc,backendName:"cpu",kernelFunc:l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o){const c=Object(r.pd)(e,t.dtype);for(let i=0;i<c.size;i++){const e=c.indexToLoc(i),r=new Array(e.length);for(let t=0;t<r.length;t++)r[t]=e[t]*n[t]+o[t];c.set(t.get(...r),...e)}return c}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(274);class o{constructor(e,t,n,o,c,d){this.separator=r.Wd.encodeString(e),this.nGramWidths=t,this.leftPad=r.Wd.encodeString(n),this.rightPad=r.Wd.encodeString(o),this.padWidth=c,this.preserveShort=d}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(data,e,output,t,n,r){for(let o=0;o<n;++o){const c=this.getPadWidth(r),d=Math.max(0,c-o),l=Math.max(0,c-(n-(o+1))),h=r-(d+l),f=e+(d>0?0:o-c);let m=0;m+=d*this.leftPad.length;for(let e=0;e<h;++e)m+=data[f+e].length;m+=l*this.rightPad.length;m+=(d+l+h-1)*this.separator.length,output[t+o]=new Uint8Array(m);const y=output[t+o];let x=0;const v=e=>e.forEach((e=>y[x++]=e));for(let e=0;e<d;++e)v(this.leftPad),v(this.separator);for(let e=0;e<h-1;++e)v(data[f+e]),v(this.separator);if(h>0){v(data[f+h-1]);for(let e=0;e<l;++e)v(this.separator),v(this.rightPad)}else{for(let e=0;e<l-1;++e)v(this.rightPad),v(this.separator);v(this.rightPad)}}}compute(data,e){const t=data.length,n=e.length;if(n>0){let r=e[0];if(0!==r)throw new Error(`First split value must be 0, got ${r}`);for(let i=1;i<n;++i){let n=e[i]>=r;if(n=n&&e[i]<=t,!n)throw new Error(`Invalid split value ${e[i]}, must be in [${r}, ${t}]`);r=e[i]}if(r!==t)throw new Error(`Last split value must be data size. Expected ${t}, got ${r}`)}const o=n-1,c=r.Wd.getArrayFromDType("int32",n);if(0===t||0===n){const e=new Array(t);for(let i=0;i<=o;++i)c[i]=0;return[e,c]}c[0]=0;for(let i=1;i<=o;++i){const t=e[i]-e[i-1];let n=0;this.nGramWidths.forEach((e=>{n+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===n&&(n=1),c[i]=c[i-1]+n}const d=new Array(c[o]);for(let i=0;i<o;++i){const t=e[i];let n=c[i];if(this.nGramWidths.forEach((r=>{const o=e[i+1]-e[i],c=this.getNumNGrams(o,r);this.createNGrams(data,t,d,n,c,r),n+=c})),this.preserveShort&&n===c[i]){const r=e[i+1]-e[i];if(0===r)continue;const o=r+2*this.padWidth,c=1;this.createNGrams(data,t,d,n,c,o)}}return[d,c]}}function c(data,e,t,n,r,c,d,l){return new o(t,n,r,c,d,l).compute(data,e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(274);function o(e,t,n,r){if(!e.length)return;if(0===t.length){for(let i=0;i<e.length;++i)r.push(e.subarray(i,i+1));return}if(1===t.length){const o=t[0];let c=e.indexOf(o);for(;-1!==c;){const t=e.subarray(0,c);n&&0===t.length||r.push(t),c=(e=e.subarray(c+1)).indexOf(o)}return void(n&&0===e.length||r.push(e))}let o=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){const t=e.subarray(o,i);n&&0===t.length||r.push(t),o=i+1}}function c(input,e,t){const n=input.length,c=[];let d=0,l=0;const h=new Array(n);for(let i=0;i<n;++i){const n=c.length;o(input[i],e,t,c);const r=c.length-n;h[i]=r,d+=r,l=Math.max(l,r)}const f=r.Wd.getArrayFromDType("int32",2*d),m=new Array(d),y=[n,l];let x=0;for(let i=0;i<n;++i)for(let e=0;e<h[i];++e)f[2*x]=i,f[2*x+1]=e,m[x]=c[x],++x;return[f,m,y]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(input,e){const output=r.Wd.getArrayFromDType("int32",input.length);for(let i=0;i<input.length;++i)output[i]=r.Wd.fingerPrint64(input[i]).modulo(e).getLowBitsUnsigned();return output}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t){const n=new Array(e.rank);for(let i=0;i<n.length;i++)n[i]=e.shape[i]*t[i];const o=Object(r.pd)(n,e.dtype);for(let i=0;i<o.values.length;++i){const t=o.indexToLoc(i),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const r=e.locToIndex(n);o.values[i]=e.values[r]}return o}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(274);const o=(a,b)=>{const e=b.value-a.value;return 0===e?a.index-b.index:e};function select(e,t,n=0,c=e.length-1){for(;c>n;){if(c-n>600){const r=c-n+1,i=t-n+1,o=Math.log(r),s=.5*Math.exp(2*o/3),d=.5*Math.sqrt(o*s*(r-s)/r)*Math.sign(i-r/2);select(e,t,Math.max(n,Math.floor(t-i*s/r+d)),Math.min(c,Math.floor(t+(r-i)*s/r+d)))}const d=e[t];let i=n,l=c;for(r.Wd.swap(e,n,t),o(e[c],d)>0&&r.Wd.swap(e,n,c);i<l;){for(r.Wd.swap(e,i,l),i++,l--;o(e[i],d)<0;)i+=1;for(;o(e[l],d)>0;)l-=1}0===o(e[n],d)?r.Wd.swap(e,n,l):(l+=1,r.Wd.swap(e,l,c)),l<=t&&(n=l+1),t<=l&&(c=l-1)}}function c(e,t,n,c,d){const l=t[t.length-1],[h,f]=[e.length/l,l],m=r.Wd.getTypedArrayFromDType(n,h*c),y=r.Wd.getTypedArrayFromDType("int32",h*c);for(let b=0;b<h;b++){const t=b*f,n=e.subarray(t,t+f);let r=new Array(n.length);n.forEach(((e,t)=>r[t]={value:e,index:t})),c<r.length&&(select(r,c),r=r.slice(0,c)),d&&r.sort(o);const l=b*c,h=m.subarray(l,l+c),x=y.subarray(l,l+c);for(let i=0;i<c;i++)h[i]=r[i].value,x[i]=r[i].index}const x=t.slice();return x[x.length-1]=c,[Object(r.pd)(x,n,m),Object(r.pd)(x,"int32",y)]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(274);function o(e,t,n,o){const c=r.Wd.parseAxisParam(t,n)[0],d=[1,n[0],1];for(let i=0;i<c;i++)d[0]*=n[i];d[1]=n[c];for(let i=c+1;i<n.length;i++)d[2]*=n[i];const l={},h=new Int32Array(n[c]),f=new r.cd(d,o,e),m=[],y=1===d[0]&&1===d[2];for(let i=0;i<n[c];i++){let element;if(y)element=e[i].toString();else{const e=[];for(let t=0;t<d[0];t++)for(let n=0;n<d[2];n++)e.push(f.get(t,i,n));element=e.join(",")}if(void 0!==l[element])h[i]=l[element];else{const e=Object.keys(l).length;l[element]=e,h[i]=e,m.push(i)}}const x=d.slice();x[1]=Object.keys(l).length;const v=new r.cd(x,o);m.forEach(((e,i)=>{for(let t=0;t<d[0];t++)for(let n=0;n<d[2];n++)v.set(f.get(t,e,n),t,i,n)}));const O=n.slice();return O[c]=x[1],{outputValues:v.values,outputShape:O,indices:h}}},function(e,t,n){"use strict";n.r(t);var r=n(401);n.d(t,"simpleAbsImpl",(function(){return r.b}));var o=n(315);n.d(t,"addImpl",(function(){return o.c}));var c=n(340);n.d(t,"bincountImpl",(function(){return c.a})),n.d(t,"bincountReduceImpl",(function(){return c.b}));var d=n(402);n.d(t,"ceilImpl",(function(){return d.b}));var l=n(403);n.d(t,"concatImpl",(function(){return l.a}));var h=n(363);n.d(t,"equalImpl",(function(){return h.c}));var f=n(364);n.d(t,"expImpl",(function(){return f.c}));var m=n(404);n.d(t,"expm1Impl",(function(){return m.b}));var y=n(405);n.d(t,"floorImpl",(function(){return y.b}));var x=n(406);n.d(t,"gatherNdImpl",(function(){return x.a}));var v=n(407);n.d(t,"gatherV2Impl",(function(){return v.a}));var O=n(408);n.d(t,"greaterImpl",(function(){return O.b}));var w=n(409);n.d(t,"greaterEqualImpl",(function(){return w.b}));var k=n(410);n.d(t,"lessImpl",(function(){return k.b}));var I=n(411);n.d(t,"lessEqualImpl",(function(){return I.b}));var N=n(412);n.d(t,"linSpaceImpl",(function(){return N.a}));var S=n(413);n.d(t,"logImpl",(function(){return S.b}));var T=n(415);n.d(t,"maxImpl",(function(){return T.a}));var $=n(414);n.d(t,"maximumImpl",(function(){return $.b}));var j=n(416);n.d(t,"minimumImpl",(function(){return j.b}));var C=n(316);n.d(t,"multiplyImpl",(function(){return C.c}));var E=n(417);n.d(t,"negImpl",(function(){return E.b}));var A=n(418);n.d(t,"notEqualImpl",(function(){return A.b}));var R=n(419);n.d(t,"prodImpl",(function(){return R.b}));var F=n(420);n.d(t,"rangeImpl",(function(){return F.a}));var _=n(421);n.d(t,"rsqrtImpl",(function(){return _.b}));var D=n(361);n.d(t,"sigmoidImpl",(function(){return D.c}));var M=n(307);n.d(t,"sliceImpl",(function(){return M.c}));var P=n(422);n.d(t,"sparseFillEmptyRowsImpl",(function(){return P.a}));var W=n(423);n.d(t,"sparseReshapeImpl",(function(){return W.a}));var L=n(365);n.d(t,"sparseSegmentReductionImpl",(function(){return L.a}));var B=n(424);n.d(t,"sqrtImpl",(function(){return B.b}));var z=n(425);n.d(t,"squaredDifferenceImpl",(function(){return z.b}));var V=n(426);n.d(t,"stridedSliceImpl",(function(){return V.a}));var U=n(427);n.d(t,"stringNGramsImpl",(function(){return U.a}));var G=n(428);n.d(t,"stringSplitImpl",(function(){return G.a}));var H=n(429);n.d(t,"stringToHashBucketFastImpl",(function(){return H.a}));var K=n(341);n.d(t,"subImpl",(function(){return K.c}));var X=n(430);n.d(t,"tileImpl",(function(){return X.a}));var Y=n(431);n.d(t,"topKImpl",(function(){return Y.a}));var Z=n(362);n.d(t,"transposeImpl",(function(){return Z.a}));var Q=n(432);n.d(t,"uniqueImpl",(function(){return Q.a}))},,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var r=n(618),o=n(619),c=n(620);function d(){return h.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(d()<t)throw new RangeError("Invalid typed array length");return h.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=h.prototype:(null===e&&(e=new h(t)),e.length=t),e}function h(e,t,n){if(!(h.TYPED_ARRAY_SUPPORT||this instanceof h))return new h(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return y(this,e)}return f(this,e,t,n)}function f(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);h.TYPED_ARRAY_SUPPORT?(e=t).__proto__=h.prototype:e=x(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!h.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|O(t,n),o=(e=l(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(h.isBuffer(t)){var n=0|v(t.length);return 0===(e=l(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?l(e,0):x(e,t);if("Buffer"===t.type&&c(t.data))return x(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function m(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function y(e,t){if(m(t),e=l(e,t<0?0:0|v(t)),!h.TYPED_ARRAY_SUPPORT)for(var i=0;i<t;++i)e[i]=0;return e}function x(e,t){var n=t.length<0?0:0|v(t.length);e=l(e,n);for(var i=0;i<n;i+=1)e[i]=255&t[i];return e}function v(e){if(e>=d())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+d().toString(16)+" bytes");return 0|e}function O(e,t){if(h.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return X(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Y(e).length;default:if(r)return X(e).length;t=(""+t).toLowerCase(),r=!0}}function w(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return M(this,t,n);case"utf8":case"utf-8":return R(this,t,n);case"ascii":return _(this,t,n);case"latin1":case"binary":return D(this,t,n);case"base64":return A(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function k(b,e,t){var i=b[e];b[e]=b[t],b[t]=i}function I(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=h.from(t,r)),h.isBuffer(t))return 0===t.length?-1:N(e,t,n,r,o);if("number"==typeof t)return t&=255,h.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):N(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function N(e,t,n,r,o){var i,c=1,d=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;c=2,d/=2,l/=2,n/=2}function h(e,i){return 1===c?e[i]:e.readUInt16BE(i*c)}if(o){var f=-1;for(i=n;i<d;i++)if(h(e,i)===h(t,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===l)return f*c}else-1!==f&&(i-=i-f),f=-1}else for(n+l>d&&(n=d-l),i=n;i>=0;i--){for(var m=!0,y=0;y<l;y++)if(h(e,i+y)!==h(t,y)){m=!1;break}if(m)return i}return-1}function S(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var c=t.length;if(c%2!=0)throw new TypeError("Invalid hex string");r>c/2&&(r=c/2);for(var i=0;i<r;++i){var d=parseInt(t.substr(2*i,2),16);if(isNaN(d))return i;e[n+i]=d}return i}function T(e,t,n,r){return Z(X(t,e.length-n),e,n,r)}function $(e,t,n,r){return Z(function(e){for(var t=[],i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(t),e,n,r)}function j(e,t,n,r){return $(e,t,n,r)}function C(e,t,n,r){return Z(Y(t),e,n,r)}function E(e,t,n,r){return Z(function(e,t){for(var n,r,o,c=[],i=0;i<e.length&&!((t-=2)<0);++i)r=(n=e.charCodeAt(i))>>8,o=n%256,c.push(o),c.push(r);return c}(t,e.length-n),e,n,r)}function A(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function R(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,c,d,l,h=e[i],f=null,m=h>239?4:h>223?3:h>191?2:1;if(i+m<=n)switch(m){case 1:h<128&&(f=h);break;case 2:128==(192&(o=e[i+1]))&&(l=(31&h)<<6|63&o)>127&&(f=l);break;case 3:o=e[i+1],c=e[i+2],128==(192&o)&&128==(192&c)&&(l=(15&h)<<12|(63&o)<<6|63&c)>2047&&(l<55296||l>57343)&&(f=l);break;case 4:o=e[i+1],c=e[i+2],d=e[i+3],128==(192&o)&&128==(192&c)&&128==(192&d)&&(l=(15&h)<<18|(63&o)<<12|(63&c)<<6|63&d)>65535&&l<1114112&&(f=l)}null===f?(f=65533,m=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),i+=m}return function(e){var t=e.length;if(t<=F)return String.fromCharCode.apply(String,e);var n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=F));return n}(r)}t.Buffer=h,t.SlowBuffer=function(e){+e!=e&&(e=0);return h.alloc(+e)},t.INSPECT_MAX_BYTES=50,h.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=d(),h.poolSize=8192,h._augment=function(e){return e.__proto__=h.prototype,e},h.from=function(e,t,n){return f(null,e,t,n)},h.TYPED_ARRAY_SUPPORT&&(h.prototype.__proto__=Uint8Array.prototype,h.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&h[Symbol.species]===h&&Object.defineProperty(h,Symbol.species,{value:null,configurable:!0})),h.alloc=function(e,t,n){return function(e,t,n,r){return m(t),t<=0?l(e,t):void 0!==n?"string"==typeof r?l(e,t).fill(n,r):l(e,t).fill(n):l(e,t)}(null,e,t,n)},h.allocUnsafe=function(e){return y(null,e)},h.allocUnsafeSlow=function(e){return y(null,e)},h.isBuffer=function(b){return!(null==b||!b._isBuffer)},h.compare=function(a,b){if(!h.isBuffer(a)||!h.isBuffer(b))throw new TypeError("Arguments must be Buffers");if(a===b)return 0;for(var e=a.length,t=b.length,i=0,n=Math.min(e,t);i<n;++i)if(a[i]!==b[i]){e=a[i],t=b[i];break}return e<t?-1:t<e?1:0},h.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(e,t){if(!c(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return h.alloc(0);var i;if(void 0===t)for(t=0,i=0;i<e.length;++i)t+=e[i].length;var n=h.allocUnsafe(t),r=0;for(i=0;i<e.length;++i){var o=e[i];if(!h.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,r),r+=o.length}return n},h.byteLength=O,h.prototype._isBuffer=!0,h.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var i=0;i<e;i+=2)k(this,i,i+1);return this},h.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var i=0;i<e;i+=4)k(this,i,i+3),k(this,i+1,i+2);return this},h.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var i=0;i<e;i+=8)k(this,i,i+7),k(this,i+1,i+6),k(this,i+2,i+5),k(this,i+3,i+4);return this},h.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?R(this,0,e):w.apply(this,arguments)},h.prototype.equals=function(b){if(!h.isBuffer(b))throw new TypeError("Argument must be a Buffer");return this===b||0===h.compare(this,b)},h.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},h.prototype.compare=function(e,t,n,r,o){if(!h.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var c=(o>>>=0)-(r>>>=0),d=(n>>>=0)-(t>>>=0),l=Math.min(c,d),f=this.slice(r,o),m=e.slice(t,n),i=0;i<l;++i)if(f[i]!==m[i]){c=f[i],d=m[i];break}return c<d?-1:d<c?1:0},h.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},h.prototype.indexOf=function(e,t,n){return I(this,e,t,n,!0)},h.prototype.lastIndexOf=function(e,t,n){return I(this,e,t,n,!1)},h.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var c=!1;;)switch(r){case"hex":return S(this,e,t,n);case"utf8":case"utf-8":return T(this,e,t,n);case"ascii":return $(this,e,t,n);case"latin1":case"binary":return j(this,e,t,n);case"base64":return C(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(c)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),c=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var F=4096;function _(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function D(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function M(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=K(e[i]);return o}function P(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function W(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,n,r,o,c){if(!h.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<c)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function B(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function z(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function V(e,t,n,r,o,c){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(e,t,n,r,c){return c||V(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function G(e,t,n,r,c){return c||V(e,0,n,8),o.write(e,t,n,r,52,8),n+8}h.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),h.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=h.prototype;else{var o=t-e;n=new h(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},h.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||W(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},h.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||W(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},h.prototype.readUInt8=function(e,t){return t||W(e,1,this.length),this[e]},h.prototype.readUInt16LE=function(e,t){return t||W(e,2,this.length),this[e]|this[e+1]<<8},h.prototype.readUInt16BE=function(e,t){return t||W(e,2,this.length),this[e]<<8|this[e+1]},h.prototype.readUInt32LE=function(e,t){return t||W(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},h.prototype.readUInt32BE=function(e,t){return t||W(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},h.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||W(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},h.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||W(e,t,this.length);for(var i=t,r=1,o=this[e+--i];i>0&&(r*=256);)o+=this[e+--i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*t)),o},h.prototype.readInt8=function(e,t){return t||W(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},h.prototype.readInt16LE=function(e,t){t||W(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},h.prototype.readInt16BE=function(e,t){t||W(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},h.prototype.readInt32LE=function(e,t){return t||W(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},h.prototype.readInt32BE=function(e,t){return t||W(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},h.prototype.readFloatLE=function(e,t){return t||W(e,4,this.length),o.read(this,e,!0,23,4)},h.prototype.readFloatBE=function(e,t){return t||W(e,4,this.length),o.read(this,e,!1,23,4)},h.prototype.readDoubleLE=function(e,t){return t||W(e,8,this.length),o.read(this,e,!0,52,8)},h.prototype.readDoubleBE=function(e,t){return t||W(e,8,this.length),o.read(this,e,!1,52,8)},h.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||L(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},h.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||L(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},h.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,255,0),h.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},h.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),h.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):B(this,e,t,!0),t+2},h.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),h.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):B(this,e,t,!1),t+2},h.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),h.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):z(this,e,t,!0),t+4},h.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),h.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):z(this,e,t,!1),t+4},h.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);L(this,e,t,n,o-1,-o)}var i=0,c=1,sub=0;for(this[t]=255&e;++i<n&&(c*=256);)e<0&&0===sub&&0!==this[t+i-1]&&(sub=1),this[t+i]=(e/c>>0)-sub&255;return t+n},h.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);L(this,e,t,n,o-1,-o)}var i=n-1,c=1,sub=0;for(this[t+i]=255&e;--i>=0&&(c*=256);)e<0&&0===sub&&0!==this[t+i+1]&&(sub=1),this[t+i]=(e/c>>0)-sub&255;return t+n},h.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,127,-128),h.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},h.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),h.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):B(this,e,t,!0),t+2},h.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),h.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):B(this,e,t,!1),t+2},h.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),h.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):z(this,e,t,!0),t+4},h.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),h.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):z(this,e,t,!1),t+4},h.prototype.writeFloatLE=function(e,t,n){return U(this,e,t,!0,n)},h.prototype.writeFloatBE=function(e,t,n){return U(this,e,t,!1,n)},h.prototype.writeDoubleLE=function(e,t,n){return G(this,e,t,!0,n)},h.prototype.writeDoubleBE=function(e,t,n){return G(this,e,t,!1,n)},h.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!h.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},h.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var code=e.charCodeAt(0);code<256&&(e=code)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!h.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var o=h.isBuffer(e)?e:X(new h(e,r).toString()),c=o.length;for(i=0;i<n-t;++i)this[i+t]=o[i%c]}return this};var H=/[^+\/0-9A-Za-z-_]/g;function K(e){return e<16?"0"+e.toString(16):e.toString(16)}function X(e,t){var n;t=t||1/0;for(var r=e.length,o=null,c=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&c.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&c.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&c.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&c.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;c.push(n)}else if(n<2048){if((t-=2)<0)break;c.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;c.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;c.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return c}function Y(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(H,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Z(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(27))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(326),d=n(275),l=n(281);const h=Object(d.a)({conv2DBackpropInput_:function(e,t,filter,n,d,h="NHWC",f){c.b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let m=e,y=t,x=!1;3===t.rank&&(x=!0,y=Object(l.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),m=[1,e[0],e[1],e[2]]),c.b(4===m.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${m.length}.`)),c.b(4===y.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${y.rank}`)),c.b(4===filter.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${filter.rank}`));const v="NHWC"===h?m[3]:m[1],O="NHWC"===h?y.shape[3]:y.shape[1];c.b(v===filter.shape[2],(()=>`Error in conv2dDerInput: depth of input (${v}) must match input depth for filter ${filter.shape[2]}.`)),c.b(O===filter.shape[3],(()=>`Error in conv2dDerInput: depth of output (${O}) must match output depth for filter ${filter.shape[3]}.`)),null!=f&&c.b(c.v(d),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${f} but got pad ${d}.`));const w={dy:y,filter:filter},k={strides:n,pad:d,dataFormat:h,dimRoundingMode:f,inputShape:m},I=r.a.runKernel(o.E,w,k);return x?Object(l.a)(I,[I.shape[1],I.shape[2],I.shape[3]]):I}})},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return R})),n.d(t,"i",(function(){return _})),n.d(t,"c",(function(){return D})),n.d(t,"f",(function(){return M})),n.d(t,"e",(function(){return L})),n.d(t,"d",(function(){return B})),n.d(t,"k",(function(){return V})),n.d(t,"g",(function(){return U})),n.d(t,"h",(function(){return G})),n.d(t,"j",(function(){return H})),n.d(t,"b",(function(){return K}));var r=n(274),o=n(624),c=n(338),d=n(284),l=n(625),h=n(626),f=n(627),m=n(628),y=n(629),x=n(630),v=n(631),O=n(632),w=n(633),k=n(634),I=n(635),N=n(636),S=n(637),T=n(638),$=n(639),j=n(640),C=n(641),E=n(642),A=n(643);class R{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[l,h,f,m,y,x,v,O,w,k,I,N,S,T,$,j,C,E,A].map((e=>e.json)));this.opMappers=e.reduce(((map,e)=>(map[e.tfOpName]=e,map)),{})}transformGraph(e,t={}){const n=e.node,r=[],o=[],c=[],l=n.reduce(((map,e)=>(map[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(map[e.name]):"Const"===e.op?o.push(map[e.name]):null!=e.input&&0!==e.input.length||c.push(map[e.name]),map)),{});let h=[];const f=[];let m={},y={};null!=t&&(m=this.mapSignatureEntries(t.inputs),y=this.mapSignatureEntries(t.outputs));const x=Object.keys(l);x.forEach((e=>{const t=l[e];t.inputNames.forEach(((e,n)=>{const[r,,o]=Object(d.b)(e),c=l[r];if(null!=c.outputs){const e=c.outputs.indexOf(o);if(-1!==e){const o=`${r}:${e}`;t.inputNames[n]=o}}t.inputs.push(c),c.children.push(t)}))})),0===Object.keys(y).length?x.forEach((e=>{const t=l[e];0===t.children.length&&f.push(t)})):Object.keys(y).forEach((e=>{const[t]=Object(d.b)(e),n=l[t];null!=n&&(n.signatureKey=y[e],f.push(n))})),Object.keys(m).length>0?Object.keys(m).forEach((e=>{const[t]=Object(d.b)(e),n=l[t];n&&(n.signatureKey=m[e],h.push(n))})):h=r;let v={};null!=e.library&&null!=e.library.function&&(v=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const O={nodes:l,inputs:h,outputs:f,weights:o,placeholders:r,signature:t,functions:v};return c.length>0&&(O.initNodes=c),O}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Object(c.a)(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((input=>input.startsWith("^")?input.substr(1):input)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((map,param)=>(map[param.name]={type:param.type,inputIndexStart:param.start,inputIndexEnd:param.end},map)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((map,param)=>{const t=param.type;let n;switch(param.type){case"string":n=_(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=_(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"string[]":n=G(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=G(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"number":n=M(e.attr,param.tfName,param.defaultValue||0),void 0===n&&param.tfDeprecatedName&&(n=M(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"number[]":n=U(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=U(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool":n=D(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=D(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool[]":n=K(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=K(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape":n=V(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=V(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape[]":n=H(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=H(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype":n=L(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=L(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype[]":n=B(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=B(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"func":n=W(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=W(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${param.type} for op: ${e.op}`)}return map[param.name]={value:n,type:t},map}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((map,e)=>(map[e.name]=this.mapNode(e),"Const"===e.op&&n.push(map[e.name]),map)),{}));const o=[],c=[];e.signature.inputArg.forEach((e=>{const[t]=Object(d.b)(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:P(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,o.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[o,,c]=Object(d.b)(e),l=r[o];if(null!=l.outputs){const e=l.outputs.indexOf(c);if(-1!==e){const r=`${o}:${e}`;t.inputNames[n]=r}}t.inputs.push(l),l.children.push(t)}))}));const l=e.ret;e.signature.outputArg.forEach((output=>{const[e,t]=Object(d.b)(l[output.name]),n=r[e];null!=n&&(n.defaultOutput=t,c.push(n))}));const h=this.mapArgsToSignature(e);return{nodes:r,inputs:o,outputs:c,weights:n,placeholders:[],signature:h}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((map,e)=>(map[e.name]=this.mapArgToTensorInfo(e),map)),{}),outputs:e.signature.outputArg.reduce(((map,t)=>(map[t.name]=this.mapArgToTensorInfo(t,e.ret),map)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function F(s,t){const n=Array.isArray(s)?String.fromCharCode.apply(null,s):function(text){const t=Object(r.xd)().global;if(void 0!==t.atob)return t.atob(text);if(void 0!==e)return new e(text,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(s);return t?n:n.toLowerCase()}function _(e,t,n,r=!1){const param=e[t];return null!=param?F(param.s,r):n}function D(e,t,n){const param=e[t];return param?param.b:n}function M(e,t,n){const param=e[t]||{},r=null!=param.i?param.i:null!=param.f?param.f:n;return"number"==typeof r?r:parseInt(r,10)}function P(e){switch("string"==typeof e&&(e=o.a[e]),e){case o.a.DT_FLOAT:return"float32";case o.a.DT_INT32:case o.a.DT_INT64:case o.a.DT_INT8:case o.a.DT_UINT8:return"int32";case o.a.DT_BOOL:return"bool";case o.a.DT_DOUBLE:return"float32";case o.a.DT_STRING:return"string";default:return null}}function W(e,t,n){const param=e[t];return param&&param.func?param.func.name:n}function L(e,t,n){const param=e[t];return param&&param.type?P(param.type):n}function B(e,t,n){const param=e[t];return param&&param.list&&param.list.type?param.list.type.map((e=>P(e))):n}function z(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function V(e,t,n){const param=e[t];return param&&param.shape?z(param.shape):n}function U(e,t,n){const param=e[t];return param?((param.list.f&&param.list.f.length?param.list.f:param.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function G(e,t,n,r=!1){const param=e[t];return param&&param.list&&param.list.s?param.list.s.map((e=>F(e,r))):n}function H(e,t,n){const param=e[t];return param&&param.list&&param.list.shape?param.list.shape.map((e=>z(e))):n}function K(e,t,n){const param=e[t];return param&&param.list&&param.list.b?param.list.b:n}}).call(this,n(456).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({addN_:function(e){d.b(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),d.b(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,i)=>Object(c.a)(e,`tensors${i}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d.a(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const l=t;return r.a.runKernel(o.e,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({mod_:function(a,b){let e=Object(d.a)(a,"a","mod"),t=Object(d.a)(b,"b","mod");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.Sb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(283),o=n(276),c=n(304),d=n(399),l=n(275),h=n(319),f=n(350);const m=Object(l.a)({divNoNan_:function(a,b){let e=Object(o.a)(a,"a","div"),t=Object(o.a)(b,"b","div");[e,t]=Object(r.b)(e,t);const n=Object(c.a)(e,t),l=Object(f.a)(n),m=Object(d.a)(t,l);return Object(h.a)(m,l,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(291),f=n(275);const m=Object(f.a)({maximum_:function(a,b){let e=Object(d.a)(a,"a","maximum"),t=Object(d.a)(b,"b","maximum");[e,t]=Object(c.b)(e,t),"bool"===e.dtype&&(e=Object(h.a)(e,"int32"),t=Object(h.a)(t,"int32")),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Nb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({acos_:function(e){const t={x:Object(c.a)(e,"x","acos")};return r.a.runKernel(o.b,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({acosh_:function(e){const t={x:Object(c.a)(e,"x","acosh")};return r.a.runKernel(o.c,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({asin_:function(e){const t={x:Object(c.a)(e,"x","asin")};return r.a.runKernel(o.j,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({asinh_:function(e){const t={x:Object(c.a)(e,"x","asinh")};return r.a.runKernel(o.k,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({atan_:function(e){const t={x:Object(c.a)(e,"x","atan")};return r.a.runKernel(o.l,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(275);const h=Object(l.a)({atan2_:function(a,b){let e=Object(d.a)(a,"a","atan2"),t=Object(d.a)(b,"b","atan2");[e,t]=Object(c.b)(e,t);const n={a:e,b:t};return r.a.runKernel(o.m,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({atanh_:function(e){const t={x:Object(c.a)(e,"x","atanh")};return r.a.runKernel(o.n,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({ceil_:function(e){const t={x:Object(c.a)(e,"x","ceil")};return r.a.runKernel(o.x,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({cos_:function(e){const t={x:Object(c.a)(e,"x","cos")};return r.a.runKernel(o.I,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({cosh_:function(e){const t={x:Object(c.a)(e,"x","cosh")};return r.a.runKernel(o.J,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(291),h=n(275);const f=Object(h.a)({erf_:function(e){let t=Object(c.a)(e,"x","erf");d.b("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Object(l.a)(t,"float32"));const n={x:t};return r.a.runKernel(o.Z,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({expm1_:function(e){const t={x:Object(c.a)(e,"x","expm1")};return r.a.runKernel(o.cb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({floor_:function(e){const t={x:Object(c.a)(e,"x","floor")};return r.a.runKernel(o.gb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({reciprocal_:function(e){const t={x:Object(c.a)(e,"x","reciprocal")};return r.a.runKernel(o.kc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({selu_:function(e){const t={x:Object(c.a)(e,"x","selu")};return r.a.runKernel(o.yc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({sin_:function(e){const t={x:Object(c.a)(e,"x","sin")};return r.a.runKernel(o.Bc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({sign_:function(e){const t={x:Object(c.a)(e,"x","sign")};return r.a.runKernel(o.Ac,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({sinh_:function(e){const t={x:Object(c.a)(e,"x","sinh")};return r.a.runKernel(o.Cc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({softplus_:function(e){const t={x:Object(c.a)(e,"x","softplus")};return r.a.runKernel(o.Fc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({tanh_:function(e){const t={x:Object(c.a)(e,"x","tanh")};return r.a.runKernel(o.Yc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({tan_:function(e){const t={x:Object(c.a)(e,"x","tan")};return r.a.runKernel(o.Xc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({clipByValue_:function(e,t,n){const l=Object(c.a)(e,"x","clipByValue");d.b(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const h={x:l},f={clipValueMin:t,clipValueMax:n};return r.a.runKernel(o.y,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({rsqrt_:function(e){const t={x:Object(c.a)(e,"x","rsqrt")};return r.a.runKernel(o.vc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(291),l=n(275);const h=Object(l.a)({prod_:function(e,t=null,n=!1){let l=Object(c.a)(e,"x","prod");"bool"===l.dtype&&(l=Object(d.a)(l,"int32"));const h={x:l},f={axis:t,keepDims:n};return r.a.runKernel(o.gc,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({isNaN_:function(e){const t={x:Object(c.a)(e,"x","isNaN")};return r.a.runKernel(o.vb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(276),o=n(326),c=n(360),d=n(302),l=n(275),h=n(281);const f=Object(l.a)({conv1d_:function(e,filter,t,n,l="NWC",f=1,m){const y=Object(r.a)(e,"x","conv1d"),x=Object(r.a)(filter,"filter","conv1d");let v=y,O=!1;2===y.rank&&(O=!0,v=Object(h.a)(y,[1,y.shape[0],y.shape[1]])),o.b(3===v.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${v.rank}.`)),o.b(3===x.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${x.rank}.`)),null!=m&&o.b(o.v(n),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${m} but got pad ${n}.`)),o.b(v.shape[2]===x.shape[1],(()=>`Error in conv1d: depth of input (${v.shape[2]}) must match input depth for filter ${x.shape[1]}.`)),o.b(d.h(t,f),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${f}'`)),o.b("NWC"===l,(()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`));const w=Object(h.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]]),k=Object(h.a)(v,[v.shape[0],1,v.shape[1],v.shape[2]]),I=[1,t],N=[1,f],S=Object(c.a)(k,w,I,n,"NHWC",N,m);return O?Object(h.a)(S,[S.shape[2],S.shape[3]]):Object(h.a)(S,[S.shape[0],S.shape[2],S.shape[3]])}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(276),o=n(458),c=n(275);const d=Object(c.a)({conv2dTranspose_:function(e,filter,t,n,c,d){const l=Object(r.a)(e,"x","conv2dTranspose"),h=Object(r.a)(filter,"filter","conv2dTranspose");return Object(o.a)(t,l,h,n,c,"NHWC",d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(302),h=n(275),f=n(281);const m=Object(h.a)({conv3d_:function(e,filter,t,n,h="NDHWC",m=[1,1,1]){const y=Object(c.a)(e,"x","conv3d"),x=Object(c.a)(filter,"filter","conv3d");let v=y,O=!1;4===y.rank&&(O=!0,v=Object(f.a)(y,[1,y.shape[0],y.shape[1],y.shape[2],y.shape[3]])),d.b(5===v.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${v.rank}.`)),d.b(5===x.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${x.rank}.`)),d.b(v.shape[4]===x.shape[3],(()=>`Error in conv3d: depth of input (${v.shape[4]}) must match input depth for filter ${x.shape[3]}.`)),d.b(Object(l.h)(t,m),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${m}'`)),d.b("NDHWC"===h,(()=>`Error in conv3d: got dataFormat of ${h} but only NDHWC is currently supported.`));const w={x:v,filter:x},k={strides:t,pad:n,dataFormat:h,dilations:m},I=r.a.runKernel(o.F,w,k);return O?Object(f.a)(I,[I.shape[1],I.shape[2],I.shape[3],I.shape[4]]):I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(291),h=n(302),f=n(275),m=n(281);const y=Object(f.a)({avgPool_:function(e,t,n,f,y){const x=Object(c.a)(e,"x","avgPool","float32");d.b(h.h(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let v=x,O=!1;3===x.rank&&(O=!0,v=Object(m.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),d.b(4===v.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${v.rank}.`)),null!=y&&d.b(d.v(f),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${y} but got pad ${f}.`));const w={x:v},k={filterSize:t,strides:n,pad:f,dimRoundingMode:y};let I=r.a.runKernel(o.o,w,k);return I=Object(l.a)(I,x.dtype),O?Object(m.a)(I,[I.shape[1],I.shape[2],I.shape[3]]):I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(302),h=n(275),f=n(281);const m=Object(h.a)({maxPool_:function(e,t,n,h,m){const y=Object(c.a)(e,"x","maxPool");let x=y,v=!1;3===y.rank&&(v=!0,x=Object(f.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),d.b(4===x.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${x.rank}.`)),d.b(l.h(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=m&&d.b(d.v(h),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${m} but got pad ${h}.`));const O={x:x},w={filterSize:t,strides:n,pad:h,dimRoundingMode:m},k=r.a.runKernel(o.Ib,O,w);return v?Object(f.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({maxPoolWithArgmax_:function(e,t,n,d,l=!1){const h={x:Object(c.a)(e,"x","maxPoolWithArgmax")},f={filterSize:t,strides:n,pad:d,includeBatchInIndex:l},m=r.a.runKernel(o.Mb,h,f);return{result:m[0],indexes:m[1]}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(291),h=n(275),f=n(281);const m=Object(h.a)({avgPool3d_:function(e,t,n,h,m,y="NDHWC"){const x=Object(c.a)(e,"x","avgPool3d","float32");let v=x,O=!1;4===x.rank&&(O=!0,v=Object(f.a)(x,[1,x.shape[0],x.shape[1],x.shape[2],x.shape[3]])),d.b(5===v.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${v.rank}.`)),d.b("NDHWC"===y,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${y}`)),null!=m&&d.b(d.v(h),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${m} but got pad ${h}.`));const w={x:v},k={filterSize:t,strides:n,pad:h,dimRoundingMode:m,dataFormat:y};let I=r.a.runKernel(o.p,w,k);return I=Object(l.a)(I,v.dtype),O?Object(f.a)(I,[I.shape[1],I.shape[2],I.shape[3],I.shape[4]]):I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275),h=n(281);const f=Object(l.a)({maxPool3d_:function(e,t=[1,1,1],n,l,f,m="NDHWC"){const y=Object(c.a)(e,"x","maxPool3d");let x=y,v=!1;4===y.rank&&(v=!0,x=Object(h.a)(y,[1,y.shape[0],y.shape[1],y.shape[2],y.shape[3]])),d.b(5===x.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${x.rank}.`)),d.b("NDHWC"===m,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${m}`)),null!=f&&d.b(d.v(l),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${f} but got pad ${l}.`));const O={x:x},w={filterSize:t,strides:n,pad:l,dimRoundingMode:f,dataFormat:m},k=r.a.runKernel(o.Jb,O,w);return v?Object(h.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275),h=n(281);const f=Object(l.a)({dilation2d_:function(e,filter,t,n,l=[1,1],f="NHWC"){const m=Object(c.a)(e,"x","dilation2d"),y=Object(c.a)(filter,"filter","dilation2d");d.b(3===m.rank||4===m.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${m.rank}.`)),d.b(3===y.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${y.rank}.`)),d.b("NHWC"===f,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${f}`));let x=m,v=!1;3===m.rank&&(x=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]),v=!0);const O={x:x,filter:y},w={strides:t,pad:n,dilations:l},k=r.a.runKernel(o.S,O,w);return v?Object(h.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(277),o=n(278);function c(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const c={start:e,stop:t,num:n};return r.a.runKernel(o.Bb,{},c)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(275),l=n(281);const h=Object(d.a)({multinomial_:function(e,t,n,d=!1){const h=Object(c.a)(e,"logits","multinomial"),f=h.size,m=h.rank;if(f<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${f}.`);if(m>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${m}`);n=n||Math.random();const y={logits:1===m?Object(l.a)(h,[1,-1]):h},x={numSamples:t,seed:n,normalized:d},v=r.a.runKernel(o.Tb,y,x);return 1===m?Object(l.a)(v,[v.size]):v}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({oneHot_:function(e,t,n=1,d=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const l={indices:Object(c.a)(e,"indices","oneHot","int32")},h={depth:t,onValue:n,offValue:d};return r.a.runKernel(o.ac,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({onesLike_:function(e){const t={x:Object(c.a)(e,"x","onesLike")};return r.a.runKernel(o.bc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(310),o=n(275),c=n(503);const d=Object(o.a)({randomUniform_:function(e,t=0,n=1,o="float32",d){const l=Object(r.a)(e,o),h=new c.b(t,n,null,d);for(let i=0;i<l.values.length;i++)l.values[i]=h.nextValue();return l.toTensor()}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return c}));var r=n(504);n(400);class o{constructor(e,t,n,o,c){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=o,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const d=c||Math.random();this.random=r.alea(d.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,o,s;do{r=2*this.random()-1,o=2*this.random()-1,s=r*r+o*o}while(s>=1||0===s);const c=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*c,t=this.mean+this.stdDev*o*c,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class c{constructor(e=0,t=1,n,o){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==o&&(o=Math.random()),"number"==typeof o&&(o=o.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=r.alea(o)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},function(e,t,n){var r=n(644),o=n(645),c=n(646),d=n(647),l=n(648),h=n(649),f=n(650);f.alea=r,f.xor128=o,f.xorwow=c,f.xorshift7=d,f.xor4096=l,f.tychei=h,e.exports=f},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(310),o=n(275),c=n(503);const d=Object(o.a)({truncatedNormal_:function(e,t=0,n=1,o,d){if(null!=o&&"bool"===o)throw new Error("Unsupported data type $ { dtype }");const l=new c.a(t,n,o,!0,d),h=Object(r.a)(e,o);for(let i=0;i<h.values.length;i++)h.values[i]=l.nextValue();return h.toTensor()}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(398),o=n(276);const c=async function(e){const t=Object(o.a)(e,"condition","whereAsync","bool"),n=await t.data(),c=Object(r.a)(t.shape,n);return e!==t&&t.dispose(),c}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(294),o=n(276),c=n(326);const d=async function(e,t){const n=Object(o.a)(e,"x","setdiff1d"),d=Object(o.a)(t,"y","setdiff1d");c.b(n.dtype===d.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${d.dtype}).`)),c.b(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),c.b(1===d.rank,(()=>`y should be 1D tensor, but got y (${d.shape}).`));const l=await n.data(),h=await d.data(),f=new Set(h);let m=0;for(let i=0;i<l.length;i++)f.has(l[i])||m++;const y=new r.b([m],n.dtype),x=new r.b([m],"int32");for(let i=0,p=0;i<l.length;i++)f.has(l[i])||(y.values[p]=l[i],x.values[p]=i,p++);return[y.toTensor(),x.toTensor()]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({topk_:function(e,t=1,n=!0){const d=Object(c.a)(e,"x","topk");if(0===d.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const l=d.shape[d.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>l)throw new Error(`'k' passed to topk() must be <= the last dimension (${l}) but got ${t}`);const h={x:d},f={k:t,sorted:n},[m,y]=r.a.runKernel(o.ad,h,f);return{values:m,indices:y}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({unique_:function(e,t=0){const n=Object(c.a)(e,"x","unique","string_or_numeric");Object(d.b)(n.rank>0,(()=>"The input tensor must be at least 1D"));const l={x:n},h={axis:t},[f,m]=r.a.runKernel(o.dd,l,h);return{values:f,indices:m}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(283),d=n(276),l=n(288),h=n(275);const f=Object(h.a)({less_:function(a,b){let e=Object(d.a)(a,"a","less","string_or_numeric"),t=Object(d.a)(b,"b","less","string_or_numeric");[e,t]=Object(c.b)(e,t),Object(l.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.zb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({logicalNot_:function(e){const t={x:Object(c.a)(e,"x","logicalNot","bool")};return r.a.runKernel(o.Fb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(288),l=n(275);const h=Object(l.a)({logicalOr_:function(a,b){const e=Object(c.a)(a,"a","logicalOr","bool"),t=Object(c.a)(b,"b","logicalOr","bool");Object(d.a)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Gb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({einsum_:function(e,...t){const n=t.map(((e,i)=>Object(c.a)(e,`tensors${i}`,"einsum"))),d={equation:e};return r.a.runKernel(o.V,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275),h=n(281);const f=Object(l.a)({localResponseNormalization_:function(e,t=5,n=1,l=1,f=.5){const m=Object(c.a)(e,"x","localResponseNormalization");d.b(4===m.rank||3===m.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${m.rank}.`)),d.b(d.v(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let y=m,x=!1;3===m.rank&&(x=!0,y=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]));const v={x:y},O={depthRadius:t,bias:n,alpha:l,beta:f},w=r.a.runKernel(o.wb,v,O);return x?Object(h.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({softmax_:function(e,t=-1){const n=Object(c.a)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const d={logits:n},l={dim:t};return r.a.runKernel(o.Ec,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(295),o=n(276),c=n(291),d=n(322),l=n(336),h=n(334),f=n(290),m=n(275),y=n(292),x=n(300);const v=Object(m.a)({logSoftmax_:function(e,t=-1){const n=Object(o.a)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const m=Object(r.a)(((e,n)=>{const r=Object(h.a)(e,t,!0),o=Object(y.a)(e,r),m=Object(y.a)(Object(c.a)(o,"float32"),Object(l.a)(Object(x.a)(Object(d.a)(o),t,!0)));n([m]);return{value:m,gradFunc:(e,n)=>{const[r]=n,o=Object(d.a)(r);return Object(y.a)(e,Object(f.a)(Object(x.a)(e,t,!0),o))}}}));return m(n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({all_:function(e,t=null,n=!1){const d={x:Object(c.a)(e,"x","all","bool")},l={axis:t,keepDims:n};return r.a.runKernel(o.f,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({any_:function(e,t=null,n=!1){const d={x:Object(c.a)(e,"x","any","bool")},l={axis:t,keepDims:n};return r.a.runKernel(o.g,d,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({argMax_:function(e,t=0){const n={x:Object(c.a)(e,"x","argMax")},d={axis:t};return r.a.runKernel(o.h,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({argMin_:function(e,t=0){const n={x:Object(c.a)(e,"x","argMin")},d={axis:t};return r.a.runKernel(o.i,n,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({cumsum_:function(e,t=0,n=!1,d=!1){const l={x:Object(c.a)(e,"x","cumsum")},h={axis:t,exclusive:n,reverse:d};return r.a.runKernel(o.L,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({denseBincount_:function(e,t,n,l=!1){const h=Object(c.a)(e,"x","denseBincount"),f=Object(c.a)(t,"weights","denseBincount");d.b("int32"===h.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${h.dtype}`)),d.b(h.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${h.rank}.`)),d.b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),d.b(f.size===h.size||0===f.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${h.shape}, weights shape: ${f.shape}.`));const m={x:h,weights:f},y={size:n,binaryOutput:l};return r.a.runKernel(o.M,m,y)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({gather_:function(e,t,n=0,d=0){const l={x:Object(c.a)(e,"x","gather"),indices:Object(c.a)(t,"indices","gather","int32")},h={axis:n,batchDims:d};return r.a.runKernel(o.nb,l,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({stridedSlice_:function(e,t,n,d,l=0,h=0,f=0,m=0,y=0){const x={x:Object(c.a)(e,"x","stridedSlice","string_or_numeric")},v={begin:t,end:n,strides:d,beginMask:l,endMask:h,ellipsisMask:f,newAxisMask:m,shrinkAxisMask:y};return r.a.runKernel(o.Rc,x,v)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(275),l=n(337);const h=Object(d.a)({scatterND_:function(e,t,n){const d=Object(c.a)(e,"indices","scatterND","int32"),h=Object(c.a)(t,"updates","scatterND");l.b(h,d,n);const f={indices:d,updates:h},m={shape:n};return r.a.runKernel(o.wc,f,m)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({gatherND_:function(e,t){const n=Object(c.a)(t,"indices","gatherND","int32"),d={params:Object(c.a)(e,"x","gatherND","string_or_numeric"),indices:n};return r.a.runKernel(o.mb,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({mirrorPad_:function(e,t,n){d.b("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const l=Object(c.a)(e,"x","mirrorPad");if(0===l.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");d.b(t.length===l.rank,(()=>`Padding doesn't match input. Must be ${l.rank}. Got ${t.length}.`));const h="reflect"===n?1:0;for(let i=0;i<l.rank;i++)d.b(2===t[i].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),d.b(t[i][0]>=0&&t[i][0]<=l.shape[i]-h&&t[i][1]>=0&&t[i][1]<=l.shape[i]-h,(()=>`Padding in dimension ${i} cannot be greater than or equal to ${l.shape[i]-h} or less than 0 for input of shape ${l.shape}`));const f={paddings:t,mode:n},m={x:l};return r.a.runKernel(o.Rb,m,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({pad_:function(e,t,n=0){const d=Object(c.a)(e,"x","pad");if(0===d.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const l={paddings:t,constantValue:n},h={x:d};return r.a.runKernel(o.dc,h,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({spaceToBatchND_:function(e,t,n){const l=Object(c.a)(e,"x","spaceToBatchND");d.b(l.rank>=1+t.length,(()=>`input rank ${l.rank} should be > than [blockShape] ${t.length}`)),d.b(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),d.b(l.shape.reduce(((a,b,i)=>i>0&&i<=t.length?a&&(b+n[i-1][0]+n[i-1][1])%t[i-1]==0:a),!0),(()=>`input spatial dimensions ${l.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const h={x:l},f={blockShape:t,paddings:n};return r.a.runKernel(o.Gc,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({batchToSpaceND_:function(e,t,n){const l=Object(c.a)(e,"x","batchToSpaceND"),h=t.reduce(((a,b)=>a*b));d.b(l.rank>=1+t.length,(()=>`input rank is ${l.rank} but should be > than blockShape.length ${t.length}`)),d.b(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),d.b(l.shape[0]%h==0,(()=>`input tensor batch is ${l.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${h}`));const f={x:l},m={blockShape:t,crops:n};return r.a.runKernel(o.t,f,m)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(275);const h=Object(l.a)({depthToSpace_:function(e,t,n="NHWC"){const l=Object(c.a)(e,"x","depthToSpace"),h="NHWC"===n?l.shape[1]:l.shape[2],f="NHWC"===n?l.shape[2]:l.shape[3],m="NHWC"===n?l.shape[3]:l.shape[1];d.b(h*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${h} and ${t}  for depthToSpace with input shape\n    ${l.shape}`)),d.b(f*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${f} and ${t} for depthToSpace with input shape\n        ${l.shape}`)),d.b(m%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${m} for depthToSpace with input shape ${l.shape}`));const y={x:l},x={blockSize:t,dataFormat:n};return r.a.runKernel(o.N,y,x)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278),c=n(276),d=n(275);const l=Object(d.a)({broadcastArgs_:function(e,t){const n=Object(c.a)(e,"s0","broadcastArgs","int32"),d=Object(c.a)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==d.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${d.rank}`);const l={s0:n,s1:d};return r.a.runKernel(o.v,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(274),o=n(305);function c(e,t,n="float32"){if("complex64"===n){const n=c(e,t,"float32"),r=c(e,t,"float32");return Object(o.a)({inputs:{real:n,imag:r},backend:e})}const d=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(t),n);return e.makeTensorInfo(t,n,d)}},,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return o.a})),n.d(t,"b",(function(){return c.a})),n.d(t,"c",(function(){return d.a})),n.d(t,"d",(function(){return l.a})),n.d(t,"e",(function(){return h.a})),n.d(t,"f",(function(){return m})),n.d(t,"g",(function(){return div.a})),n.d(t,"h",(function(){return y.a})),n.d(t,"k",(function(){return x.a})),n.d(t,"l",(function(){return v.a})),n.d(t,"m",(function(){return O.a})),n.d(t,"n",(function(){return w.a})),n.d(t,"o",(function(){return k.a})),n.d(t,"q",(function(){return I.a})),n.d(t,"r",(function(){return N.a})),n.d(t,"t",(function(){return sub.a})),n.d(t,"u",(function(){return S.a})),n.d(t,"v",(function(){return T.a})),n.d(t,"w",(function(){return E})),n.d(t,"x",(function(){return A.a})),n.d(t,"y",(function(){return R.a})),n.d(t,"j",(function(){return ft})),n.d(t,"i",(function(){return r})),n.d(t,"p",(function(){return mt})),n.d(t,"s",(function(){return bt}));var r={};n.r(r),n.d(r,"conv2d",(function(){return X})),n.d(r,"depthwiseConv2d",(function(){return J})),n.d(r,"matMul",(function(){return te}));var o=n(299),c=n(310),d=n(291),l=n(318),h=n(311),f=n(275);const m=Object(f.a)({concat2d_:function(e,t){return Object(h.a)(e,t)}});var div=n(304),y=n(370),x=n(290),v=n(281),O=n(293),w=n(371),k=n(312),I=n(372),N=n(330),sub=n(292),S=n(345),T=n(313),$=n(276),j=n(326),C=n(329);function E(e,t,n){if(Object(j.d)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object($.c)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(C.a)(e,t,r,n)}var A=n(346),R=n(331),F=n(349),_=n(347),D=n(348),M=n(373),P=n(277),W=n(295),L=n(278),B=n(283),z=n(288),V=n(360);const U=Object(f.a)({conv2DBackpropFilter_:function(e,t,n,r,o,c="NHWC",d){let l=e;3===e.rank&&(l=Object(v.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=Object(v.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),j.b(4===l.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${l.shape}.`)),j.b(4===h.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${h.shape}.`)),j.b(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const f="NHWC"===c?l.shape[3]:l.shape[1],m="NHWC"===c?h.shape[3]:h.shape[1];j.b(f===n[2],(()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${n[2]}.`)),j.b(m===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${n[3]}).`)),null!=d&&j.b(j.v(o),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${d} but got pad ${o}.`));const y={x:l,dy:h},x={strides:r,pad:o,dataFormat:c,dimRoundingMode:d,filterShape:n};return P.a.runKernel(L.D,y,x)}});var G=n(458),H=n(302),K=n(314);const X=Object(f.a)({fusedConv2d_:function({x:e,filter:filter,strides:t,pad:n,dataFormat:r="NHWC",dilations:c=[1,1],dimRoundingMode:d,bias:l,activation:h="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(h=h||"linear",!1===Object(K.d)(P.a.state.gradientDepth,h)){let y=Object(V.a)(e,filter,t,n,r,c,d);return null!=l&&(y=Object(o.a)(y,l)),Object(K.a)(y,h,f,m)}const y=Object($.a)(e,"x","conv2d"),x=Object($.a)(filter,"filter","conv2d");let O=y,w=!1;3===y.rank&&(w=!0,O=Object(v.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),j.b(4===O.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${O.rank}.`)),j.b(4===x.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${x.rank}.`)),null!=d&&j.b(j.v(n),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${n}.`)),j.b(O.shape[3]===x.shape[2],(()=>`Error in conv2d: depth of input (${O.shape[3]}) must match input depth for filter ${x.shape[2]}.`)),j.b(H.h(t,c),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${c}'`)),j.b("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const k=H.a(O.shape,x.shape,t,c,n,d);let I,N;null!=l&&(I=Object($.a)(l,"bias","fused conv2d"),[I]=Object(B.b)(I,y),z.a(k.outShape,I.shape)),null!=f&&(N=Object($.a)(f,"prelu weights","fused conv2d"));const S=(e,r)=>{const[o,d,l,f]=r,m=Object(K.c)(e,l,h);j.b(H.i(c),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${c}'`));const y=[Object(G.a)(d.shape,m,o,t,n),U(d,m,o.shape,t,n)];if(null!=f){const e=Object(K.b)(f,m);y.push(e)}return y},T={x:O,filter:x,bias:I,preluActivationWeights:N},C={strides:t,pad:n,dataFormat:r,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:m};if(null==l){const e=Object(W.a)(((e,filter,t)=>{let n=P.a.runKernel(L.kb,T,C);return t([filter,e,n]),w&&(n=Object(v.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:S}}));return e(O,x)}{const e=Object(W.a)(((e,filter,t,n)=>{let r=P.a.runKernel(L.kb,T,C);return n([filter,e,r,t]),w&&(r=Object(v.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:S}}));return e(O,x,I)}}});var Y=n(396);const Z=Object(f.a)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,o,c=[1,1],d){let l=e;3===e.rank&&(l=Object(v.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=Object(v.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const f={x:l,dy:h},m={strides:r,pad:o,dimRoundingMode:d,dilations:c,filterShape:n};return P.a.runKernel(L.P,f,m)}});const Q=Object(f.a)({depthwiseConv2dNativeBackpropInput_:function(e,t,filter,n,r,o=[1,1],c){let d=t,l=!1;3===t.rank&&(l=!0,d=Object(v.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h={dy:d,filter:filter},f={strides:n,pad:r,dimRoundingMode:c,dilations:o,inputShape:e},m=P.a.runKernel(L.Q,h,f);return l?Object(v.a)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const J=Object(f.a)({fusedDepthwiseConv2d_:function({x:e,filter:filter,strides:t,pad:n,dataFormat:r="NHWC",dilations:c=[1,1],dimRoundingMode:d,bias:l,activation:h="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(!1===Object(K.d)(P.a.state.gradientDepth,h)){let y=Object(Y.a)(e,filter,t,n,r,c,d);return null!=l&&(y=Object(o.a)(y,l)),Object(K.a)(y,h,f,m)}const y=Object($.a)(e,"x","depthwiseConv2d"),x=Object($.a)(filter,"filter","depthwiseConv2d");let O=y,w=!1;3===y.rank&&(w=!0,O=Object(v.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),j.b(4===O.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${O.rank}.`)),j.b(4===x.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${x.rank}.`)),j.b(O.shape[3]===x.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${O.shape[3]}) must match the inChannels dimension in filter ${x.shape[2]}.`)),null==c&&(c=[1,1]),j.b(H.h(t,c),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${c}'`)),null!=d&&j.b(j.v(n),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${d} but got pad ${n}.`));const k=H.a(O.shape,x.shape,t,c,n,d,!0);let I,N;null!=l&&(I=Object($.a)(l,"bias","fused conv2d"),[I]=Object(B.b)(I,y),z.a(k.outShape,I.shape)),null!=f&&(N=Object($.a)(f,"prelu weights","fused depthwiseConv2d"));const S=(e,r)=>{j.b(H.i(c),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${c}'`));const[o,l,f,m]=r,y=Object(K.c)(e,f,h),x=Q(l.shape,y,o,t,n,c,d),v=Z(l,y,o.shape,t,n,c,d);if(null!=m){return[x,v,Object(K.b)(I,y)]}return[x,v]},T={x:O,filter:x,bias:I,preluActivationWeights:N},C={strides:t,pad:n,dataFormat:r,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:m};if(null==l){const e=Object(W.a)(((e,filter,t)=>{let n=P.a.runKernel(L.lb,T,C);return t([filter,e,n]),w&&(n=Object(v.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:S}}));return e(O,x)}{const e=Object(W.a)(((e,filter,t,n)=>{let r=P.a.runKernel(L.lb,T,C);return n([filter,e,r,t]),w&&(r=Object(v.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:S}}));return e(O,x,I)}}});var ee=n(359);const te=Object(f.a)({fusedMatMul_:function({a:a,b:b,transposeA:e=!1,transposeB:t=!1,bias:n,activation:r="linear",preluActivationWeights:c,leakyreluAlpha:d}){if(!1===Object(K.d)(P.a.state.gradientDepth,r)){let l=Object(ee.a)(a,b,e,t);return null!=n&&(l=Object(o.a)(l,n)),Object(K.a)(l,r,c,d)}let l=Object($.a)(a,"a","fused matMul"),h=Object($.a)(b,"b","fused matMul");[l,h]=Object(B.b)(l,h);const f=e?l.shape[l.rank-2]:l.shape[l.rank-1],m=t?h.shape[h.rank-1]:h.shape[h.rank-2],y=e?l.shape[l.rank-1]:l.shape[l.rank-2],x=t?h.shape[h.rank-2]:h.shape[h.rank-1],O=l.shape.slice(0,-2),w=h.shape.slice(0,-2),k=j.O(O),I=j.O(w);j.b(l.rank>=2&&h.rank>=2&&l.rank===h.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${h.rank}.`)),j.b(j.a(O,w),(()=>`Error in fused matMul: outer dimensions (${O}) and (${w}) of Tensors with shapes ${l.shape} and ${h.shape} must match.`)),j.b(f===m,(()=>`Error in fused matMul: inner shapes (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${h.shape} and transposeA=${e} and transposeB=${t} must match.`));const N=l.shape.slice(0,-2).concat([y,x]),S=e?Object(v.a)(l,[k,f,y]):Object(v.a)(l,[k,y,f]),T=t?Object(v.a)(h,[I,x,m]):Object(v.a)(h,[I,m,x]);let C,E;null!=n&&(C=Object($.a)(n,"bias","fused matMul"),[C]=Object(B.b)(C,l),z.a(N,C.shape)),null!=c&&(E=Object($.a)(c,"prelu weights","fused matMul"));const A=(o,c)=>{const[d,l,h,f]=c,m=Object(K.c)(Object(v.a)(o,h.shape),h,r);let y,x;if(e||t?!e&&t?(y=Object(ee.a)(m,l,!1,!1),x=Object(ee.a)(m,d,!0,!1)):e&&!t?(y=Object(ee.a)(l,m,!1,!0),x=Object(ee.a)(d,m,!1,!1)):(y=Object(ee.a)(l,m,!0,!0),x=Object(ee.a)(m,d,!0,!0)):(y=Object(ee.a)(m,l,!1,!0),x=Object(ee.a)(d,m,!0,!1)),null!=n){return[y,x,Object(K.b)(f,m)]}return[y,x]},R={a:S,b:T,bias:C,preluActivationWeights:E},F={transposeA:e,transposeB:t,activation:r,leakyreluAlpha:d};if(null==n){const e=Object(W.a)(((e,t,n)=>{const r=P.a.runKernel(L.hd,R,F);return n([e,t,r]),{value:Object(v.a)(r,N),gradFunc:A}}));return e(S,T)}{const e=Object(W.a)(((e,t,n,r)=>{const o=P.a.runKernel(L.hd,R,F);return r([e,t,o,n]),{value:Object(v.a)(o,N),gradFunc:A}}));return e(S,T,C)}}});function ne(e,a,b){const t=1-e%2,n=new Float32Array(e);for(let i=0;i<e;++i){const r=2*Math.PI*i/(e+t-1);n[i]=a-b*Math.cos(r)}return Object(T.a)(n,"float32")}Object(f.a)({hammingWindow_:function(e){return ne(e,.54,.46)}});const re=Object(f.a)({hannWindow_:function(e){return ne(e,.5,.5)}});var ae=n(353);const se=Object(f.a)({frame_:function(e,t,n,r=!1,o=0){let c=0;const output=[];for(;c+t<=e.size;)output.push(Object(k.a)(e,c,t)),c+=n;if(r)for(;c<e.size;){const r=c+t-e.size,d=Object(h.a)([Object(k.a)(e,c,t-r),Object(ae.a)([r],o)]);output.push(d),c+=n}return 0===output.length?E([],[0,t]):Object(v.a)(Object(h.a)(output),[output.length,t])}});Object(f.a)({stft_:function(e,t,n,r,o=re){var c;null==r&&(c=t,r=Math.floor(Math.pow(2,Math.ceil(Math.log(c)/Math.log(2)))));const d=se(e,t,n),l=Object(x.a)(d,o(t));return Object(F.a)(l,r)}});const oe=Object(f.a)({cropAndResize_:function(image,e,t,n,r="bilinear",o=0){const c=Object($.a)(image,"image","cropAndResize"),d=Object($.a)(e,"boxes","cropAndResize","float32"),l=Object($.a)(t,"boxInd","cropAndResize","int32"),h=d.shape[0];j.b(4===c.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${c.rank}.`)),j.b(2===d.rank&&4===d.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${d.shape}.`)),j.b(1===l.rank&&l.shape[0]===h,(()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${d.shape}.`)),j.b(2===n.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`)),j.b(n[0]>=1&&n[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${n}`)),j.b("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const f={image:c,boxes:d,boxInd:l},m={method:r,extrapolationValue:o,cropSize:n};return P.a.runKernel(L.K,f,m)}});const ie=Object(f.a)({flipLeftRight_:function(image){const e=Object($.a)(image,"image","flipLeftRight","float32");j.b(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const t={image:e};return P.a.runKernel(L.fb,t,{})}});var ce=n(354);const ue=Object(f.a)({grayscaleToRGB_:function(image){const e=Object($.a)(image,"image","grayscaleToRGB"),t=e.rank-1,n=e.shape[t];j.b(e.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`)),j.b(1===n,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`));const r=new Array(e.rank);return r.fill(1,0,t),r[t]=3,Object(ce.a)(e,r)}});const de=Object(f.a)({rotateWithOffset_:function(image,e,t=0,n=.5){const r=Object($.a)(image,"image","rotateWithOffset","float32");j.b(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const o={image:r},c={radians:e,fillValue:t,center:n};return P.a.runKernel(L.tc,o,c)}});function le(e,t,n,r,o,c){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==c&&(c=0);const d=e.shape[0];return n=Math.min(n,d),j.b(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),j.b(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),j.b(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),j.b(1===t.rank,(()=>"scores must be a 1D tensor")),j.b(t.shape[0]===d,(()=>`scores has incompatible shape with boxes. Expected ${d}, but was ${t.shape[0]}`)),j.b(0<=c&&c<=1,(()=>`softNmsSigma must be in [0, 1], but was '${c}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:c}}const pe=Object(f.a)({nonMaxSuppression_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object($.a)(e,"boxes","nonMaxSuppression"),d=Object($.a)(t,"scores","nonMaxSuppression"),l=le(c,d,n,r,o),h={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:o=l.scoreThreshold};return P.a.runKernel(L.Wb,{boxes:c,scores:d},h)}});var he=n(317);const fe=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object($.a)(e,"boxes","nonMaxSuppressionAsync"),d=Object($.a)(t,"scores","nonMaxSuppressionAsync"),l=le(c,d,n,r,o);n=l.maxOutputSize,r=l.iouThreshold,o=l.scoreThreshold;const h=await Promise.all([c.data(),d.data()]),f=h[0],m=h[1],{selectedIndices:y}=Object(he.a)(f,m,n,r,o);return c!==e&&c.dispose(),d!==t&&d.dispose(),Object(T.a)(y,"int32")};const me=Object(f.a)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const d=Object($.a)(e,"boxes","nonMaxSuppression"),l=Object($.a)(t,"scores","nonMaxSuppression"),h=le(d,l,n,r,o,c),f={boxes:d,scores:l},m={maxOutputSize:n=h.maxOutputSize,iouThreshold:r=h.iouThreshold,scoreThreshold:o=h.scoreThreshold,softNmsSigma:c=h.softNmsSigma},y=P.a.runKernel(L.Yb,f,m);return{selectedIndices:y[0],selectedScores:y[1]}}});const be=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const d=Object($.a)(e,"boxes","nonMaxSuppressionAsync"),l=Object($.a)(t,"scores","nonMaxSuppressionAsync"),h=le(d,l,n,r,o,c);n=h.maxOutputSize,r=h.iouThreshold,o=h.scoreThreshold,c=h.softNmsSigma;const f=await Promise.all([d.data(),l.data()]),m=f[0],y=f[1],{selectedIndices:x,selectedScores:v}=Object(he.c)(m,y,n,r,o,c);return d!==e&&d.dispose(),l!==t&&l.dispose(),{selectedIndices:Object(T.a)(x,"int32"),selectedScores:Object(T.a)(v)}};const ge=Object(f.a)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const d=Object($.a)(e,"boxes","nonMaxSuppression"),l=Object($.a)(t,"scores","nonMaxSuppression"),h=le(d,l,n,r,o,null),f={boxes:d,scores:l},m={maxOutputSize:h.maxOutputSize,iouThreshold:h.iouThreshold,scoreThreshold:h.scoreThreshold,padToMaxOutputSize:c},y=P.a.runKernel(L.Xb,f,m);return{selectedIndices:y[0],validOutputs:y[1]}}});const ye=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const d=Object($.a)(e,"boxes","nonMaxSuppressionAsync"),l=Object($.a)(t,"scores","nonMaxSuppressionAsync"),h=le(d,l,n,r,o,null),f=h.maxOutputSize,m=h.iouThreshold,y=h.scoreThreshold,[x,v]=await Promise.all([d.data(),l.data()]),{selectedIndices:w,validOutputs:k}=Object(he.b)(x,v,f,m,y,c);return d!==e&&d.dispose(),l!==t&&l.dispose(),{selectedIndices:Object(T.a)(w,"int32"),validOutputs:Object(O.a)(k,"int32")}};const xe=Object(f.a)({resizeBilinear_:function(e,t,n=!1,r=!1){const o=Object($.a)(e,"images","resizeBilinear");j.b(3===o.rank||4===o.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`)),j.b(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),j.b(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=o,d=!1;3===o.rank&&(d=!0,c=Object(v.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const[]=t,l={images:c},h={alignCorners:n,halfPixelCenters:r,size:t},f=P.a.runKernel(L.oc,l,h);return d?Object(v.a)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ve=Object(f.a)({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const o=Object($.a)(e,"images","resizeNearestNeighbor");j.b(3===o.rank||4===o.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`)),j.b(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),j.b("float32"===o.dtype||"int32"===o.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),j.b(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=o,d=!1;3===o.rank&&(d=!0,c=Object(v.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const[]=t,l={images:c},h={alignCorners:n,halfPixelCenters:r,size:t},f=P.a.runKernel(L.qc,l,h);return d?Object(v.a)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});var Oe=n(332),we=n(375),ke=n(355),Ie=n(356),Ne=n(300),Se=n(376),Te=n(319),$e=n(357);const je=Object(f.a)({threshold_:function(image,e="binary",t=!1,n=.5){const r=Object($.a)(image,"image","threshold"),c=r.shape[0]*r.shape[1];let l,g,b,h,f=Object(x.a)(Object(T.a)([n]),255);if(j.b(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),j.b(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),j.b("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),j.b("otsu"===e||"binary"===e,(()=>`Method must be binary or otsu, but was ${e}`)),3===r.shape[2]){[l,g,b]=Object(Oe.a)(r,[1,1,1],-1);const e=Object(x.a)(l,.2989),t=Object(x.a)(g,.587),n=Object(x.a)(b,.114);h=Object(o.a)(Object(o.a)(e,t),n)}else h=image;if("otsu"===e){f=function(e,t){let n,r,c,d,l,h,f=Object(T.a)([-1]),m=Object(T.a)([0]),y=Object(T.a)([0]);for(let v=0;v<e.size-1;v++){n=Object(k.a)(e,0,v+1),r=Object(k.a)(e,v+1),l=Object(div.a)(Object(Ne.a)(n),t),h=Object(div.a)(Object(Ne.a)(r),t);const O=Object(Ne.a)(Object(x.a)(n,Object($e.a)(0,n.size)));c=Object(div.a)(O,Object(Ne.a)(n));const w=Object(ae.a)(r.shape,n.size),I=Object(o.a)(Object($e.a)(0,r.size),w),N=Object(x.a)(r,I);d=Object(div.a)(Object(Ne.a)(N),Object(Ne.a)(r));const S=Object(sub.a)(c,d),$=Object(sub.a)(c,d),j=Object(x.a)(l,h);y=Object(x.a)(Object(x.a)(j,S),$);const C=Object(Ie.a)(y,m);m=Object(Te.a)(C,y,m),f=Object(Te.a)(C,Object(T.a)([v]),f)}return f}(Object(we.a)(Object(d.a)(Object(Se.a)(h),"int32"),Object(S.a)([]),256),c)}const m=t?Object(ke.a)(h,f):Object(Ie.a)(h,f);return Object(d.a)(Object(x.a)(m,255),"int32")}});const Ce=Object(f.a)({transform_:function(image,e,t="nearest",n="constant",r=0,o){const c=Object($.a)(image,"image","transform","float32"),d=Object($.a)(e,"transforms","transform","float32");j.b(4===c.rank,(()=>`Error in transform: image must be rank 4,but got rank ${c.rank}.`)),j.b(2===d.rank&&(d.shape[0]===c.shape[0]||1===d.shape[0])&&8===d.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),j.b(null==o||2===o.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`));const l={image:c,transforms:d},h={interpolation:t,fillMode:n,fillValue:r,outputShape:o};return P.a.runKernel(L.bd,l,h)}});var Ee=n(379),Ae=n(378);Object(f.a)({bandPart_:function(a,e,t){Object(j.b)(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),Object(j.b)(t%1==0,(()=>`bandPart(): numUpper must be an integer, got ${t}.`));const n=Object($.a)(a,"a","bandPart");Object(j.b)(n.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${n.rank}.`));const r=n.shape,[o,c]=n.shape.slice(-2);if(!(e<=o))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${o}).`);if(!(t<=c))throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${c}).`);e<0&&(e=o),t<0&&(t=c);const i=Object(v.a)(Object($e.a)(0,o,1,"int32"),[-1,1]),d=Object($e.a)(0,c,1,"int32"),l=Object(sub.a)(i,d),h=Object(Ae.a)(Object(ke.a)(l,Object(O.a)(+e,"int32")),Object(Ee.a)(l,Object(O.a)(-t,"int32"))),f=Object(R.a)([o,c],n.dtype);return Object(v.a)(Object(N.a)(Object(A.a)(Object(v.a)(n,[-1,o,c])).map((e=>Object(Te.a)(h,e,f)))),r)}});var Re=n(320),Fe=n(333),_e=n(334),De=n(380),Me=n(382),Pe=n(381),We=n(358);function Le(e,p,t=null){if(0===e.rank)return Object(Re.a)(e);if(1!==e.rank&&null===t)return Le(Object(v.a)(e,[-1]),p,t);if(1===e.rank||"number"==typeof t||Array.isArray(t)&&1===t.length){if(1===p)return Object(Ne.a)(Object(Re.a)(e),t);if(p===1/0)return Object(_e.a)(Object(Re.a)(e),t);if(p===-1/0)return Object(De.a)(Object(Re.a)(e),t);if("euclidean"===p||2===p)return Object(Pe.a)(Object(Ne.a)(Object(Me.a)(Object(Re.a)(e),Object(O.a)(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${p}`)}if(Array.isArray(t)&&2===t.length){if(1===p)return Object(_e.a)(Object(Ne.a)(Object(Re.a)(e),t[0]),t[1]-1);if(p===1/0)return Object(_e.a)(Object(Ne.a)(Object(Re.a)(e),t[1]),t[0]);if(p===-1/0)return Object(De.a)(Object(Ne.a)(Object(Re.a)(e),t[1]),t[0]);if("fro"===p||"euclidean"===p)return Object(Pe.a)(Object(Ne.a)(Object(We.a)(e),t));throw new Error(`Error in norm: invalid ord value: ${p}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}const Be=Object(f.a)({norm_:function(e,t="euclidean",n=null,r=!1){const o=Le(e=Object($.a)(e,"x","norm"),t,n);let c=o.shape;if(r){const t=Object(j.I)(n,e.shape);c=Fe.e(o.shape,t)}return Object(v.a)(o,c)}});Object(f.a)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Object(j.b)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let i=1;i<e.length;++i)Object(j.b)(e[i].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[i].shape[0]} vs. ${n})`))}else t=!0,e=Object(Oe.a)(e,e.shape[0],0).map((e=>Object(I.a)(e,[0])));Object(j.b)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let i=0;i<e.length;++i)n.push(P.a.tidy((()=>{let e=r[i];if(i>0)for(let t=0;t<i;++t){const r=Object(x.a)(Object(Ne.a)(Object(x.a)(n[t],e)),n[t]);e=Object(sub.a)(e,r)}return Object(div.a)(e,Be(e,"euclidean"))})));return t?Object(N.a)(n,0):n}});var ze=n(384);const Ve=Object(f.a)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const o=Object(c.a)([e,t],r),d=e<=t?e:t;for(let i=0;i<d;++i)o.set(1,i,i);const l=Object(v.a)(o.toTensor(),[e,t]);if(null==n)return l;if(1===n.length)return Object(ce.a)(Object(y.a)(l,0),[n[0],1,1]);if(2===n.length)return Object(ce.a)(Object(y.a)(Object(y.a)(l,0),0),[n[0],n[1],1,1]);if(3===n.length)return Object(ce.a)(Object(y.a)(Object(y.a)(Object(y.a)(l,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Ue=n(321),Ge=n(383);function He(e,t=!1){return P.a.tidy((()=>{Object(j.b)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let q=Ve(n),o=Object(l.a)(e);const c=E([[1]],[1,1]);let d=Object(l.a)(c);const f=n>=r?r:n;for(let e=0;e<f;++e){const t=o,f=d,m=q;[d,o,q]=P.a.tidy((()=>{const t=Object(k.a)(o,[e,e],[n-e,1]),f=Be(t),m=Object(k.a)(o,[e,e],[1,1]),s=Object(Te.a)(Object(Ie.a)(m,0),E([[-1]]),E([[1]])),y=Object(sub.a)(m,Object(x.a)(s,f)),v=Object(div.a)(t,y);d=1===v.shape[0]?Object(l.a)(c):Object(h.a)([c,Object(k.a)(v,[1,0],[v.shape[0]-1,v.shape[1]])],0);const O=Object(Ue.a)(Object(div.a)(Object(ee.a)(s,y),f)),w=Object(k.a)(o,[e,0],[n-e,r]),I=Object(x.a)(O,d),N=Object(Ge.a)(d);if(0===e)o=Object(sub.a)(w,Object(ee.a)(I,Object(ee.a)(N,w)));else{const t=Object(sub.a)(w,Object(ee.a)(I,Object(ee.a)(N,w)));o=Object(h.a)([Object(k.a)(o,[0,0],[e,r]),t],0)}const S=Object(Ge.a)(I),T=Object(k.a)(q,[0,e],[n,q.shape[1]-e]);if(0===e)q=Object(sub.a)(T,Object(ee.a)(Object(ee.a)(T,d),S));else{const t=Object(sub.a)(T,Object(ee.a)(Object(ee.a)(T,d),S));q=Object(h.a)([Object(k.a)(q,[0,0],[n,e]),t],1)}return[d,o,q]})),Object(ze.a)([t,f,m])}return!t&&n>r&&(q=Object(k.a)(q,[0,0],[n,r]),o=Object(k.a)(o,[0,0],[r,r])),[q,o]}))}Object(f.a)({qr_:function(e,t=!1){if(Object(j.b)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return He(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Object(A.a)(Object(v.a)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),o=[],c=[];r.forEach((e=>{const[n,r]=He(e,t);o.push(n),c.push(r)}));return[Object(v.a)(Object(N.a)(o,0),e.shape),Object(v.a)(Object(N.a)(c,0),e.shape)]}}});var Ke=n(301),qe=n(385),Xe=n(387),Ye=n(386);const Ze=Object(f.a)({computeWeightedLoss_:function(e,t,n=Ke.a.SUM_BY_NONZERO_WEIGHTS){const r=Object($.a)(e,"losses","computeWeightedLoss");let o=null;null!=t&&(o=Object($.a)(t,"weights","computeWeightedLoss"));const c=null==o?r:Object(x.a)(r,o);if(n===Ke.a.NONE)return c;if(n===Ke.a.SUM)return Object(Ne.a)(c);if(n===Ke.a.MEAN){if(null==o)return Object(qe.a)(c);{const e=r.size/o.size,t=Object(div.a)(Object(Ne.a)(c),Object(Ne.a)(o));return e>1?Object(div.a)(t,Object(O.a)(e)):t}}if(n===Ke.a.SUM_BY_NONZERO_WEIGHTS){if(null==o)return Object(div.a)(Object(Ne.a)(c),Object(O.a)(r.size));{const e=Object(x.a)(o,Object(Ye.a)(r.shape)),t=Object(d.a)(Object(Ne.a)(Object(Xe.a)(e,Object(O.a)(0))),"float32");return Object(div.a)(Object(Ne.a)(c),t)}}throw Error(`Unknown reduction: ${n}`)}});Object(f.a)({absoluteDifference_:function(e,t,n,r=Ke.a.SUM_BY_NONZERO_WEIGHTS){const o=Object($.a)(e,"labels","absoluteDifference"),c=Object($.a)(t,"predictions","absoluteDifference");let d=null;null!=n&&(d=Object($.a)(n,"weights","absoluteDifference")),Object(j.e)(o.shape,c.shape,"Error in absoluteDifference: ");const l=Object(Re.a)(Object(sub.a)(o,c));return Ze(l,d,r)}});Object(f.a)({cosineDistance_:function(e,t,n,r,o=Ke.a.SUM_BY_NONZERO_WEIGHTS){const c=Object($.a)(e,"labels","cosineDistance"),d=Object($.a)(t,"predictions","cosineDistance");let l=null;null!=r&&(l=Object($.a)(r,"weights","cosineDistance")),Object(j.e)(c.shape,d.shape,"Error in cosineDistance: ");const h=Object(O.a)(1),f=Object(sub.a)(h,Object(Ne.a)(Object(x.a)(c,d),n,!0));return Ze(f,l,o)}});var Qe=n(335);Object(f.a)({hingeLoss_:function(e,t,n,r=Ke.a.SUM_BY_NONZERO_WEIGHTS){let o=Object($.a)(e,"labels","hingeLoss");const c=Object($.a)(t,"predictions","hingeLoss");let d=null;null!=n&&(d=Object($.a)(n,"weights","hingeLoss")),Object(j.e)(o.shape,c.shape,"Error in hingeLoss: ");const l=Object(O.a)(1);o=Object(sub.a)(Object(x.a)(Object(O.a)(2),o),l);const h=Object(Qe.a)(Object(sub.a)(l,Object(x.a)(o,c)));return Ze(h,d,r)}});var Je=n(388);Object(f.a)({huberLoss_:function(e,t,n,r=1,c=Ke.a.SUM_BY_NONZERO_WEIGHTS){const d=Object($.a)(e,"labels","huberLoss"),l=Object($.a)(t,"predictions","huberLoss");let h=null;null!=n&&(h=Object($.a)(n,"weights","huberLoss")),Object(j.e)(d.shape,l.shape,"Error in huberLoss: ");const f=Object(O.a)(r),m=Object(Re.a)(Object(sub.a)(l,d)),y=Object(Je.a)(m,f),v=Object(sub.a)(m,y),w=Object(o.a)(Object(x.a)(Object(O.a)(.5),Object(We.a)(y)),Object(x.a)(f,v));return Ze(w,h,c)}});var et=n(336);Object(f.a)({logLoss_:function(e,t,n,r=1e-7,c=Ke.a.SUM_BY_NONZERO_WEIGHTS){const d=Object($.a)(e,"labels","logLoss"),l=Object($.a)(t,"predictions","logLoss");let h=null;null!=n&&(h=Object($.a)(n,"weights","logLoss")),Object(j.e)(d.shape,l.shape,"Error in logLoss: ");const f=Object(O.a)(1),m=Object(O.a)(r),y=Object(Ue.a)(Object(x.a)(d,Object(et.a)(Object(o.a)(l,m)))),v=Object(x.a)(Object(sub.a)(f,d),Object(et.a)(Object(o.a)(Object(sub.a)(f,l),m))),w=Object(sub.a)(y,v);return Ze(w,h,c)}});var tt=n(389);Object(f.a)({meanSquaredError_:function(e,t,n,r=Ke.a.SUM_BY_NONZERO_WEIGHTS){const o=Object($.a)(e,"labels","meanSquaredError"),c=Object($.a)(t,"predictions","meanSquaredError");let d=null;null!=n&&(d=Object($.a)(n,"weights","meanSquaredError")),Object(j.e)(o.shape,c.shape,"Error in meanSquaredError: ");const l=Object(tt.a)(o,c);return Ze(l,d,r)}});var nt=n(322),at=n(390);Object(f.a)({sigmoidCrossEntropy_:function(e,t,n,r=0,c=Ke.a.SUM_BY_NONZERO_WEIGHTS){let d=Object($.a)(e,"multiClassLabels","sigmoidCrossEntropy");const l=Object($.a)(t,"logits","sigmoidCrossEntropy");let h=null;if(null!=n&&(h=Object($.a)(n,"weights","sigmoidCrossEntropy")),Object(j.e)(d.shape,l.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Object(O.a)(r),t=Object(O.a)(1),n=Object(O.a)(.5);d=Object(o.a)(Object(x.a)(d,Object(sub.a)(t,e)),Object(x.a)(n,e))}const f=function(e,t){const n=Object($.a)(e,"labels","sigmoidCrossEntropyWithLogits"),r=Object($.a)(t,"logits","sigmoidCrossEntropyWithLogits");Object(j.e)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const c=Object(Qe.a)(r),d=Object(x.a)(r,n),l=Object(at.a)(Object(nt.a)(Object(Ue.a)(Object(Re.a)(r))));return Object(o.a)(Object(sub.a)(c,d),l)}(d,l);return Ze(f,h,c)}});const st=Object(f.a)({logSumExp_:function(e,t=null,n=!1){const r=Object($.a)(e,"x","logSumExp"),c=Object(j.I)(t,r.shape),d=Object(_e.a)(r,c,!0),a=Object(sub.a)(r,d),b=Object(nt.a)(a),l=Object(Ne.a)(b,c),h=Object(et.a)(l),f=Object(o.a)(Object(v.a)(d,h.shape),h);if(n){const e=Object(Fe.e)(f.shape,c);return Object(v.a)(f,e)}return f}});Object(f.a)({softmaxCrossEntropy_:function(e,t,n,r=0,c=Ke.a.SUM_BY_NONZERO_WEIGHTS){let l=Object($.a)(e,"onehotLabels","softmaxCrossEntropy");const h=Object($.a)(t,"logits","softmaxCrossEntropy");let f=null;if(null!=n&&(f=Object($.a)(n,"weights","softmaxCrossEntropy")),Object(j.e)(l.shape,h.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Object(O.a)(r),t=Object(O.a)(1),n=Object(O.a)(l.shape[1]);l=Object(o.a)(Object(x.a)(l,Object(sub.a)(t,e)),Object(div.a)(e,n))}const m=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Object(W.a)(((e,t,r)=>{const o=st(t,[n],!0),c=Object(sub.a)(Object(d.a)(t,"float32"),o);r([e,c]);const l=Object(Ue.a)(Object(x.a)(c,e));return{value:Object(Ne.a)(l,[n]),gradFunc:(e,t)=>{const[r,o]=t,c=Object(Fe.e)(e.shape,[n]);return[Object(x.a)(Object(v.a)(e,c),Object(sub.a)(Object(d.a)(r,"float32"),Object(nt.a)(o))),Object(x.a)(Object(v.a)(e,c),Object(sub.a)(Object(nt.a)(o),Object(d.a)(r,"float32")))]}}}));return r(e,t)}(l,h);return Ze(m,f,c)}});const ot=Object(f.a)({sparseFillEmptyRows_:function(e,t,n,r){const o=Object($.a)(e,"indices","sparseFillEmptyRows"),c=Object($.a)(t,"values","sparseFillEmptyRows"),d=Object($.a)(n,"denseShape","sparseFillEmptyRows"),l=Object($.a)(r,"defaultValue","sparseFillEmptyRows",c.dtype);if(2!==o.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${o.shape}`);if(1!==c.rank)throw new Error(`Values should be Tensor1D but received shape ${c.shape}`);if(1!==d.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${d.shape}`);if(0!==l.rank)throw new Error(`Default value should be a scalar but received shape ${l.shape}`);const h={indices:o,values:c,denseShape:d,defaultValue:l},f=P.a.runKernel(L.Hc,h);return{outputIndices:f[0],outputValues:f[1],emptyRowIndicator:f[2],reverseIndexMap:f[3]}}});const it=Object(f.a)({sparseReshape_:function(e,t,n){const r=Object($.a)(e,"inputIndices","sparseReshape"),o=Object($.a)(t,"inputShape","sparseReshape"),c=Object($.a)(n,"newShape","sparseReshape");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);if(1!==c.rank)throw new Error(`New shape should be Tensor1D but received shape ${c.shape}`);const d={inputIndices:r,inputShape:o,newShape:c},l=P.a.runKernel(L.Ic,d);return{outputIndices:l[0],outputShape:l[1]}}});const ct=Object(f.a)({sparseSegmentMean_:function(data,e,t){const n=Object($.a)(data,"data","sparseSegmentMean"),r=Object($.a)(e,"indices","sparseSegmentMean"),o=Object($.a)(t,"segmentIds","sparseSegmentMean");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);const c={data:n,indices:r,segmentIds:o};return P.a.runKernel(L.Jc,c)}});const ut=Object(f.a)({sparseSegmentSum_:function(data,e,t){const n=Object($.a)(data,"data","sparseSegmentSum"),r=Object($.a)(e,"indices","sparseSegmentSum"),o=Object($.a)(t,"segmentIds","sparseSegmentSum");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);const c={data:n,indices:r,segmentIds:o};return P.a.runKernel(L.Kc,c)}});const lt=Object(f.a)({stringNGrams_:function(data,e,t,n,r,o,c,d){const l=Object($.a)(data,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const h=Object($.a)(e,"dataSplits","stringNGrams");if("int32"!==h.dtype)throw new Error("Data splits must be of datatype int32");const f={separator:t,nGramWidths:n,leftPad:r,rightPad:o,padWidth:c,preserveShortSequences:d},m={data:l,dataSplits:h},y=P.a.runKernel(L.Sc,m,f);return{nGrams:y[0],nGramsSplits:y[1]}}});const pt=Object(f.a)({stringSplit_:function(input,e,t=!0){const n=Object($.a)(input,"input","stringSplit","string"),r=Object($.a)(e,"delimiter","stringSplit","string");if(1!==n.rank)throw new Error(`Input should be Tensor1D but received shape ${n.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const o={skipEmpty:t},c={input:n,delimiter:r},d=P.a.runKernel(L.Tc,c,o);return{indices:d[0],values:d[1],shape:d[2]}}});const ht=Object(f.a)({stringToHashBucketFast_:function(input,e){const t=Object($.a)(input,"input","stringToHashBucketFast","string"),n={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const r={input:t};return P.a.runKernel(L.Uc,r,n)}}),ft=(_.a,D.a,F.a,M.a,{flipLeftRight:ie,grayscaleToRGB:ue,resizeNearestNeighbor:ve,resizeBilinear:xe,rotateWithOffset:de,cropAndResize:oe,nonMaxSuppression:pe,nonMaxSuppressionAsync:fe,nonMaxSuppressionWithScore:me,nonMaxSuppressionWithScoreAsync:be,nonMaxSuppressionPadded:ge,nonMaxSuppressionPaddedAsync:ye,threshold:je,transform:Ce}),mt={sparseFillEmptyRows:ot,sparseReshape:it,sparseSegmentMean:ct,sparseSegmentSum:ut},bt={stringNGrams:lt,stringSplit:pt,stringToHashBucketFast:ht}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(277),o=n(278),c=n(276),d=n(326),l=n(281);var h=n(275);const f=Object(h.a)({batchNorm_:function(e,t,n,h,f,m){null==m&&(m=.001);const y=Object(c.a)(e,"x","batchNorm"),x=Object(c.a)(t,"mean","batchNorm"),v=Object(c.a)(n,"variance","batchNorm");let O,w;null!=f&&(O=Object(c.a)(f,"scale","batchNorm")),null!=h&&(w=Object(c.a)(h,"offset","batchNorm")),d.b(x.rank===v.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),d.b(null==w||x.rank===w.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),d.b(null==O||x.rank===O.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const k=function(e){let t;return t=0===e.rank||1===e.rank?Object(l.a)(e,[1,1,1,e.size]):2===e.rank?Object(l.a)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Object(l.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(y),I={x:k,scale:O,offset:w,mean:x,variance:v},N={varianceEpsilon:m},S=r.a.runKernel(o.jb,I,N);return Object(l.a)(S,y.shape)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(277),o=n(278);var c=n(276),d=n(275);const l=Object(d.a)({sparseToDense_:function(e,t,n,d=0){const l=Object(c.a)(e,"sparseIndices","sparseToDense","int32"),h=Object(c.a)(t,"sparseValues","sparseToDense"),f=Object(c.a)(d,"defaultValue","sparseToDense",h.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const o=e.rank>0?e.shape[0]:1,c=e.rank>1?e.shape[1]:1;if(n.length!==c)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${c}.`);const d=t.size;if(0!==t.rank&&(1!==t.rank||d!==o))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${o}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(l,h,n,f);const m={sparseIndices:l,sparseValues:h,defaultValue:f},y={outputShape:n};return r.a.runKernel(o.Lc,m,y)}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(20),o=n(602),c=n(37),d=n(26),l=n(43),h=n(448);r({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=c(this),n=d(t.length),r=h(t,0);return r.length=o(r,t,t,n,0,void 0===e?1:l(e)),r}})},function(e,t,n){"use strict";var r=n(447),o=n(26),c=n(57),d=function(e,t,source,n,l,h,f,m){for(var element,y=l,x=0,v=!!f&&c(f,m,3);x<n;){if(x in source){if(element=v?v(source[x],x,t):source[x],h>0&&r(element))y=d(e,t,element,o(element.length),y,h-1)-1;else{if(y>=9007199254740991)throw TypeError("Exceed the acceptable array length");e[y]=element}y++}x++}return y};e.exports=d},,,,,,,,,,,,,,,function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function o(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=o;var c={},d={};function l(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=d[e])?r:(n=f(e,(0|e)<0?-1:0,!0),o&&(d[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=c[e])?r:(n=f(e,e<0?-1:0,!1),o&&(c[e]=n),n)}function h(e,t){if(isNaN(e))return t?N:I;if(t){if(e<0)return N;if(e>=O)return C}else{if(e<=-w)return E;if(e+1>=w)return j}return e<0?h(-e,t).neg():f(e%v|0,e/v|0,t)}function f(e,t,n){return new r(e,t,n)}r.fromInt=l,r.fromNumber=h,r.fromBits=f;var m=Math.pow;function y(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return I;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var p;if((p=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===p)return y(e.substring(1),t,n).neg();for(var r=h(m(n,8)),o=I,i=0;i<e.length;i+=8){var c=Math.min(8,e.length-i),d=parseInt(e.substring(i,i+c),n);if(c<8){var l=h(m(n,c));o=o.mul(l).add(h(d))}else o=(o=o.mul(r)).add(h(d))}return o.unsigned=t,o}function x(e,t){return"number"==typeof e?h(e,t):"string"==typeof e?y(e,t):f(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=y,r.fromValue=x;var v=4294967296,O=v*v,w=O/2,k=l(1<<24),I=l(0);r.ZERO=I;var N=l(0,!0);r.UZERO=N;var S=l(1);r.ONE=S;var T=l(1,!0);r.UONE=T;var $=l(-1);r.NEG_ONE=$;var j=f(-1,2147483647,!1);r.MAX_VALUE=j;var C=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=C;var E=f(0,-2147483648,!1);r.MIN_VALUE=E;var A=r.prototype;A.toInt=function(){return this.unsigned?this.low>>>0:this.low},A.toNumber=function(){return this.unsigned?(this.high>>>0)*v+(this.low>>>0):this.high*v+(this.low>>>0)},A.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var t=h(e),div=this.div(t),n=div.mul(t).sub(this);return div.toString(e)+n.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=h(m(e,6),this.unsigned),o=this,c="";;){var d=o.div(r),l=(o.sub(d.mul(r)).toInt()>>>0).toString(e);if((o=d).isZero())return l+c;for(;l.length<6;)l="0"+l;c=""+l+c}},A.getHighBits=function(){return this.high},A.getHighBitsUnsigned=function(){return this.high>>>0},A.getLowBits=function(){return this.low},A.getLowBitsUnsigned=function(){return this.low>>>0},A.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},A.isZero=function(){return 0===this.high&&0===this.low},A.eqz=A.isZero,A.isNegative=function(){return!this.unsigned&&this.high<0},A.isPositive=function(){return this.unsigned||this.high>=0},A.isOdd=function(){return 1==(1&this.low)},A.isEven=function(){return 0==(1&this.low)},A.equals=function(e){return o(e)||(e=x(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},A.eq=A.equals,A.notEquals=function(e){return!this.eq(e)},A.neq=A.notEquals,A.ne=A.notEquals,A.lessThan=function(e){return this.comp(e)<0},A.lt=A.lessThan,A.lessThanOrEqual=function(e){return this.comp(e)<=0},A.lte=A.lessThanOrEqual,A.le=A.lessThanOrEqual,A.greaterThan=function(e){return this.comp(e)>0},A.gt=A.greaterThan,A.greaterThanOrEqual=function(e){return this.comp(e)>=0},A.gte=A.greaterThanOrEqual,A.ge=A.greaterThanOrEqual,A.compare=function(e){if(o(e)||(e=x(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},A.comp=A.compare,A.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(S)},A.neg=A.negate,A.add=function(e){o(e)||(e=x(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,c=65535&this.low,d=e.high>>>16,l=65535&e.high,h=e.low>>>16,m=0,y=0,v=0,O=0;return v+=(O+=c+(65535&e.low))>>>16,y+=(v+=r+h)>>>16,m+=(y+=n+l)>>>16,m+=t+d,f((v&=65535)<<16|(O&=65535),(m&=65535)<<16|(y&=65535),this.unsigned)},A.subtract=function(e){return o(e)||(e=x(e)),this.add(e.neg())},A.sub=A.subtract,A.multiply=function(e){if(this.isZero())return I;if(o(e)||(e=x(e)),n)return f(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return I;if(this.eq(E))return e.isOdd()?E:I;if(e.eq(E))return this.isOdd()?E:I;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(k)&&e.lt(k))return h(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,c=this.low>>>16,d=65535&this.low,l=e.high>>>16,m=65535&e.high,y=e.low>>>16,v=65535&e.low,O=0,w=0,N=0,S=0;return N+=(S+=d*v)>>>16,w+=(N+=c*v)>>>16,N&=65535,w+=(N+=d*y)>>>16,O+=(w+=r*v)>>>16,w&=65535,O+=(w+=c*y)>>>16,w&=65535,O+=(w+=d*m)>>>16,O+=t*v+r*y+c*m+d*l,f((N&=65535)<<16|(S&=65535),(O&=65535)<<16|(w&=65535),this.unsigned)},A.mul=A.multiply,A.divide=function(e){if(o(e)||(e=x(e)),e.isZero())throw Error("division by zero");var t,r,c;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?N:I;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return N;if(e.gt(this.shru(1)))return T;c=N}else{if(this.eq(E))return e.eq(S)||e.eq($)?E:e.eq(E)?S:(t=this.shr(1).div(e).shl(1)).eq(I)?e.isNegative()?S:$:(r=this.sub(e.mul(t)),c=t.add(r.div(e)));if(e.eq(E))return this.unsigned?N:I;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();c=I}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var d=Math.ceil(Math.log(t)/Math.LN2),l=d<=48?1:m(2,d-48),y=h(t),v=y.mul(e);v.isNegative()||v.gt(r);)v=(y=h(t-=l,this.unsigned)).mul(e);y.isZero()&&(y=S),c=c.add(y),r=r.sub(v)}return c},A.div=A.divide,A.modulo=function(e){return o(e)||(e=x(e)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},A.mod=A.modulo,A.rem=A.modulo,A.not=function(){return f(~this.low,~this.high,this.unsigned)},A.and=function(e){return o(e)||(e=x(e)),f(this.low&e.low,this.high&e.high,this.unsigned)},A.or=function(e){return o(e)||(e=x(e)),f(this.low|e.low,this.high|e.high,this.unsigned)},A.xor=function(e){return o(e)||(e=x(e)),f(this.low^e.low,this.high^e.high,this.unsigned)},A.shiftLeft=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):f(0,this.low<<e-32,this.unsigned)},A.shl=A.shiftLeft,A.shiftRight=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):f(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},A.shr=A.shiftRight,A.shiftRightUnsigned=function(e){if(o(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?f(this.low>>>e|t<<32-e,t>>>e,this.unsigned):f(32===e?t:t>>>e-32,0,this.unsigned)},A.shru=A.shiftRightUnsigned,A.shr_u=A.shiftRightUnsigned,A.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},A.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},A.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},A.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},A.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,i,n=l(e),r=n[0],d=n[1],h=new c(function(e,t,n){return 3*(t+n)/4-n}(0,r,d)),f=0,m=d>0?r-4:r;for(i=0;i<m;i+=4)t=o[e.charCodeAt(i)]<<18|o[e.charCodeAt(i+1)]<<12|o[e.charCodeAt(i+2)]<<6|o[e.charCodeAt(i+3)],h[f++]=t>>16&255,h[f++]=t>>8&255,h[f++]=255&t;2===d&&(t=o[e.charCodeAt(i)]<<2|o[e.charCodeAt(i+1)]>>4,h[f++]=255&t);1===d&&(t=o[e.charCodeAt(i)]<<10|o[e.charCodeAt(i+1)]<<4|o[e.charCodeAt(i+2)]>>2,h[f++]=t>>8&255,h[f++]=255&t);return h},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,c=[],d=16383,i=0,l=n-o;i<l;i+=d)c.push(h(e,i,i+d>l?l:i+d));1===o?(t=e[n-1],c.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],c.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return c.join("")};for(var r=[],o=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,d=code.length;i<d;++i)r[i]=code[i],o[code.charCodeAt(i)]=i;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function h(e,t,n){for(var o,c,output=[],i=t;i<n;i+=3)o=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),output.push(r[(c=o)>>18&63]+r[c>>12&63]+r[c>>6&63]+r[63&c]);return output.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var c,d,l=8*o-r-1,h=(1<<l)-1,f=h>>1,m=-7,i=n?o-1:0,y=n?-1:1,s=e[t+i];for(i+=y,c=s&(1<<-m)-1,s>>=-m,m+=l;m>0;c=256*c+e[t+i],i+=y,m-=8);for(d=c&(1<<-m)-1,c>>=-m,m+=r;m>0;d=256*d+e[t+i],i+=y,m-=8);if(0===c)c=1-f;else{if(c===h)return d?NaN:1/0*(s?-1:1);d+=Math.pow(2,r),c-=f}return(s?-1:1)*d*Math.pow(2,c-r)},t.write=function(e,t,n,r,o,c){var d,l,h,f=8*c-o-1,m=(1<<f)-1,y=m>>1,rt=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,i=r?0:c-1,x=r?1:-1,s=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,d=m):(d=Math.floor(Math.log(t)/Math.LN2),t*(h=Math.pow(2,-d))<1&&(d--,h*=2),(t+=d+y>=1?rt/h:rt*Math.pow(2,1-y))*h>=2&&(d++,h/=2),d+y>=m?(l=0,d=m):d+y>=1?(l=(t*h-1)*Math.pow(2,o),d+=y):(l=t*Math.pow(2,y-1)*Math.pow(2,o),d=0));o>=8;e[n+i]=255&l,i+=x,l/=256,o-=8);for(d=d<<o|l,f+=o;f>0;e[n+i]=255&d,i+=x,d/=256,f-=8);e[n+i-x]|=128*s}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){"use strict";(function(e){var t=n(286);const r=()=>n(622);let o;class c{constructor(){this.util=n(623),this.textEncoder=new this.util.TextEncoder}fetch(path,e){return null!=Object(t.b)().global.fetch?Object(t.b)().global.fetch(path,e):(null==o&&(o=r()),o(path,e))}now(){const time=e.hrtime();return 1e3*time[0]+time[1]/1e6}encode(text,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(text)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}Object(t.b)().get("IS_NODE")&&Object(t.b)().setPlatform("node",new c)}).call(this,n(144))},,,function(e,t,n){"use strict";var r,o;n.d(t,"a",(function(){return r})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(r||(r={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(o||(o={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t,n=this,r=(t=4022871197,function(data){data=data.toString();for(var i=0;i<data.length;i++){var e=.02519603282416938*(t+=data.charCodeAt(i));e-=t=e>>>0,t=(e*=t)>>>0,t+=4294967296*(e-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function l(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function h(e,t){var n=new d(e),r=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.alea=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function h(e,t){var n=new d(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xor128=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function h(e,t){var n=new d(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xorwow=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function l(e,t){return t.x=e.x.slice(),t.i=e.i,t}function h(e,t){null==e&&(e=+new Date);var n=new d(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.x&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xorshift7=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,i=t.i;return t.w=r=r+1640531527|0,n=o[i+34&127],e=o[i=i+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[i]=n^e,t.i=i,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,c,d=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),i=0,o=-32;o<l;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(c=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(c=c+1640531527|0,i=0==(n=d[127&o]^=r+c)?i+1:0);for(i>=128&&(d[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=d[i+34&127],n=d[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,d[i]=r^n;e.w=c,e.X=d,e.i=i}(t,e)}function l(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function h(e,t){null==e&&(e=+new Date);var n=new d(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.X&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xor4096=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function d(e){var t=this,n="";t.next=function(){var b=t.b,e=t.c,n=t.d,a=t.a;return b=b<<25^b>>>7^e,e=e-n|0,n=n<<24^n>>>8^a,a=a-b|0,t.b=b=b<<20^b>>>12^e,t.c=e=e-n|0,t.d=n<<16^e>>>16^a,t.a=a-b|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function l(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function h(e,t){var n=new d(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=h:n(296)&&n(323)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.tychei=h}(0,e,n(296))}).call(this,n(143)(e))},function(e,t,n){var r;!function(o,c){var d,l=this,h=256,f=c.pow(h,6),m=c.pow(2,52),y=2*m,mask=255;function x(e,t,n){var r=[],x=k(w((t=1==t?{entropy:!0}:t||{}).entropy?[e,I(o)]:null==e?function(){try{var e;return d&&(e=d.randomBytes)?e=e(h):(e=new Uint8Array(h),(l.crypto||l.msCrypto).getRandomValues(e)),I(e)}catch(e){var t=l.navigator,n=t&&t.plugins;return[+new Date,l,n,l.screen,I(o)]}}():e,3),r),N=new v(r),S=function(){for(var e=N.g(6),t=f,n=0;e<m;)e=(e+n)*h,t*=h,n=N.g(1);for(;e>=y;)e/=2,t/=2,n>>>=1;return(e+n)/t};return S.int32=function(){return 0|N.g(4)},S.quick=function(){return N.g(4)/4294967296},S.double=S,k(I(N.S),o),(t.pass||n||function(e,t,n,r){return r&&(r.S&&O(r,N),e.state=function(){return O(N,{})}),n?(c.random=e,t):e})(S,x,"global"in t?t.global:this==c,t.state)}function v(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,s=r.S=[];for(n||(e=[n++]);i<h;)s[i]=i++;for(i=0;i<h;i++)s[i]=s[o=mask&o+e[i%n]+(t=s[i])],s[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,s=r.S;e--;)t=s[i=mask&i+1],n=n*h+s[mask&(s[i]=s[o=mask&o+t])+(s[o]=t)];return r.i=i,r.j=o,n})(h)}function O(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function w(e,t){var n,r=[],o=typeof e;if(t&&"object"==o)for(n in e)try{r.push(w(e[n],t-1))}catch(e){}return r.length?r:"string"==o?e:e+"\0"}function k(e,t){for(var n,r=e+"",o=0;o<r.length;)t[mask&o]=mask&(n^=19*t[mask&o])+r.charCodeAt(o++);return I(t)}function I(a){return String.fromCharCode.apply(0,a)}if(c.seedrandom=x,k(c.random(),o),e.exports){e.exports=x;try{d=n(651)}catch(e){}}else void 0===(r=function(){return x}.call(t,n,t,e))||(e.exports=r)}([],Math)},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t},,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(274);const o={},c={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function d(e){if(!(e in o)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const canvas=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(canvas.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete o[e]}),!1),1===e)return canvas.getContext("webgl",c)||canvas.getContext("experimental-webgl",c);return canvas.getContext("webgl2",c)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;o[e]=t}const t=o[e];return t.isContextLost()?(delete o[e],d(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),o[e])}var l,h,f;function m(e,t){return[t,e]}function y(e){const t=r.Wd.sizeFromShape(e),n=Math.ceil(t/4);return r.Wd.sizeToSquarishShape(n)}function x(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function v(e,t){const n=e;let o,c,d,l,h,f,m,y,x,v;return 2===Object(r.xd)().getNumber("WEBGL_VERSION")?(o=n.R32F,c=n.R16F,d=n.RGBA16F,l=n.RGBA32F,h=n.RED,m=4,y=1,x=n.HALF_FLOAT,v=n.FLOAT):(o=e.RGBA,c=e.RGBA,d=e.RGBA,l=n.RGBA,h=e.RGBA,m=4,y=4,x=null!=t?t.HALF_FLOAT_OES:null,v=e.FLOAT),f=e.RGBA,{internalFormatFloat:o,internalFormatHalfFloat:c,internalFormatPackedHalfFloat:d,internalFormatPackedFloat:l,textureFormatFloat:h,downloadTextureFormat:f,downloadUnpackNumChannels:m,defaultNumChannels:y,textureTypeHalfFloat:x,textureTypeFloat:v}}function O(e,t){const n=t();return Object(r.xd)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(l||(l={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(h||(h={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(f||(f={}));function w(e){return!!(Object(r.xd)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function k(e,t){return A(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function I(e,t){const n=A(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(O(e,(()=>e.shaderSource(n,t))),O(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=N.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const o=+n[1],c=e.split("\n"),d=c.length.toString().length+2,l=c.map(((line,e)=>r.Wd.rightPad((e+1).toString(),d)+line));let h=0;for(let i=0;i<l.length;i++)h=Math.max(l[i].length,h);const f=l.slice(0,o-1),m=l.slice(o-1,o),y=l.slice(o);console.log(f.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r.Wd.rightPad(m[0],h)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(y.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const N=/ERROR: [0-9]+:([0-9]+):/g;function S(e,t){if(O(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function T(e,t,n,r,o,c,d){const l=e.getAttribLocation(t,n);return-1!==l&&(O(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),O(e,(()=>e.vertexAttribPointer(l,o,e.FLOAT,!1,c,d))),O(e,(()=>e.enableVertexAttribArray(l))),!0)}function $(e,t,n,r){O(e,(()=>function(e,t,n){R(e,n),O(e,(()=>e.activeTexture(e.TEXTURE0+n))),O(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),O(e,(()=>e.uniform1i(n,r)))}function j(e,t,n){O(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),O(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function C(e,t){O(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),O(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function E(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function A(e,t,n){const r=O(e,(()=>t()));if(null==r)throw new Error(n);return r}function R(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function F(e,t=2){return r.Wd.sizeFromShape(e.slice(0,e.length-t))}function _(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function D(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[F(e),..._(e)]),t}function M(e){return e%2==0}function P(e,t){if(e=e.slice(-2),t=t.slice(-2),r.Wd.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(M(n)&&M(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&M(e[0])&&M(t[0])}let W,L;function B(e,t){return null!=e.getExtension(t)}function z(e){try{if(null!=d(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function V(e){if(0===e)return!1;const t=d(e);if(1!==e){if(B(t,"EXT_color_buffer_float"))return U(t);const e="EXT_color_buffer_half_float";if(B(t,e)){const n=t.getExtension(e);return function(e,t){const n=v(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const o=1,c=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,o,c,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const d=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,d),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const l=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(d),l}(t,n)}return!1}if(!B(t,"OES_texture_float"))return!1;if(!B(t,"WEBGL_color_buffer_float"))return!1;return U(t)}function U(e){const t=v(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),o}function G(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.Wd.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const H=Object(r.xd)();function K(){let e,t,n,o,c,output,d,l,h,f;return 2===Object(r.xd)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",o="in",c="texture",output="outputColor",d="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",h="",f="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",o="varying",c="texture2D",output="gl_FragColor",d="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",h="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",f="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:o,texture2D:c,output:output,defineOutput:d,defineSpecialNaN:l,defineSpecialInf:h,defineRound:f}}function X(e,t,n="index"){const o=r.Wd.computeStrides(t);return o.map(((t,i)=>`${`int ${e[i]} = ${n} / ${t}`}; ${i===o.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * ${t}`:`index -= ${e[i]} * ${t}`};`)).join("")}function Y(e,t,n="index"){const o=r.Wd.computeStrides(t);return o.map(((t,i)=>`${`int ${e[i]} = ${n} / outShapeStrides[${i}]`}; ${i===o.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * outShapeStrides[${i}]`:`index -= ${e[i]} * outShapeStrides[${i}]`};`)).join("")}function Z(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),o=new Array(n-1);o[n-2]=r[n-1];for(let i=n-3;i>=0;--i)o[i]=`(${o[i+1]} * ${r[i+1]})`;return o}(e.map(((e,i)=>i)),t);return r.map(((t,i)=>`${`int ${e[i]} = ${n} / ${r[i]}`}; ${i===r.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * ${r[i]}`:`index -= ${e[i]} * ${r[i]}`};`)).join("")}function Q(e){const t=r.Wd.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}H.registerFlag("HAS_WEBGL",(()=>H.getNumber("WEBGL_VERSION")>0)),H.registerFlag("WEBGL_VERSION",(()=>z(2)?2:z(1)?1:0)),H.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),H.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===H.get("WEBGL_VERSION"))),H.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),H.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),H.registerFlag("WEBGL_PACK",(()=>H.getBool("HAS_WEBGL"))),H.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_CLIP",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_PACK_REDUCE",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_LAZILY_UNPACK",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_CONV_IM2COL",(()=>H.getBool("WEBGL_PACK"))),H.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==W){const t=d(e);W=t.getParameter(t.MAX_TEXTURE_SIZE)}return W}(H.getNumber("WEBGL_VERSION")))),H.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==L){const t=d(e);L=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,L)}(H.getNumber("WEBGL_VERSION")))),H.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=H.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=d(e);return t=B(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:B(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),H.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>H.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!r.ud.isMobile())),H.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=d(e);if(1===e){if(!B(t,"OES_texture_float"))return!1}else if(!B(t,"EXT_color_buffer_float"))return!1;return U(t)}(H.getNumber("WEBGL_VERSION")))),H.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!H.getBool("WEBGL_FORCE_F16_TEXTURES")&&H.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),H.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>V(H.getNumber("WEBGL_VERSION")))),H.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=H.getNumber("WEBGL_VERSION"))&&null!=d(e).fenceSync;var e})),H.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>H.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),H.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),H.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>r.ud.isMobile()&&H.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),H.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),H.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),H.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),H.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const J="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:ee}=r.nd;function te(e,t,n){const o=[];if(e.forEach((e=>{const t=r.Wd.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?o.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(o.push(`uniform sampler2D ${e.name};`),o.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=pe(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:o.push(`uniform int ${e.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${e.name}Shape;`)}o.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;")}o.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{o.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const c=o.join("\n"),d=e.map((e=>function(e,t,n=!1,o){let c="";c+=n?re(e,o):ne(e,o);const d=e.shapeInfo.logicalShape,l=t.logicalShape;d.length<=l.length&&(c+=n?function(e,t){const n=e.name,o=n.charAt(0).toUpperCase()+n.slice(1),c="get"+o+"AtOutCoords",d=e.shapeInfo.logicalShape.length,l=t.logicalShape.length,h=ee(e.shapeInfo.logicalShape,t.logicalShape),f=le(l),m=l-d;let y;const x=["x","y","z","w","u","v"];y=0===d?"":l<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${x[e+m]} = 0;`)).join("\n");let v="";v=l<2&&d>0?"coords":e.shapeInfo.logicalShape.map(((s,i)=>`coords.${x[i+m]}`)).join(", ");let output="return outputValue;";const O=1===r.Wd.sizeFromShape(e.shapeInfo.logicalShape),w=1===r.Wd.sizeFromShape(t.logicalShape);if(1!==d||O||w){if(O&&!w)output=1===l?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(h.length){const e=d-2,t=d-1;h.indexOf(e)>-1&&h.indexOf(t)>-1?output="return vec4(outputValue.x);":h.indexOf(e)>-1?output="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":h.indexOf(t)>-1&&(output="return vec4(outputValue.xx, outputValue.zz);")}}else output="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${c}() {\n      ${f} coords = getOutputCoords();\n      ${y}\n      vec4 outputValue = get${o}(${v});\n      ${output}\n    }\n  `}(e,t):function(e,t){const n=e.name,o=n.charAt(0).toUpperCase()+n.slice(1),c="get"+o+"AtOutCoords",d=t.texShape,l=e.shapeInfo.texShape,h=e.shapeInfo.logicalShape.length,f=t.logicalShape.length;if(!e.shapeInfo.isUniform&&h===f&&null==e.shapeInfo.flatOffset&&r.Wd.arraysEqual(l,d))return`\n      float ${c}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const m=le(f),y=ee(e.shapeInfo.logicalShape,t.logicalShape),x=f-h;let v;const O=["x","y","z","w","u","v"];v=0===h?"":f<2&&y.length>=1?"coords = 0;":y.map((e=>`coords.${O[e+x]} = 0;`)).join("\n");let w="";w=f<2&&h>0?"coords":e.shapeInfo.logicalShape.map(((s,i)=>`coords.${O[i+x]}`)).join(", ");return`\n    float ${c}() {\n      ${m} coords = getOutputCoords();\n      ${v}\n      return get${o}(${w});\n    }\n  `}(e,t));return c}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),l=t.texShape,h=K(),f=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(h);let m,y,x=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ae}\n    ${se}\n    ${oe}\n  `}(h);t.isPacked?(m=function(e,t,n){switch(e.length){case 0:return ce();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.Wd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));\n      }\n    `;const c=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${o[0]}, ${o[1]}));\n\n      int index = resTexRC.x * ${o[1]} + resTexRC.y;\n      int r = 2 * (index / ${c});\n      int c = imod(index, ${c}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[2]/2),c=o*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${c};\n      index -= b * ${c};\n\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[e.length-1]/2),c=o*Math.ceil(e[e.length-2]/2);let d=c,l="",h="b, r, c";for(let b=2;b<e.length-1;b++)d*=e[e.length-b-1],l=`\n      int b${b} = index / ${d};\n      index -= b${b} * ${d};\n    `+l,h=`b${b}, `+h;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${l}\n\n      int b = index / ${c};\n      index -= b * ${c};\n\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec${e.length}(${h});\n    }\n  `}(e,t,n)}}(t.logicalShape,l,n.enableShapeUniforms),y=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(h)):(m=function(e,t,n){switch(e.length){case 0:return ce();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(r.Wd.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Y(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=X(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Y(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=X(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=X(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=X(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,l,n.enableShapeUniforms),y=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(h)),n.packedInputs&&(x+=ie);return[x,f,y,c,m,d,n.userCode].join("\n")}function ne(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[o,c]=e.shapeInfo.texShape;if(1===o&&1===c)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const d=ue(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[l,h]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${l}, ${h}, ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${de(e)}\n      }\n    `;const o=e.shapeInfo.texShape,c=o[0],d=o[1];if(1===d&&1===c)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const l=ue(n);if(1===d)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / ${c}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===c)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${l}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${l}) + 0.5) / ${d}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${l});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${c}, ${d}, index + ${l});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,o=e.name,c="get"+o.charAt(0).toUpperCase()+o.slice(1),d=e.shapeInfo.texShape;if(null!=d&&r.Wd.arraysEqual(n,d)){if(t)return`\n      float ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);\n        return sampleTexture(${o}, uv);\n      }\n    `;const e=d[0];return`\n    float ${c}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d[1]}.0, ${e}.0);\n      return sampleTexture(${o}, uv);\n    }\n  `}const{newShape:l,keptDims:h}=r.Wd.squeezeShape(n),f=l;if(f.length<n.length){const n=["row","col"];return`\n      ${ne(he(e,f),t)}\n      float ${c}(int row, int col) {\n        return ${c}(${fe(n,h)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${de(e)}\n      }\n    `;const m=d[0],y=d[1],x=ue(o);if(1===y)return t?`\n      float ${c}(int row, int col) {\n        float index = dot(vec3(row, col, ${x}), vec3(${o}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n    float ${c}(int row, int col) {\n      float index = dot(vec3(row, col, ${x}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${m}.0);\n      return sampleTexture(${o}, uv);\n    }\n  `;if(1===m)return t?`\n      float ${c}(int row, int col) {\n        float index = dot(vec3(row, col, ${x}), vec3(${o}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n    float ${c}(int row, int col) {\n      float index = dot(vec3(row, col, ${x}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${y}.0, 0.5);\n      return sampleTexture(${o}, uv);\n    }\n  `;if(t)return`\n      float ${c}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o}Shape[1] + col + ${x};\n        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);\n        return sampleTexture(${o}, uv);\n      }\n    `;return`\n  float ${c}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${x};\n    vec2 uv = uvFromFlat(${m}, ${y}, index);\n    return sampleTexture(${o}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,o=e.name,c="get"+o.charAt(0).toUpperCase()+o.slice(1),d=n[1]*n[2],l=n[2],{newShape:h,keptDims:f}=r.Wd.squeezeShape(n),m=h;if(m.length<n.length){const n=["row","col","depth"];return`\n        ${ne(he(e,m),t)}\n        float ${c}(int row, int col, int depth) {\n          return ${c}(${fe(n,f)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${d}, ${l}, 1)));\n        ${de(e)}\n      }\n    `;const y=e.shapeInfo.texShape,x=y[0],v=y[1],O=e.shapeInfo.flatOffset;if(v===d&&null==O)return t?`\n      float ${c}(int row, int col, int depth) {\n        int stride1 = ${o}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${o}TexShape[1], ${o}TexShape[0]);\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n        float ${c}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${l}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${v}.0, ${x}.0);\n          return sampleTexture(${o}, uv);\n        }\n      `;if(v===l&&null==O)return t?`\n      float ${c}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n    float ${c}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${v}.0, ${x}.0);\n      return sampleTexture(${o}, uv);\n    }\n  `;const w=ue(o);if(t)return`\n    float ${c}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${o}Shape[1] * ${o}Shape[2];\n      int stride1 = ${o}Shape[2];\n      int index = row * ${d} + col * ${l} + depth + ${w};\n      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);\n      return sampleTexture(${o}, uv);\n    }\n    `;return`\n      float ${c}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${d} + col * ${l} + depth + ${w};\n        vec2 uv = uvFromFlat(${x}, ${v}, index);\n        return sampleTexture(${o}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,o=e.name,c="get"+o.charAt(0).toUpperCase()+o.slice(1),d=n[3],l=n[2]*d,h=n[1]*l,{newShape:f,keptDims:m}=r.Wd.squeezeShape(n);if(f.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${ne(he(e,f),t)}\n      float ${c}(int row, int col, int depth, int depth2) {\n        return ${c}(${fe(n,m)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${h}, ${l}, ${d}, 1)));\n        ${de(e)}\n      }\n    `;const y=e.shapeInfo.flatOffset,x=e.shapeInfo.texShape,v=x[0],O=x[1],w=`int stride2 = ${o}Shape[3];`,k=`int stride1 = ${o}Shape[2] * stride2;`,I=`int stride0 = ${o}Shape[1] * stride1;`;if(O===h&&null==y)return t?`\n      float ${c}(int row, int col, int depth, int depth2) {\n        ${w}\n        ${k}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${o}TexShape[1], ${o}TexShape[0]);\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${l}, ${d}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${O}.0, ${v}.0);\n        return sampleTexture(${o}, uv);\n      }\n    `;if(O===d&&null==y)return t?`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${o}TexShape[1], ${o}TexShape[0]);\n        return sampleTexture(${o}, uv);\n      }\n    `:`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${O}.0, ${v}.0);\n        return sampleTexture(${o}, uv);\n      }\n    `;const N=ue(o);if(t)return`\n    float ${c}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${w}\n      ${k}\n      ${I}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${N});\n      return sampleTexture(${o}, uv);\n    }\n  `;return`\n    float ${c}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${l} +\n          depth * ${d} + depth2;\n      vec2 uv = uvFromFlat(${v}, ${O}, index + ${N});\n      return sampleTexture(${o}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=t[4],d=t[3]*c,l=t[2]*d,h=t[1]*l,{newShape:f,keptDims:m}=r.Wd.squeezeShape(t);if(f.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${ne(he(e,f))}\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        return ${o}(${fe(t,m)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${l}, ${d}, ${c})) +\n          depth3;\n        ${de(e)}\n      }\n    `;const y=e.shapeInfo.flatOffset,x=e.shapeInfo.texShape,v=x[0],O=x[1];if(O===h&&null==y)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${l}, ${d}, ${c}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${O}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(O===c&&null==y)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${O}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const w=ue(n);return`\n    float ${o}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${l} + depth * ${d} +\n          depth2 * ${c} + depth3 + ${w};\n      vec2 uv = uvFromFlat(${v}, ${O}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:c,keptDims:d}=r.Wd.squeezeShape(t);if(c.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ne(he(e,c))}\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${o}(${fe(t,d)});\n      }\n    `}const l=t[5],h=t[4]*l,f=t[3]*h,m=t[2]*f,y=t[1]*m;if(e.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${y}, ${m}, ${f}, ${h})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${l}, 1)));\n        ${de(e)}\n      }\n    `;const x=e.shapeInfo.flatOffset,v=e.shapeInfo.texShape,O=v[0],w=v[1];if(w===y&&null==x)return`\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${m}, ${f}, ${h}, ${l})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${w}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(w===l&&null==x)return`\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${w}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const k=ue(n);return`\n    float ${o}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${y} + col * ${m} + depth * ${f} +\n          depth2 * ${h} + depth3 * ${l} + depth4 + ${k};\n      vec2 uv = uvFromFlat(${O}, ${w}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function re(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=K();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,c=K();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `;const d=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${d[0]}, ${d[1]}, index);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,o=e.name,c="get"+o.charAt(0).toUpperCase()+o.slice(1),d=e.shapeInfo.texShape,l=d[0],h=d[1],f=K();if(null!=d&&r.Wd.arraysEqual(n,d))return t?`\n      vec4 ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);\n\n        return ${f.texture2D}(${o}, uv);\n      }\n    `:`\n      vec4 ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${h}.0, ${l}.0);\n\n        return ${f.texture2D}(${o}, uv);\n      }\n    `;if(t)return`\n    vec4 ${c}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${f.texture2D}(${o}, uv);\n    }\n  `;const m=[Math.ceil(d[0]/2),Math.ceil(d[1]/2)],y=Math.ceil(n[1]/2);return`\n    vec4 ${c}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${y}, ${m[0]}, ${m[1]}, row, col);\n      return ${f.texture2D}(${o}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),c=e.shapeInfo.texShape,d=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];if(1===n[0]){const r=[1,2],c=["b","row","col"];return`\n        ${re(he(e,n.slice(1)),t)}\n        vec4 ${o}(int b, int row, int col) {\n          return ${o}(${fe(c,r)});\n        }\n      `}const l=K();if(t)return`\n    vec4 ${o}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const h=d[0],f=d[1],m=Math.ceil(n[2]/2),y=m*Math.ceil(n[1]/2);return`\n    vec4 ${o}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${h}, ${f}, ${y}, ${m}, b, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=K();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${n}, uv);\n    }\n  `;const c=e.shapeInfo.logicalShape,d=c.length,l=e.shapeInfo.texShape,h=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)],f=h[0],m=h[1],y=Math.ceil(c[d-1]/2);let x=y*Math.ceil(c[d-2]/2),v="int b, int row, int col",O=`b * ${x} + (row / 2) * ${y} + (col / 2)`;for(let b=2;b<d-1;b++)v=`int b${b}, `+v,x*=c[d-b-1],O=`b${b} * ${x} + `+O;return`\n    vec4 ${r}(${v}) {\n      int index = ${O};\n      int texR = index / ${m};\n      int texC = index - texR * ${m};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}, ${f});\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const ae="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",se="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oe="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ie="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ce(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function ue(e){return`offset${e}`}function de(e){const t=e.name,n=r.Wd.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function le(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function pe(e,t,n){const{newShape:o,keptDims:c}=r.Wd.squeezeShape(t),d=t.length,l=e&&3===d&&1===t[0],h=l?t.slice(1):o,f=!e&&d>1&&!r.Wd.arraysEqual(t,n)&&o.length<d||l;return{useSqueezeShape:f,uniformShape:f?h:t,keptDims:c}}function he(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function fe(e,t){return t.map((t=>e[t])).join(", ")}function me(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((s,i)=>{const e=s.logicalShape,input=t[i],n=input.shape;if(!r.Wd.arraysEqual(e,n))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${e} and ${n} must match`);if(s.isUniform&&input.isUniform)return;const o=s.texShape,c=input.isUniform?null:input.texData.texShape;if(!r.Wd.arraysEqual(o,c))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${c} must match`)}))}function be(e){return Object(r.xd)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class ge{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=l.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=K();this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Y(["r","c","d"],e):X(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ye{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=l.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=K();this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Y(["r","c","d"],e):X(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class xe{constructor(e){this.variableNames=["A"],this.outTexUsage=h.DOWNLOAD;const t=K();this.outputShape=e,this.userCode=`\n      ${J}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class ve{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=h.DOWNLOAD;const t=K();this.outputShape=e,this.userCode=`\n      ${J}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class Oe{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=K();this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length);let output="result";t&&(output="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Q(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `}}class we{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=K();this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length);let r="",output="result";t&&(output="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let col=0;col<=1;col++){const o=2*t+col;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${o}] = values[0];\n            } else if (offset == 1) {\n              result[${o}] = values[1];\n            } else if (offset == 2) {\n              result[${o}] = values[2];\n            } else {\n              result[${o}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Q(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${output};\n        }\n    `}}function ke(e){const t=K();return function(e,t){const n=A(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(O(e,(()=>e.shaderSource(n,t))),O(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ie(e){return function(e,data){const t=A(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return O(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t))),O(e,(()=>e.bufferData(e.ARRAY_BUFFER,data,e.STATIC_DRAW))),t}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Ne(e){return function(e,data){const t=A(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return O(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t))),O(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,data,e.STATIC_DRAW))),t}(e,new Uint16Array([0,1,2,2,1,3]))}function Se(e,t,n,o,c,d){!function(e,t){const n=Object(r.xd)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const l=function(e){return A(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),h=e.TEXTURE_2D;return O(e,(()=>e.bindTexture(h,l))),O(e,(()=>e.texParameteri(h,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),O(e,(()=>e.texParameteri(h,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),O(e,(()=>e.texParameteri(h,e.TEXTURE_MIN_FILTER,e.NEAREST))),O(e,(()=>e.texParameteri(h,e.TEXTURE_MAG_FILTER,e.NEAREST))),O(e,(()=>e.texImage2D(h,0,o,t,n,0,c,d,null))),O(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),l}function Te(e){return e.internalFormatFloat}function $e(e){return e.internalFormatHalfFloat}function je(e){return e.downloadTextureFormat}function Ce(e){return e.internalFormatPackedFloat}function Ee(e){return e.internalFormatPackedHalfFloat}function Ae(e,t,n,r,o,c,d,l){const h=e,f=new Float32Array(function(e,t){const[n,r]=x(e,t);return n*r*4}(c,d));return h.bindBuffer(h.PIXEL_PACK_BUFFER,t),h.getBufferSubData(h.PIXEL_PACK_BUFFER,0,f),h.bindBuffer(h.PIXEL_PACK_BUFFER,null),f}class Re{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Object(r.xd)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){o[e]=t}(t,e)):this.gl=d(t);let n="WEBGL_color_buffer_float";const c="EXT_color_buffer_half_float";if(1===Object(r.xd)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=k(this.gl,e),B(this.gl,t))this.textureHalfFloatExtension=k(this.gl,t);else if(Object(r.xd)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),B(this.gl,c))this.colorBufferHalfFloatExtension=k(this.gl,c);else if(Object(r.xd)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",B(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!B(this.gl,c))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(c)}this.vertexBuffer=Ie(this.gl),this.indexBuffer=Ne(this.gl),this.framebuffer=function(e){return A(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=v(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(r.xd)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;O(e,(()=>e.finish())),O(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),O(e,(()=>e.deleteFramebuffer(this.framebuffer))),O(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),O(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),O(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=m(t,n);return Se(e,o,c,Te(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=m(t,n);return Se(e,o,c,$e(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=m(t,n);return Se(e,o,c,je(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){O(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?O(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):O(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),O(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,data){this.throwIfDisposed(),function(e,t,n,r,data,o){let c,d,l;O(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),data instanceof Uint8Array?(c=new Uint8Array(n*r*4),d=e.UNSIGNED_BYTE,l=e.RGBA):(c=new Float32Array(n*r*4),d=e.FLOAT,l=o.internalFormatPackedFloat),c.set(data),O(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,d,c))),O(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,data,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=x(t,n);return Se(e,o,c,Ee(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=x(t,n);return Se(e,o,c,Ce(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(C(this.gl,this.framebuffer),this.outputTexture=null),O(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[o,c]=m(t,n),d=new Uint8Array(t*n*4);return O(e,(()=>e.readPixels(0,0,o,c,r.downloadTextureFormat,e.UNSIGNED_BYTE,d))),new Float32Array(d.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,o,c){return Ae(this.gl,e,0,0,0,o,c,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const o=e.createBuffer();O(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,o)));const c=16*t*n;return O(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,c,e.STREAM_READ))),O(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),O(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),o}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Object(r.xd)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(o,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=o}else Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return O(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=I(t,e);null==this.vertexShader&&(this.vertexShader=ke(t));const r=function(e){return A(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return O(t,(()=>t.attachShader(r,this.vertexShader))),O(t,(()=>t.attachShader(r,n))),function(e,t){if(O(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&S(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return O(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),T(e,t,"clipSpacePos",n,3,20,0)&&T(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&O(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&S(this.gl,this.program),O(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return A(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),O(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),$(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,o]=x(t,n);this.setOutputMatrixTextureDriver(e,r,o)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&S(this.gl,this.program),E(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),O(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),O(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=k(this.gl,2===Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.Wd.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let i=0;for(;i<e.length;++i){if(!e[i]())break}return i-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let i=0;i<=e;++i){const{resolveFn:e}=this.itemsToPoll[i];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||r.Wd.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),j(this.gl,e,this.framebuffer),this.debug&&E(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(j(this.gl,this.outputTexture,this.framebuffer),this.debug&&E(this.gl)):C(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;j(r,e,this.framebuffer),this.debug&&E(r),this.outputTexture=e,O(r,(()=>r.viewport(0,0,t,n))),O(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),O(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}var Fe=n(433);const{addImpl:_e,bincountImpl:De,bincountReduceImpl:Me,ceilImpl:Pe,concatImpl:We,equalImpl:Le,expImpl:Be,expm1Impl:ze,floorImpl:Ve,gatherNdImpl:Ue,gatherV2Impl:Ge,greaterImpl:He,greaterEqualImpl:Ke,lessImpl:qe,lessEqualImpl:Xe,linSpaceImpl:Ye,logImpl:Ze,maxImpl:Qe,maximumImpl:Je,minimumImpl:et,multiplyImpl:tt,negImpl:nt,notEqualImpl:at,prodImpl:st,rangeImpl:ot,rsqrtImpl:it,sigmoidImpl:ct,simpleAbsImpl:ut,sliceImpl:lt,sparseFillEmptyRowsImpl:pt,sparseReshapeImpl:ht,sparseSegmentReductionImpl:ft,sqrtImpl:mt,stridedSliceImpl:bt,stringNGramsImpl:gt,stringSplitImpl:yt,stringToHashBucketFastImpl:xt,subImpl:vt,tileImpl:Ot,topKImpl:wt,transposeImpl:kt,uniqueImpl:It}=Fe;function Nt(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function St(e,t){return 1===t?[e]:Nt(e,t)}class Tt{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=St("rc",t),r=le(t),o=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let i=e-2;i<e;i++)r+=`${n[i]} >= ${t[i]}`,i<e-1&&(r+="||");return r}(t,e,n),c=function(e,t,n,r){if(1===e)return"";const o=r.slice(-2);return`\n    int r = ${o[0]};\n    int c = ${o[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),output=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let col=0;col<=1;col++){let o=`${0===r?"r":"rp1"}, ${0===col?"c":"cp1"}`;for(let n=2;n<e;n++)o=`${t[t.length-1-n]},`+o;n.push(o)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${c}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `}}}class $t{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length);let n="";for(let i=0;i<4;i++){let e="thisRC = rc;";i%2==1&&(e+="thisRC.z += 1;"),i>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${i>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i>0?"}":""}\n      `}var r,o;this.userCode=`\n      ${r=t,o=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${o?Z(["r","c","d"],"inputShape"):X(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Q(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class jt{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Et(t,n),o=At(e,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const c=Ct(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=c,this.log();const e=this.freeTextures[o].shift();return this.usedTextures[o].push(e),e}let d;return r===f.PACKED_2X2_FLOAT32?d=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===f.PACKED_2X2_FLOAT16?d=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===f.UNPACKED_FLOAT32?d=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===f.UNPACKED_FLOAT16?d=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===f.PACKED_4X1_UNSIGNED_BYTE&&(d=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[o].push(d),this.numUsedTextures++,this._numBytesAllocated+=c,this.log(),d}releaseTexture(e,t,n,o){if(null==this.freeTextures)return;const c=Et(n,o),d=At(t,c,o);d in this.freeTextures||(this.freeTextures[d]=[]);const l=Ct(t,c,this.gpgpu.gl,this.gpgpu.textureConfig,o),h=Object(r.xd)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==h&&this._numBytesAllocated>h?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=l):(this.freeTextures[d].push(e),this.numFreeTextures++,this._numBytesFree+=l),this.numUsedTextures--;const f=this.usedTextures[d],m=f.indexOf(e);if(m<0)throw new Error("Cannot release a texture that was never provided by this texture manager");f.splice(m,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Ct(e,t,n,r,o){const c=function(e,t){switch(e){case f.PACKED_2X2_FLOAT32:return Ce(t);case f.PACKED_2X2_FLOAT16:return Ee(t);case f.UNPACKED_FLOAT32:return Te(t);case f.UNPACKED_FLOAT16:return $e(t);case f.PACKED_4X1_UNSIGNED_BYTE:return je(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let d;if(o){const[t,n]=x(e[0],e[1]);d=t*n}else{const[t,n]=m(e[0],e[1]);d=t*n}const l=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,c);return d*l}function Et(e,t){if(e===h.UPLOAD)return f.PACKED_2X2_FLOAT32;if(e===h.RENDER||null==e)return function(e){return Object(r.xd)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?f.PACKED_2X2_FLOAT32:f.UNPACKED_FLOAT32:e?f.PACKED_2X2_FLOAT16:f.UNPACKED_FLOAT16}(t);if(e===h.DOWNLOAD||e===h.PIXELS)return f.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function At(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Rt{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Ft="return abs(x);";const _t="return x;";class Dt{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Mt{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=St("rc",t),r=le(t),o=function(e,t){if(1===e)return"rc";let n="";for(let i=0;i<e;i++)n+=t[i],i<e-1&&(n+=",");return n}(t,n),c=n.slice(-2),d=t<=1?"rc":`vec2(${c.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${d}));\n      }\n    `}}const Pt=r.Dd.whereImpl,Wt={};const Lt=Object(r.xd)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Bt extends r.xb{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Object(r.xd)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=d(Object(r.xd)().getNumber("WEBGL_VERSION"));this.binaryCache=((t=Object(r.xd)().getNumber("WEBGL_VERSION"))in Wt||(Wt[t]={}),Wt[t]),this.gpgpu=new Re(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new jt(this.gpgpu),this.numMBBeforeWarning=null==Object(r.xd)().global.screen?1024:Object(r.xd)().global.screen.height*Object(r.xd)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r.M(this,Object(r.wd)())}nextDataId(){return Bt.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((Object(r.xd)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Object(r.xd)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:t,dtype:n,values:e,usage:h.UPLOAD,refCount:1}),o}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,o,c){if(Object(r.xd)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:o,values:t,usage:h.UPLOAD,refCount:c})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:o,complexTensorInfos:c,slice:d,shape:l,isPacked:h}=t;if(null!=d){let t;t=h?new Dt(l,_t):new Rt(l,_t);const n=this.runWebGLProgram(t,[{dataId:e,shape:l,dtype:o}],o),data=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===o)return n;const f=null!=this.activeTimers;let m,y;if(f&&(m=r.Wd.now()),"complex64"===o){const e=this.readSync(c.real.dataId),t=this.readSync(c.imag.dataId);y=r.nd.mergeRealAndImagArrays(e,t)}else y=this.getValuesFromTexture(e);return f&&(this.downloadWaitMs+=r.Wd.now()-m),this.convertAndCacheOnCPU(e,y)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:o,slice:c,dtype:d,complexTensorInfos:l,isPacked:h}=t;if(null!=c){let t;t=h?new Dt(o,_t):new Rt(o,_t);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:d}],d),data=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Object(r.xd)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(r.xd)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let f,m,x=null;if("complex64"!==d&&Object(r.xd)().get("WEBGL_BUFFER_SUPPORTED")){f=this.decode(e);const t=this.texData.get(f.dataId);x=this.gpgpu.createBufferFromTexture(t.texture,...y(o))}if(this.pendingRead.set(e,[]),"complex64"!==d&&await this.gpgpu.createAndWaitForFence(),"complex64"===d){const e=await Promise.all([this.read(l.real.dataId),this.read(l.imag.dataId)]),t=e[0],n=e[1];m=r.nd.mergeRealAndImagArrays(t,n)}else if(null==x)m=this.getValuesFromTexture(e);else{const e=r.Wd.sizeFromShape(o);m=this.gpgpu.downloadFloat32MatrixFromBuffer(x,e)}if(null!=f&&this.disposeIntermediateTensorInfo(f),null!=x){const e=this.gpgpu.gl;O(e,(()=>e.deleteBuffer(x)))}const v=this.convertAndCacheOnCPU(e,m),w=this.pendingRead.get(e);return this.pendingRead.delete(e),w.forEach((e=>e(v))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Object(r.wd)().removeDataId(e,this),this.pendingDeletes--),v}bufferSync(e){const data=this.readSync(e.dataId);let t=data;if("string"===e.dtype)try{t=data.map((e=>r.Wd.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(r.pd)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let i=0;i<e.length;i++){const t=e[i];if(!w(t)){if(Object(r.xd)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${t} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${t} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:o}=this.texData.get(e),c=r.Wd.sizeFromShape(t);if(Object(r.xd)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...y(t)).subarray(0,c);return this.disposeIntermediateTensorInfo(n),o}const d=Object(r.xd)().getBool("WEBGL_PACK")&&!0===o,l=d?D(t):t,h=d?new ve(l):new xe(l),output=this.runWebGLProgram(h,[{shape:l,dtype:n,dataId:e}],"float32"),f=this.texData.get(output.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture,f.texShape[0],f.texShape[1]).subarray(0,c);return this.disposeIntermediateTensorInfo(output),m}timerAvailable(){return Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,e();const c=r.Wd.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),d=r.Wd.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,o&&(this.programTimersStack=null);const l={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(c);l.kernelMs=r.Wd.sum(e),l.getExtraProfileInfo=()=>e.map(((e,i)=>({name:d[i],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else l.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,l}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.Wd.now(),endMs:null}}endTimer(e){return Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.Wd.now(),e)}async getQueryTime(e){if(Object(r.xd)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:o,isPacked:c,slice:d}=this.texData.get(e),l=d&&d.origDataId||e,h=this.dataRefCount.get(l);h>1?this.dataRefCount.set(l,h-1):(this.dataRefCount.delete(l),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,o,c)));const f=this.texData.get(e);f.texture=null,f.texShape=null,f.isPacked=!1,f.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Lt){return Object(r.xd)().getBool("WEBGL_CPU_FORWARD")&&e.every((input=>null==this.texData.get(input.dataId).texture&&r.Wd.sizeFromShape(input.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){r.nd.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Pt(e.shape,t)}packedUnaryOp(e,t,n){const o=new Dt(e.shape,t),c=this.compileAndRun(o,[e],n);return Object(r.wd)().makeTensorFromDataId(c.dataId,c.shape,c.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=ut(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Object(r.xd)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Ft,e.dtype);const t=new Rt(e.shape,Ft),n=this.compileAndRun(t,[e]);return Object(r.wd)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let o;if("string"===t&&null!=n&&n.length>0&&r.Wd.isString(n[0])){const c=n.map((e=>r.Wd.encodeString(e)));o=this.write(c,e,t)}else o=this.write(n,e,t);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:o}=this.makeTensorInfo(e,t,n);return Object(r.wd)().makeTensorFromDataId(o,e,t,this)}unpackTensor(input){const e=new Mt(input.shape);return this.runWebGLProgram(e,[input],input.dtype)}packTensor(input){const e=new Tt(input.shape);return this.runWebGLProgram(e,[input],input.dtype,null,!0)}packedReshape(input,e){const t=[F(input.shape),..._(input.shape)],n={dtype:input.dtype,shape:t,dataId:input.dataId},r=[F(e),..._(e)],o=new $t(r,t),c=[t],output=this.runWebGLProgram(o,[n],input.dtype,c,!0);return{dataId:output.dataId,shape:e,dtype:output.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:o}=t,c=D(r);let d;const l=y(c);d=n?new ye(c):new ge(c);const h=[l];return{dtype:o,shape:r,dataId:this.runWebGLProgram(d,[{shape:c,dtype:o,dataId:e}],o,h,!0).dataId}}runWebGLProgram(e,t,n,o,c=!1){const output=this.makeTensorInfo(e.outputShape,n),d=this.texData.get(output.dataId);if(e.packedOutput&&(d.isPacked=!0),e.outPackingScheme===l.DENSE){const t=y(e.outputShape);d.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(d.usage=e.outTexUsage),0===r.Wd.sizeFromShape(output.shape))return d.values=r.Wd.getTypedArrayFromDType(output.dtype,0),output;const h=[],f=t.map((input=>{if("complex64"===input.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let t=this.texData.get(input.dataId);if(null==t.texture){if(!e.packedInputs&&r.Wd.sizeFromShape(input.shape)<=Object(r.xd)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:input.shape,texData:null,isUniform:!0,uniformValues:t.values};e.packedInputs&&(t.isPacked=!0,t.shape=input.shape)}else if(!!t.isPacked!=!!e.packedInputs)input=t.isPacked?this.unpackTensor(input):this.packTensor(input),h.push(input),t=this.texData.get(input.dataId);else if(t.isPacked&&!P(t.shape,input.shape)){const e=input,n=input.shape;input.shape=t.shape,input=this.packedReshape(input,n),h.push(input),t=this.texData.get(input.dataId),e.shape=n}return this.uploadToGPU(input.dataId),{shape:input.shape,texData:t,isUniform:!1}}));this.uploadToGPU(output.dataId);const m={shape:output.shape,texData:d,isUniform:!1},x=function(e,t,output){let n="";t.concat(output).forEach((t=>{const o=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const c=t.texData.texShape,{useSqueezeShape:d,uniformShape:l,keptDims:h}=pe(e.packedInputs,t.shape,c);let f="",m="",y="";if(1===l.length&&e.packedInputs){const e=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];f=`${e[0]>1}_${e[1]>1}`}else if(2!==l.length||e.packedInputs){if(l.length>2&&!e.packedInputs){const e=r.Wd.computeStrides(l);y=`${e[0]===c[1]}_${e[e.length-1]===c[1]}`}}else m=`${l[0]>1}_${l[1]>1}`;const x=t.shape.length,v=2===l.length&&r.Wd.arraysEqual(t.shape,c),O=1===r.Wd.sizeFromShape(t.shape),w=r.nd.getBroadcastDims(t.shape,output.shape),k=!e.packedInputs&&x===output.shape.length&&r.Wd.arraysEqual(c,output.texData.texShape),I=e.packedInputs||l.length>2?"":`${c[0]>1}_${c[1]>1}`;n+=`${x}_${k}_${d?h:""}_${l.length}_${O}_${w}_${v}_${f}_${m}_${y}_${I}_${o}`}else{const e=t.isUniform?"uniform":t.texData.texShape;n+=`${t.shape}_${e}_${o}`}}));const o=e.userCode;let c=e.constructor.name;return c+="_"+n+"_"+o+`${Object(r.xd)().getNumber("WEBGL_VERSION")}`,c}(e,f,m),v=this.getAndSaveBinary(x,(()=>function(e,t,n,output){const o=n.map(((input,i)=>{const e={logicalShape:input.shape,texShape:input.isUniform?null:input.texData.texShape,isUniform:input.isUniform,isPacked:!input.isUniform&&input.texData.isPacked,flatOffset:null};return null!=input.texData&&null!=input.texData.slice&&input.texData.slice.flatOffset>0&&(e.flatOffset=input.texData.slice.flatOffset),{name:t.variableNames[i],shapeInfo:e}})),c=o.map((e=>e.shapeInfo)),d={logicalShape:output.shape,texShape:output.texData.texShape,isUniform:!1,isPacked:output.texData.isPacked,flatOffset:null},source=te(o,d,t),l=e.createProgram(source);let h=null;const f=e.getUniformLocation(l,"NAN",!1);1===Object(r.xd)().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(l,"INFINITY",!1));const m=!1,y={},x={},v={};for(let i=0;i<t.variableNames.length;i++){const n=t.variableNames[i];y[n]=e.getUniformLocation(l,n,m),y[`offset${n}`]=e.getUniformLocation(l,`offset${n}`,m),t.enableShapeUniforms&&(x[`${n}Shape`]=e.getUniformLocation(l,`${n}Shape`,m),v[`${n}TexShape`]=e.getUniformLocation(l,`${n}TexShape`,m))}let O,w,k;t.enableShapeUniforms&&(O=e.getUniformLocation(l,"outShape",m),k=e.getUniformLocation(l,"outShapeStrides",m),w=e.getUniformLocation(l,"outTexShape",m));const I=[];return t.customUniforms&&t.customUniforms.forEach(((t,i)=>{I[i]=e.getUniformLocation(l,t.name,m)})),{program:t,source:source,webGLProgram:l,uniformLocations:y,customUniformLocations:I,inShapeInfos:c,outShapeInfo:d,infLoc:h,nanLoc:f,inShapesLocations:x,inTexShapesLocations:v,outShapeLocation:O,outShapeStridesLocation:k,outTexShapeLocation:w}}(this.gpgpu,e,f,m))),O=null!=this.activeTimers;let w;O&&(w=this.startTimer()),function(e,t,n,output,o){t.program.enableShapeUniforms||(me(t.inShapeInfos,n),me([t.outShapeInfo],[output]));const c=output.texData.texture,d=output.texData.texShape;output.texData.isPacked?e.setOutputPackedMatrixTexture(c,d[0],d[1]):e.setOutputMatrixTexture(c,d[0],d[1]),e.setProgram(t.webGLProgram),1===Object(r.xd)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((input,i)=>{const n=t.program.variableNames[i],o=t.uniformLocations[n],c=t.uniformLocations[`offset${n}`],d=t.inShapesLocations[`${n}Shape`],l=t.inTexShapesLocations[`${n}TexShape`];if(d){const{uniformShape:n}=pe(t.program.packedInputs,input.shape,input.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(d,new Int32Array(n));break;case 2:e.gl.uniform2iv(d,new Int32Array(n));break;case 3:e.gl.uniform3iv(d,new Int32Array(n));break;case 4:e.gl.uniform4iv(d,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,input.texData.texShape[0],input.texData.texShape[1]),null!=o)if(input.isUniform)if(r.Wd.sizeFromShape(input.shape)<2)e.gl.uniform1f(o,input.uniformValues[0]);else{let t=input.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(o,t)}else null!=input.texData.slice&&null!=c&&e.gl.uniform1i(c,input.texData.slice.flatOffset),e.setInputMatrixTexture(input.texData.texture,o,i)}));const l=t.outShapeLocation;if(l)switch(output.shape.length){case 1:e.gl.uniform1iv(l,new Int32Array(output.shape));break;case 2:e.gl.uniform2iv(l,new Int32Array(output.shape));break;case 3:e.gl.uniform3iv(l,new Int32Array(output.shape));break;case 4:e.gl.uniform4iv(l,new Int32Array(output.shape))}if(t.outShapeStridesLocation){const n=r.Wd.computeStrides(output.shape);switch(output.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,output.texData.texShape[0],output.texData.texShape[1]),t.program.customUniforms&&o&&t.program.customUniforms.forEach(((n,i)=>{const r=t.customUniformLocations[i],c=o[i];if("float"===n.type)e.gl.uniform1fv(r,c);else if("vec2"===n.type)e.gl.uniform2fv(r,c);else if("vec3"===n.type)e.gl.uniform3fv(r,c);else if("vec4"===n.type)e.gl.uniform4fv(r,c);else if("int"===n.type)e.gl.uniform1iv(r,c);else if("ivec2"===n.type)e.gl.uniform2iv(r,c);else if("ivec3"===n.type)e.gl.uniform3iv(r,c);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(r,c)}})),e.executeProgram()}(this.gpgpu,v,f,m,o),h.forEach((e=>this.disposeIntermediateTensorInfo(e))),O&&(w=this.endTimer(w),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(w)}));const k=Object(r.xd)().get("WEBGL_FLUSH_THRESHOLD");if(k>0){const time=r.Wd.now();time-this.lastGlFlushTime>k&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=time)}if(!Object(r.xd)().getBool("WEBGL_LAZILY_UNPACK")&&d.isPacked&&!1===c){const e=this.unpackTensor(output);return this.disposeIntermediateTensorInfo(output),e}return output}compileAndRun(e,t,n,r,o=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,o)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(r.xd)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(r.Td)((()=>{if(!Object(r.xd)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Object(r.xd)().getBool("DEBUG");Object(r.xd)().set("DEBUG",!1);const t=this.abs(Object(r.Id)(1e-8)).dataSync()[0];if(Object(r.xd)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:o,values:c,texture:d,usage:l,isPacked:f}=t;if(null!=d)return;const m=null!=this.activeTimers;let y;m&&(y=r.Wd.now());let v=t.texShape;if(null==v&&(v=function(e,t=!1){let n=Object(r.xd)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,i)=>i>=e.length-2?r.Wd.nearestLargerEven(e[i]):e[i]))).length&&(e=[2,e[0]])),2!==e.length){const t=r.Wd.squeezeShape(e);e=t.newShape}let o=r.Wd.sizeFromShape(e);if(e.length<=1&&o<=n)return[1,o];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=F(e);let n=2,c=2;return e.length&&([n,c]=_(e)),o=t*(n/2)*(c/2),r.Wd.sizeToSquarishShape(o).map((e=>2*e))}return r.Wd.sizeToSquarishShape(o)}(n,f),t.texShape=v),null!=c){const e=D(n);let d,l=v[1],O=v[0];const w=c instanceof Uint8Array;f?([l,O]=x(v[0],v[1]),d=new we(e,w)):d=new Oe(e,w);const k=this.makeTensorInfo([O,l],o);this.texData.get(k.dataId).usage=w?h.PIXELS:h.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(k.dataId),l,O,c);const I=[[O,l]],N=!0,S=this.runWebGLProgram(d,[k],o,I,N),T=this.texData.get(S.dataId);t.texture=T.texture,t.texShape=T.texShape,t.isPacked=T.isPacked,t.usage=T.usage,this.disposeIntermediateTensorInfo(k),this.texData.delete(S.dataId),t.values=null,m&&(this.uploadWaitMs+=r.Wd.now()-y)}else{const e=this.acquireTexture(v,l,o,f);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(a,e){if("float32"===e||"complex64"===e)return a;if("int32"===e||"bool"===e){const t="int32"===e?new Int32Array(a.length):new Uint8Array(a.length);for(let i=0;i<t.length;++i)t[i]=Math.round(a[i]);return t}throw new Error(`Unknown dtype ${e}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*r.Wd.bytesPerElement(t)}}Bt.nextDataId=0,r.ud.isBrowser()&&Object(r.Fd)("webgl",(()=>new Bt),2);class zt{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=r.nd.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=be(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class Vt{constructor(e,t,n,o=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.nd.assertAndGetBroadcastShape(t,n);const c=this.outputShape.length;this.enableShapeUniforms=be(c);let d="";if(o)if(0===c||1===r.Wd.sizeFromShape(this.outputShape))d="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(d=`\n          ${le(c)} coords = getOutputCoords();\n        `,1===c)this.enableShapeUniforms?d+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":d+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=St("coords",c);this.enableShapeUniforms?d+=`\n            bool nextRowOutOfBounds =\n              (${e[c-2]} + 1) >= outShape[${c} - 2];\n            bool nextColOutOfBounds =\n              (${e[c-1]} + 1) >= outShape[${c} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:d+=`\n            bool nextRowOutOfBounds =\n              (${e[c-2]} + 1) >= ${this.outputShape[c-2]};\n            bool nextColOutOfBounds =\n              (${e[c-1]} + 1) >= ${this.outputShape[c-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${d}\n\n        setOutput(result);\n      }\n    `}}function Ut(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Gt={kernelName:r.sb,backendName:"webgl",kernelFunc:Ut};function Ht(e){const{inputs:t,backend:n}=e,{real:r,imag:o}=t,c=n.makeTensorInfo(r.shape,"complex64"),d=n.texData.get(c.dataId),l=Ut({inputs:{x:r},backend:n}),h=Ut({inputs:{x:o},backend:n});return d.complexTensorInfos={real:l,imag:h},c}const Kt={kernelName:r.z,backendName:"webgl",kernelFunc:Ht},qt="return (a < 0.) ? b * a : a;",Xt="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Yt={kernelName:r.Ab,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{alpha:d}=o,l=n.makeTensorInfo([],"float32",r.Wd.createScalarValue(d,"float32")),h=Object(r.xd)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vt(Xt,c.shape,l.shape):new zt(qt,c.shape,l.shape),f=n.runWebGLProgram(h,[c,l],c.dtype);return n.disposeIntermediateTensorInfo(l),f}},Zt="return (a < 0.) ? b * a : a;",Qt="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Jt={kernelName:r.hc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:o,alpha:c}=t,d=Object(r.xd)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vt(Qt,o.shape,c.shape):new zt(Zt,o.shape,c.shape);return n.runWebGLProgram(d,[o,c],o.dtype)}};function en({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:o}){return({inputs:c,backend:d})=>{const{x:l}=c,h=d,f=o||l.dtype;if(h.shouldExecuteOnCPU([l])&&null!=n){const e=h.texData.get(l.dataId),t=n(e.values,f);return h.makeTensorInfo(l.shape,f,t)}let m;return m=Object(r.xd)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Dt(l.shape,t):new Rt(l.shape,e),h.runWebGLProgram(m,[l],f)}}function tn({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:o=!1,cpuKernelImpl:c,dtype:d}){return({inputs:l,backend:h})=>{const{a:a,b:b}=l,f=h;if(o&&"complex64"===a.dtype){const t=f.texData.get(a.dataId),n=f.texData.get(b.dataId),[o,c]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,o]=t,c={dataId:n.dataId,dtype:n.dtype,shape:a.shape},d={dataId:o.dataId,dtype:o.dtype,shape:b.shape},l=new zt(e,a.shape,b.shape);return f.runWebGLProgram(l,[c,d],Object(r.Vd)(n.dtype,o.dtype))})),d=Ht({inputs:{real:o,imag:c},backend:f});return f.disposeIntermediateTensorInfo(o),f.disposeIntermediateTensorInfo(c),d}const m=d||Object(r.Vd)(a.dtype,b.dtype);if(("string"===a.dtype||"string"===b.dtype||f.shouldExecuteOnCPU([a,b]))&&null!=c){const e=f.texData.get(a.dataId).values,t=f.texData.get(b.dataId).values,n="string"===a.dtype?r.nd.fromUint8ToStringArray(e):e,o="string"===a.dtype?r.nd.fromUint8ToStringArray(t):t,[d,l]=c(a.shape,b.shape,n,o,m),h=f.makeTensorInfo(l,m);return f.texData.get(h.dataId).values=d,h}let y;return y=Object(r.xd)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Vt(t,a.shape,b.shape,n):new zt(e,a.shape,b.shape),f.runWebGLProgram(y,[a,b],m)}}function nn(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?Qt:Zt;if("leakyrelu"===e)return t?Xt:qt;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class rn{constructor(e,t,n,r=!1,o=!1,c=!1,d=null,l=!1,h=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=be(this.outputShape.length);const f=r?e[1]:e[2],m=Math.ceil(f/2),y=r?"i * 2, rc.y":"rc.y, i * 2",x=o?"rc.z, i * 2":"i * 2, rc.z",v=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],O=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let w="",k="";d&&(w=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${d}\n        }`:h?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${d}\n        }`:`vec4 activation(vec4 x) {\n          ${d}\n        }`,k="result = activation(result);");const I=c?"result += getBiasAtOutCoords();":"";c&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),h&&this.variableNames.push("leakyreluAlpha");let N="rc.x",S="rc.x";e[0]<t[0]?N=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(S=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${w}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${m}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${m}; i++) {\n          int batchA = ${N};\n          int batchB = ${S};\n          vec4 a = getMatrixA(batchA, ${y});\n          vec4 b = getMatrixB(batchB, ${x});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${v[0]} * ${O[0]});\n          result += (${v[1]} * ${O[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${I}\n\n        ${k}\n\n        setOutput(result);\n      }\n    `}}const an="return areal * breal - aimag * bimag;",sn="return areal * bimag + aimag * breal;";class on{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=r.nd.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const cn="return a * b;";function un(e){const{inputs:t,backend:n}=e,{a:a,b:b}=t,o=r.nd.upcastType(a.dtype,b.dtype);if("complex64"===a.dtype){const e=n.texData.get(a.dataId),t=n.texData.get(b.dataId),r=new on(an,a.shape,b.shape),o=new on(sn,a.shape,b.shape),c=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:b.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:b.shape}],d=n.runWebGLProgram(r,c,"float32"),l=n.runWebGLProgram(o,c,"float32"),h=Ht({inputs:{real:d,imag:l},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(l),h}if(n.shouldExecuteOnCPU([a,b])){const e=n.texData.get(a.dataId),t=n.texData.get(b.dataId),[r,c]=tt(a.shape,b.shape,e.values,t.values,o),d=n.makeTensorInfo(c,o);return n.texData.get(d.dataId).values=r,d}let c;return c=Object(r.xd)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vt(cn,a.shape,b.shape):new zt(cn,a.shape,b.shape),n.runWebGLProgram(c,[a,b],o)}const dn={kernelName:r.Wb,backendName:"webgl",kernelFunc:un};function ln(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{shape:d}=o,l=n,h=r.Wd.sizeFromShape(c.shape),f=r.Wd.inferFromImplicitShape(d,h),m=r.Wd.sizeFromShape(f);r.Wd.assert(h===m,(()=>`The new shape (${f}) has ${m} elements and the old shape (${c.shape}) has ${h} elements. The new shape and old shape must have the same number of elements.`));const y=l.texData.get(c.dataId);return!y.isPacked||P(c.shape,f)||null!==y.texture&&P(y.shape,f)?(l.incRef(c.dataId),{dataId:c.dataId,shape:f,dtype:c.dtype}):function(input,e,t){const n=[F(input.shape),..._(input.shape)],r={dtype:input.dtype,shape:n,dataId:input.dataId},o=[F(e),..._(e)],c=new $t(o,n),d=[n],output=t.runWebGLProgram(c,[r],input.dtype,d,!0);return{dataId:output.dataId,shape:e,dtype:output.dtype}}(c,f,l)}const pn={kernelName:r.pc,backendName:"webgl",kernelFunc:ln};class hn{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:o,inSize:c,outSize:d}=e;this.outputShape=[o,d];const l=4*Math.floor(n/4),h=n%4;let f="sumValue += dot(values, ones);";if(null!=t){const e=1/t;f=`sumValue += dot(values * ${r.Wd.isInt(e)?e.toPrecision(2):e}, ones);`}let m="";c%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${c}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===h}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}class fn{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:o,outSize:c}=e;this.outputShape=[r,c];let d="0.0",l="";"prod"===t?d="1.0":"min"===t?(d="1.0 / 1e-20",l="min"):"max"===t&&(d="-1.0 / 1e-20",l="max");let h=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?h="sumValue":"prod"===t?h="prodValue":"all"===t?h="allValue":"any"===t&&(h="anyValue");const f=4*Math.floor(n/4),m=n%4;let y=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,x="vec4";"all"===t?(d="1.0",y="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",x="bvec4"):"any"===t&&(d="0.0",y="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",x="bvec4");let v="";o%n>0&&(v=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${d};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${v}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${d});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${f}; i += 4) {\n          int inIdx = inOffset + i;\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${y}\n        }\n\n        int inIdx = inOffset + ${f};\n        if (${1===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${2===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${3===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${y}\n        }\n        setOutput(${h});\n      }\n    `}}function mn(e,t,n,o){const c=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],o=r.nd.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:o,outSize:Math.ceil(n/o)})}return t}(e.shape);let d=e;for(let i=0;i<c.length;i++){const{inSize:r,windowSize:l,outSize:h}=c[i];let f,m;f="mean"===n?0===i?new hn({windowSize:l,inSize:r,batchSize:e.shape[0],outSize:h},r):new hn({windowSize:l,inSize:r,batchSize:e.shape[0],outSize:h}):new fn({windowSize:l,inSize:r,batchSize:e.shape[0],outSize:h},n),m=d,d=o.runWebGLProgram(f,[d],t),m.dataId!==e.dataId&&o.disposeIntermediateTensorInfo(m)}return d}class bn{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.rank=n.length;const r=le(this.rank),o=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let i=0;i<e.length;i++)r[e[i]]=n[i];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class gn{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=le(this.rank),o=Nt("rc",this.rank),c=new Array(this.rank);for(let i=0;i<t.length;i++)c[t[i]]=o[i];const d=`vec2(${c.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${n[this.rank-1]}`,h=`getChannel(getA(${c.join()}), ${d})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${h};\n      if(${l}) {\n        result[1] = ${h};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${h};\n        if(${l}) {\n          result[3] = ${h};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function yn(e,t,n){const o=Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gn(e.shape,t):new bn(e.shape,t);return n.runWebGLProgram(o,[e],e.dtype)}function xn(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o;return function(e,t,n,o){const c=t,d=e.shape.length,l=r.Wd.parseAxisParam(c,e.shape);let h=l;const f=r.nd.getAxesPermutation(h,d),m=null!=f;let y=e;m&&(y=yn(e,f,o),h=r.nd.getInnerMostAxes(h.length,d)),r.nd.assertAxesAreInnerMostDims("sum",h,d);const[x,v]=r.nd.computeOutAndReduceShapes(y.shape,h);let O=x;n&&(O=r.nd.expandShapeToKeepDim(x,l));const w=r.Wd.sizeFromShape(v),k=ln({inputs:{x:y},attrs:{shape:[r.Wd.sizeFromShape(e.shape)/w,w]},backend:o}),I=mn(k,Object(r.Pd)(e.dtype),"sum",o),N=ln({inputs:{x:I},attrs:{shape:O},backend:o});return o.disposeIntermediateTensorInfo(k),o.disposeIntermediateTensorInfo(I),m&&o.disposeIntermediateTensorInfo(y),N}(c,d,l,n)}const vn={kernelName:r.Yc,backendName:"webgl",kernelFunc:xn};function On(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{perm:c}=r,d=n,l=o.shape.length,h=new Array(l);for(let i=0;i<h.length;i++)h[i]=o.shape[c[i]];let f;if(d.shouldExecuteOnCPU([o])){const e=d.texData.get(o.dataId).values,t=kt(e,o.shape,o.dtype,c,h);f=d.makeTensorInfo(h,o.dtype);d.texData.get(f.dataId).values=t}else f=yn(o,c,d);return f}const wn={kernelName:r.gd,backendName:"webgl",kernelFunc:On};function kn({a:a,b:b,transposeA:e,transposeB:t,backend:n,bias:o=null,preluActivationWeights:c=null,leakyreluAlpha:d=0,activation:l=null}){const h=a.shape.length,f=b.shape.length,m=e?a.shape[h-2]:a.shape[h-1],y=t?b.shape[f-1]:b.shape[f-2],x=e?a.shape[h-1]:a.shape[h-2],v=t?b.shape[f-2]:b.shape[f-1],O=a.shape.slice(0,-2),w=b.shape.slice(0,-2),k=r.Wd.sizeFromShape(O),I=r.Wd.sizeFromShape(w),N=k===I||1===k||1===I;r.Wd.assert(h>=2&&f>=2&&N,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${O}) and (${w}).`));const S=(k>I?a.shape.slice(0,-2):b.shape.slice(0,-2)).concat([x,v]);r.Wd.assert(m===y,(()=>`Error in matMul: inner shapes (${m}) and (${y}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${e} and transposeB=${t} must match.`));const T=e?[k,m,x]:[k,x,m],$=t?[I,v,y]:[I,y,v],j=ln({inputs:{x:a},backend:n,attrs:{shape:T}}),C=ln({inputs:{x:b},backend:n,attrs:{shape:$}}),E=[j,C],A=Math.max(k,I),R=e?j.shape[1]:j.shape[2],F=null!=o,_=null!=c,D="leakyrelu"===l,M=null!=l?nn(l,!0):null;let P;if((1===x||1===v)&&R>1e3&&!1===(F||_||D||null!=M)){let r=j,o=C;e&&(r=On({inputs:{x:j},backend:n,attrs:{perm:[0,2,1]}}),E.push(r)),t&&(o=On({inputs:{x:C},backend:n,attrs:{perm:[0,2,1]}}),E.push(o));const c=1===v;let d=r;1!==v&&(d=ln({inputs:{x:r},backend:n,attrs:{shape:[A,R,1]}}),E.push(d));const l=1===v?2:1;let h=o;c&&(h=ln({inputs:{x:o},backend:n,attrs:{shape:[A,1,R]}}),E.push(h));const f=un({inputs:{a:d,b:h},backend:n});P=xn({inputs:{x:f},backend:n,attrs:{axis:l,keepDims:!0}}),E.push(f)}else{const l=Object(r.Vd)(a.dtype,b.dtype),h=new rn(T,$,[A,x,v],e,t,F,M,_,D),f=[j,C];if(null!=o&&f.push(o),_&&f.push(c),D){const e=n.makeTensorInfo([],"float32",r.Wd.createScalarValue(d,"float32"));f.push(e),E.push(e)}P=n.runWebGLProgram(h,f,l)}const W=ln({inputs:{x:P},backend:n,attrs:{shape:S}});E.push(P);for(const i of E)n.disposeIntermediateTensorInfo(i);return W}const In={kernelName:r.ld,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b,bias:o,preluActivationWeights:c}=t,{transposeA:d,transposeB:l,activation:h,leakyreluAlpha:f}=r;return kn({a:a,b:b,transposeA:d,transposeB:l,backend:n,bias:o,preluActivationWeights:c,leakyreluAlpha:f,activation:h})}},Nn="return abs(x);";const Sn={kernelName:r.a,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:o}=t;if(n.shouldExecuteOnCPU([o])&&"complex64"!==o.dtype){const e=n.texData.get(o.dataId),t=ut(e.values);return n.makeTensorInfo(o.shape,o.dtype,t)}let c;return c=Object(r.xd)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Dt(o.shape,Nn):new Rt(o.shape,Nn),n.runWebGLProgram(c,[o],o.dtype)}},Tn=en({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),$n={kernelName:r.b,backendName:"webgl",kernelFunc:Tn},jn=en({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Cn={kernelName:r.c,backendName:"webgl",kernelFunc:jn},En="return a + b;",An=tn({opSnippet:En,packedOpSnippet:En,supportsComplex:!0,cpuKernelImpl:_e}),Rn={kernelName:r.d,backendName:"webgl",kernelFunc:An};class Fn{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,i)=>`T${i}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class _n{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,i)=>`T${i}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Dn={kernelName:r.e,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:o}=t,c=n;if(1===c.length)return Ut({inputs:{x:c[0]},backend:o});if(c.length>Object(r.xd)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(c.length/2),n=e({inputs:c.slice(0,t),backend:o}),r=e({inputs:c.slice(t),backend:o});return e({inputs:[n,r],backend:o})}const d=c.map((e=>e.dtype)).reduce(((e,t)=>Object(r.Vd)(e,t))),l=c.map((e=>e.shape)),h=Object(r.xd)().getBool("WEBGL_PACK")?new _n(c[0].shape,l):new Fn(c[0].shape,l);return o.runWebGLProgram(h,c,d)}};const Mn={kernelName:r.f,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o,h=c.shape.length,f=r.Wd.parseAxisParam(d,c.shape);let m=f;const y=r.nd.getAxesPermutation(m,h);let x=c;null!=y&&(x=On({inputs:{x:c},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,h)),r.nd.assertAxesAreInnerMostDims("all",m,h);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=ln({inputs:{x:x},backend:n,attrs:{shape:[-1,r.Wd.sizeFromShape(O)]}}),k=mn(w,w.dtype,"all",n);let I;if(l){I=ln({inputs:{x:k},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}})}else I=ln({inputs:{x:k},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),null!=y&&n.disposeIntermediateTensorInfo(x),I}};const Pn={kernelName:r.g,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o,h=c.shape.length,f=r.Wd.parseAxisParam(d,c.shape);let m=f;const y=r.nd.getAxesPermutation(m,h);let x=c;null!=y&&(x=On({inputs:{x:c},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,h)),r.nd.assertAxesAreInnerMostDims("any",m,h);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=ln({inputs:{x:x},backend:n,attrs:{shape:[-1,r.Wd.sizeFromShape(O)]}}),k=mn(w,w.dtype,"any",n);let I;if(l){I=ln({inputs:{x:k},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}})}else I=ln({inputs:{x:k},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),null!=y&&n.disposeIntermediateTensorInfo(x),I}};class Wn{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:c}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,c];const d="max"===t?">":"<",l=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${l};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${d} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Ln{constructor(e,t,n,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.Wd.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const c=e[e.length-1],d=Math.ceil(c/t);this.outputShape=e.slice(0,-1),d>1&&this.outputShape.push(d),o||this.variableNames.push("bestIndicesA");const l=this.outputShape,h=l.length,f=le(h),m=St("coords",h);let y,x;if(1===d){x=h+1;const e=le(x);y=`\n        ${e} sourceLocR = ${e}(${m.join()}, 0);\n        ++${m[h-1]};\n        ${e} sourceLocG = ${e}(${m.join()}, 0);\n        ++${m[h-2]};\n        ${e} sourceLocA = ${e}(${m.join()}, 0);\n        --${m[h-1]};\n        ${e} sourceLocB = ${e}(${m.join()}, 0);\n        --${m[h-2]};`}else x=h,y=`\n        ${f} sourceLocR = coords;\n        ++${m[h-1]};\n        ${f} sourceLocG = coords;\n        ++${m[h-2]};\n        ${f} sourceLocA = coords;\n        --${m[h-1]};\n        ${f} sourceLocB = coords;\n        --${m[h-2]};`;const v=["x","y","z","w","u","v"].slice(0,x),O="."+v[x-1],w=v.map((e=>"int "+e)),k=St("sourceLocR",x-1).concat("inIdx.r"),I=St("sourceLocG",x-1).concat("inIdx.g"),N=St("sourceLocB",x-1).concat("inIdx.b"),S=St("sourceLocA",x-1).concat("inIdx.a"),T="max"===n?"greaterThan":"lessThan",$=o?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${k.join()}),\n                             getBestIndicesAChannel(${I.join()}),\n                             getBestIndicesAChannel(${N.join()}),\n                             getBestIndicesAChannel(${S.join()})));`,j=`vec4(\n            getAChannel(${k.join()}),\n            hasNextCol ? getAChannel(${I.join()}) : 0.,\n            hasNextRow ? getAChannel(${N.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${S.join()}) : 0.)`,C=o?"":`\n      float getBestIndicesAChannel(${w.join()}) {\n        return getChannel(getBestIndicesA(${v.join()}),\n                                          vec2(${v.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${w.join()}) {\n        return getChannel(getA(${v.join()}),\n                               vec2(${v.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${f} coords = getOutputCoords();\n        bool hasNextCol = ${m[h-1]} < ${l[h-1]-1};\n        bool hasNextRow = ${m[h-2]} < ${l[h-2]-1};\n        ${y}\n        ivec4 srcIdx = ivec4(sourceLocR${O}, sourceLocG${O},\n          sourceLocB${O}, sourceLocA${O}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${j};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${$}\n          vec4 candidate = ${j};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${T}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Bn(e,t,n,o=null){let c=t.shape[0],d=t.shape[1];null!=o&&(c=o.shape[0],d=o.shape[1]);const l=r.nd.computeOptimalWindowSize(d),h={windowSize:l,inSize:d,batchSize:c,outSize:Math.ceil(d/l)},f=new Wn(h,n,null==o),m=[t];null!=o&&m.push(o);const output=e.runWebGLProgram(f,m,"int32");if(1===output.shape[1])return output;const y=Bn(e,t,n,output);return e.disposeIntermediateTensorInfo(output),y}function zn(e,t,n,o=null){const c=null!=o?o.shape:t.shape,d=c[c.length-1],l=r.nd.computeOptimalWindowSize(d),h=new Ln(c,l,n,null==o),f=null==o?[t]:[t,o],output=e.runWebGLProgram(h,f,"int32");if(output.shape.length===t.shape.length){const r=zn(e,t,n,output);return e.disposeIntermediateTensorInfo(output),r}return output}function Vn(e,t,n,o){const c=[n];if(r.nd.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),c,t.shape.length),!Object(r.xd)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],d=e.texData.get(t.dataId);let l=t;null!==d&&d.isPacked&&(l=e.unpackTensor(t),n.push(l));const[h,f]=r.nd.computeOutAndReduceShapes(l.shape,c),m=r.Wd.sizeFromShape(f),y=ln({inputs:{x:l},backend:e,attrs:{shape:[-1,m]}});n.push(y);const x=Bn(e,y,o);n.push(x);const v=ln({inputs:{x:x},backend:e,attrs:{shape:h}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),v}return zn(e,t,o)}const Un={kernelName:r.h,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d}=o;let l=r.Wd.parseAxisParam(d,c.shape);const h=r.nd.getAxesPermutation(l,c.shape.length);let f=c;const m=[];null!=h&&(f=On({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),l=r.nd.getInnerMostAxes(l.length,f.shape.length)),r.nd.assertAxesAreInnerMostDims("argMax",[l[0]],f.shape.length);const y=Vn(n,f,l[0],"max");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const Gn={kernelName:r.i,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d}=o;let l=r.Wd.parseAxisParam(d,c.shape);const h=r.nd.getAxesPermutation(l,c.shape.length);let f=c;const m=[];null!=h&&(f=On({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),l=r.nd.getInnerMostAxes(l.length,f.shape.length)),r.nd.assertAxesAreInnerMostDims("argMin",[l[0]],f.shape.length);const y=Vn(n,f,l[0],"min");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},Hn=en({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Kn={kernelName:r.j,backendName:"webgl",kernelFunc:Hn},qn=en({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),Xn={kernelName:r.k,backendName:"webgl",kernelFunc:qn},Yn=en({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),Zn={kernelName:r.l,backendName:"webgl",kernelFunc:Yn},Qn=tn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Jn={kernelName:r.m,backendName:"webgl",kernelFunc:Qn},er=en({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),nr={kernelName:r.n,backendName:"webgl",kernelFunc:er};class rr{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,d=e.strideHeight,l=e.strideWidth,h=e.dilationHeight,f=e.dilationWidth,m=e.effectiveFilterHeight,y=e.effectiveFilterWidth,x=e.padInfo.top,v=e.padInfo.left;this.outputShape=e.outShape;const O="avg"===t,w=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,k=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let I="0.0";if(O||(I="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${d}, ${l});\n        const ivec2 pads = ivec2(${x}, ${v});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${m};\n              wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${y};\n                wC += ${f}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?w:k:`wR * ${y} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let N=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(N="avgValue / count");const S=4*Math.floor(c/4),T=c%4,$=`\n      if (${O}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${d}, ${l});\n      const ivec2 pads = ivec2(${x}, ${v});\n      const float initializationValue = ${I};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${I});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${m};\n            wR += ${h}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${S}; wC += 4) {\n            int xC = xCCorner + wC * ${f};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              getValue(batch, xR, xC + 3 * ${f}, d)\n            );\n\n            ${$}\n          }\n\n          int xC = xCCorner + ${S};\n          if (${1===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${2===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${3===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              initializationValue\n            );\n\n            ${$}\n          }\n        }\n        setOutput(${N});\n      }\n    `}}class ar{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,d=e.strideDepth,l=e.strideHeight,h=e.strideWidth,f=e.dilationDepth,m=e.dilationHeight,y=e.dilationWidth,x=e.effectiveFilterDepth,v=e.effectiveFilterHeight,O=e.effectiveFilterWidth,w=e.padInfo.front,k=e.padInfo.top,I=e.padInfo.left;this.outputShape=e.outShape;const N="avg"===t;let S="0.0";if(N||(S="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${d}, ${l}, ${h});\n        const ivec3 pads = ivec3(${w}, ${k}, ${I});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${x};\n              wD += ${f}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${v};\n                wR += ${m}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${O};\n                  wC += ${y}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${v} * ${O} +\n                      wR * ${O} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let T=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(T="avgValue / count");const $=4*Math.floor(c/4),j=c%4,C=`\n      if (${N}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${d}, ${l}, ${h});\n      const ivec3 pads = ivec3(${w}, ${k}, ${I});\n      const float initializationValue = ${S};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${S});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${x};\n            wD += ${f}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${v};\n            wR += ${m}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${$}; wC += 4) {\n              int xC = xCCorner + wC * ${y};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${y}, ch)\n              );\n\n              ${C}\n            }\n\n            int xC = xCCorner + ${$};\n            if (${1===j}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${2===j}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${3===j}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                initializationValue\n              );\n\n              ${C}\n            }\n          }\n          setOutput(${T});\n        }\n      }\n    `}}const sr={kernelName:r.o,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t;G(c,"avgPool");const{filterSize:d,strides:l,pad:h,dimRoundingMode:f}=o;r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const m=r.nd.computePool2DInfo(c.shape,d,l,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&r.Wd.arraysEqual(m.inShape,m.outShape))return Ut({inputs:{x:c},backend:n});const y=new rr(m,"avg",!1);return n.runWebGLProgram(y,[c],"float32")}};const or={kernelName:r.p,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{filterSize:d,strides:l,pad:h,dimRoundingMode:f,dataFormat:m}=o,y=r.nd.computePool3DInfo(c.shape,d,l,[1,1,1],h,f,m),x=new ar(y,"avg",!1);return n.runWebGLProgram(x,[c],"float32")}};class ir{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c=e.dilationHeight,d=e.dilationWidth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=l-1-e.padInfo.top,m=h-1-e.padInfo.left,y=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${f}, ${m});\n      const float avgMultiplier = float(${y});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${c}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${h};\n            wC+= ${d}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cr{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,c=e.strideHeight,d=e.strideWidth,l=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,m=e.effectiveFilterDepth,y=e.effectiveFilterHeight,x=e.effectiveFilterWidth,v=m-1-e.padInfo.front,O=y-1-e.padInfo.top,w=x-1-e.padInfo.left,k=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${v}, ${O}, ${w});\n      const float avgMultiplier = float(${k});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${m};\n            wD += ${l}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${y};\n              wR += ${h}) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${x};\n                wC += ${f}) {\n              float dyC = float(dyCCorner + wC) / ${d}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ur={kernelName:r.q,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,input:input}=t,d=input,{filterSize:l,strides:h,pad:f,dimRoundingMode:m}=o,y=r.nd.computePool3DInfo(d.shape,l,h,[1,1,1],f,m),x=new cr(y);return n.runWebGLProgram(x,[c],d.dtype)}};const dr={kernelName:r.r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,input:input}=t,d=input;G([c,input],"avgPoolGrad");const{filterSize:l,strides:h,pad:f}=o,m=r.nd.computePool2DInfo(d.shape,l,h,1,f),y=new ir(m);return n.runWebGLProgram(y,[c],d.dtype)}};const lr={kernelName:r.s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b}=t,{transposeA:o,transposeB:c}=r;return kn({a:a,b:b,transposeA:o,transposeB:c,backend:n})}};class pr{constructor(e,t,n,o,c,d){this.outputShape=[],this.variableNames=["x","mean","variance"],r.nd.assertAndGetBroadcastShape(e,t),r.nd.assertAndGetBroadcastShape(e,n);let l="0.0";null!=o&&(r.nd.assertAndGetBroadcastShape(e,o),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let h="1.0";null!=c&&(r.nd.assertAndGetBroadcastShape(e,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${l};\n        float scale = ${h};\n        float inv = scale * inversesqrt(variance + float(${d}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class fr{constructor(e,t,n,o,c,d){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],r.nd.assertAndGetBroadcastShape(e,t),r.nd.assertAndGetBroadcastShape(e,n);let l="vec4(0.0)";null!=o&&(r.nd.assertAndGetBroadcastShape(e,o),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let h="vec4(1.0)";null!=c&&(r.nd.assertAndGetBroadcastShape(e,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${l};\n        vec4 scale = ${h};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${d}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const mr={kernelName:r.kb,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:o,mean:c,variance:d,offset:l,scale:h}=e;r.Wd.assert(c.shape.length===d.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.Wd.assert(null==l||c.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.Wd.assert(null==h||c.shape.length===h.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:f}=n;null==f&&(f=.001);const m=[o,c,d];let y=null;null!=l&&(y=l.shape,m.push(l));let x=null;null!=h&&(x=h.shape,m.push(h));const v=Object(r.xd)().getBool("WEBGL_PACK_NORMALIZATION")?new fr(o.shape,c.shape,d.shape,y,x,f):new pr(o.shape,c.shape,d.shape,y,x,f);return t.runWebGLProgram(v,m,m[0].dtype)}};class gr{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=le(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return yr.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let body;body=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,i)=>`sourceLoc.${yr[i]} = start[${i}] + coords.${yr[i]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${body}\n        setOutput(getSource(${n}));\n      }\n    `}}const yr=["x","y","z","w","u","v"];class xr{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=le(this.rank),n=St("coords",this.rank),r=St("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,c=`getChannel(getSource(${r.join()}), ${o})`,d=`\n      result.x = ${c};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${c};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${c};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${c};\n        }\n      }\n    `,h=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,i)=>`start[${i}]`)).join()});`:e.map(((e,i)=>`${r[i]} = ${n[i]} + start[${i}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${h}\n        vec4 result = vec4(0.);\n        ${d}\n        ${l}\n        setOutput(result);\n      }\n    `}}function vr(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{begin:d,size:l}=o,[h,f]=r.Ld.parseSliceParams(c,d,l);if(r.Ld.assertParamsValid(c,h,f),0===r.Wd.sizeFromShape(f))return n.makeTensorInfo(f,c.dtype,[]);if(n.shouldExecuteOnCPU([c])||"string"===c.dtype){const e=n.texData.get(c.dataId),t=lt(e.values,h,f,c.shape,c.dtype);return n.makeTensorInfo(f,c.dtype,t)}const{isPacked:m}=n.texData.get(c.dataId),y=r.Ld.isSliceContinous(c.shape,h,f);if(m||!y){const e=Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xr(f):new gr(f),t=[h];return n.runWebGLProgram(e,[c],c.dtype,t)}return n.uploadToGPU(c.dataId),function(e,t,n,o){const c=o.texData.get(e.dataId),d=o.makeTensorInfo(n,e.dtype),l=o.texData.get(d.dataId);Object.assign(l,c),l.refCount=1,l.shape=n,l.dtype=e.dtype;let h=r.Ld.computeFlatOffset(t,r.Wd.computeStrides(e.shape));c.slice&&(h+=c.slice.flatOffset),l.slice={flatOffset:h,origDataId:c.slice&&c.slice.origDataId||e.dataId};const f=o.dataRefCount.get(l.slice.origDataId)||1;return o.dataRefCount.set(l.slice.origDataId,f+1),d}(c,h,f,n)}const Or={kernelName:r.Fc,backendName:"webgl",kernelFunc:vr},wr={kernelName:r.t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{blockShape:d,crops:l}=o;r.Wd.assert(c.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const h=d.reduce(((a,b)=>a*b)),f=r.nd.getReshaped(c.shape,d,h),m=r.nd.getPermuted(f.length,d.length),y=r.nd.getReshapedPermuted(c.shape,d,h),x=r.nd.getSliceBeginCoords(l,d.length),v=r.nd.getSliceSize(y,l,d.length),O=[],w=ln({inputs:{x:c},backend:n,attrs:{shape:f}}),k=On({inputs:{x:w},backend:n,attrs:{perm:m}}),I=ln({inputs:{x:k},backend:n,attrs:{shape:y}}),N=vr({inputs:{x:I},backend:n,attrs:{begin:x,size:v}});return O.push(w),O.push(k),O.push(I),O.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};const kr={kernelName:r.u,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:d}=r,l=n.readSync(o.dataId),h=n.readSync(c.dataId),f=De(l,h,c.dtype,c.shape,d);return n.makeTensorInfo([d],c.dtype,f)}},Ir=tn({opSnippet:"return float(a != b);",cpuKernelImpl:at,dtype:"bool"}),Nr={kernelName:r.bc,backendName:"webgl",kernelFunc:Ir};function Sr(e){const{inputs:t,backend:n}=e,{input:input}=t;return Ut({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.real},backend:n})}const Tr={kernelName:r.kc,backendName:"webgl",kernelFunc:Sr};const $r={kernelName:r.w,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:o,attrs:c}=t,{x:d}=n,{dtype:l}=c;if("complex64"===l){if("complex64"===d.dtype)return Ut({inputs:{x:d},backend:o});const t=r.Xd(d.shape),n=e({inputs:{x:d},backend:o,attrs:{dtype:"float32"}}),c=Ht({inputs:{real:n,imag:t},backend:o});return t.dispose(),o.disposeIntermediateTensorInfo(n),c}if("complex64"===d.dtype){const t=Sr({inputs:{input:d},backend:o}),n=e({inputs:{x:t},backend:o,attrs:{dtype:l}});return o.disposeIntermediateTensorInfo(t),n}if(!r.Wd.hasEncodingLoss(d.dtype,l)){const e=Ut({inputs:{x:d},backend:o});return{dataId:e.dataId,shape:e.shape,dtype:l}}if("int32"===l)return function(input,e){const t=new Rt(input.shape,"return float(int(x));"),output=e.runWebGLProgram(t,[input],"int32");return{dataId:output.dataId,shape:output.shape,dtype:output.dtype}}(d,o);if("bool"===l){const e=o.makeTensorInfo([],"bool",r.Wd.getTypedArrayFromDType("bool",1)),t=Ir({inputs:{a:d,b:e},backend:o});return o.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${d.dtype} to ${l}`)}},jr="return ceil(x);",Cr=en({opSnippet:jr,packedOpSnippet:jr,cpuKernelImpl:Pe}),Er={kernelName:r.x,backendName:"webgl",kernelFunc:Cr};class Ar{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Rr{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Fr={kernelName:r.y,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{clipValueMin:d,clipValueMax:l}=o;let h;h=Object(r.xd)().getBool("WEBGL_PACK_CLIP")?new Rr(c.shape):new Ar(c.shape);const f=[[d],[l]];return n.runWebGLProgram(h,[c],c.dtype,f)}};class _r{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Dr(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Mr={kernelName:r.A,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,o=n.texData.get(r.dataId),c=new _r(r.shape),d=[Dr(r,o.complexTensorInfos.real),Dr(r,o.complexTensorInfos.imag)];return n.runWebGLProgram(c,d,d[0].dtype)}};class Pr{constructor(e){this.outputShape=[],this.outputShape=r.nd.computeOutShape(e,1),this.variableNames=e.map(((e,i)=>`T${i}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let i=1;i<t.length;i++)t[i]=t[i-1]+e[i][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<t.length;i++){const e=t[i-1];n.push(`else if (yC < ${t[i]}) setOutput(getT${i}(yR, yC-${e}));`)}const o=t.length,c=t[t.length-1];n.push(`else setOutput(getT${o}(yR, yC-${c}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Wr{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=r.nd.computeOutShape(e,t);const n=this.outputShape,o=n.length,c=le(o),d=St("coords",o),l=["x","y","z","w","u","v"].slice(0,o);this.variableNames=e.map(((e,i)=>`T${i}`));const h=new Array(e.length-1);h[0]=e[0][t];for(let i=1;i<h.length;i++)h[i]=h[i-1]+e[i][t];const f=l[t],m=l.slice(-2),y=l.join();let x=`if (${f} < ${h[0]}) {\n        return getChannel(\n            getT0(${y}), vec2(${m.join()}));\n        }`;for(let i=1;i<h.length;i++){const e=h[i-1];x+=`\n        if (${f} < ${h[i]}  && ${f} >= ${h[i-1]}) {\n          return getChannel(\n            getT${i}(${Lr(l,f,e)}),\n            vec2(${Lr(m,f,e)}));\n        }`}const v=h.length,O=h[h.length-1];x+=`\n        return getChannel(\n          getT${v}(${Lr(l,f,O)}),\n          vec2(${Lr(m,f,O)}));`,this.userCode=`\n      float getValue(${l.map((e=>"int "+e))}) {\n        ${x}\n      }\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${d}), 0., 0., 0.);\n\n        ${d[o-1]} = ${d[o-1]} + 1;\n        if (${d[o-1]} < ${n[o-1]}) {\n          result.g = getValue(${d});\n        }\n\n        ${d[o-2]} = ${d[o-2]} + 1;\n        if (${d[o-2]} < ${n[o-2]}) {\n          result.a = getValue(${d});\n        }\n\n        ${d[o-1]} = ${d[o-1]} - 1;\n        if (${d[o-2]} < ${n[o-2]} &&\n            ${d[o-1]} < ${n[o-1]}) {\n          result.b = getValue(${d});\n        }\n        setOutput(result);\n      }\n    `}}function Lr(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function Br(e){const{inputs:t,backend:n}=e,{input:input}=t;return Ut({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.imag},backend:n})}const zr={kernelName:r.tb,backendName:"webgl",kernelFunc:Br};function Vr(e,t,n){const o=e[0].dtype;if("complex64"===o){const r=e.map((e=>Sr({inputs:{input:e},backend:n}))),o=e.map((e=>Br({inputs:{input:e},backend:n}))),c=Vr(r,t,n),d=Vr(o,t,n),l=Ht({inputs:{real:c,imag:d},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),o.forEach((i=>n.disposeIntermediateTensorInfo(i))),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),l}let c=n.shouldExecuteOnCPU(e);if("string"===o&&(c=!0),c){const c=e.map((e=>{const o=r.Wd.sizeFromShape(e.shape.slice(t));return ln({inputs:{x:e},backend:n,attrs:{shape:[-1,o]}})})),d=c.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),l=r.nd.computeOutShape(c.map((e=>e.shape)),1),h=1===c[0].shape[0],f=We(d,l,o,h),m=r.nd.computeOutShape(e.map((e=>e.shape)),t),y=n.makeTensorInfo(m,o,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}if(e.length>Object(r.xd)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),o=Vr(e.slice(0,r),t,n),c=Vr(e.slice(r),t,n),d=Vr([o,c],t,n);return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(c),d}if(Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new Wr(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,o)}const{tensors2D:d,outShape:l}=function(e,t,n){const o=r.nd.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>ln({inputs:{x:e},attrs:{shape:[-1,r.Wd.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:o}}(e,t,n),h=new Pr(d.map((e=>e.shape))),f=n.runWebGLProgram(h,d,o);d.forEach((e=>n.disposeIntermediateTensorInfo(e)));const m=ln({inputs:{x:f},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(f),m}function Ur(e){const{inputs:t,backend:n,attrs:o}=e,{axis:c}=o,d=r.Wd.parseAxisParam(c,t[0].shape)[0],l=r.nd.computeOutShape(t.map((e=>e.shape)),d);if(0===r.Wd.sizeFromShape(l))return n.makeTensorInfo(l,t[0].dtype,[]);const h=t.filter((e=>r.Wd.sizeFromShape(e.shape)>0));if(1===h.length)return Ut({inputs:{x:h[0]},backend:n});const f=h.map((e=>e.shape));return r.nd.assertParamsConsistent(f,d),Vr(h,d,n)}const Gr={kernelName:r.B,backendName:"webgl",kernelFunc:Ur};class Hr{constructor(e,t=!1,n=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const c=e.padInfo.top,d=e.padInfo.left,l=e.strideHeight,h=e.strideWidth,f=e.dilationHeight,m=e.dilationWidth,y=e.filterHeight,x=e.filterWidth,v=4*Math.floor(e.inChannels/4),O=e.inChannels%4,w="channelsLast"===e.dataFormat,k=w?1:2,I=w?2:3,N=w?3:1;let S="",T="";n&&(S=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,T="result = activation(result);");const $=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${S}\n\n      const ivec2 strides = ivec2(${l}, ${h});\n      const ivec2 pads = ivec2(${c}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${N}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${k}], coords[${I}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${y}; wR++) {\n          int xR = xRCorner + wR * ${f};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC++) {\n            int xC = xCCorner + wC * ${m};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${v}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${w}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===O}) {\n\n              if (${w}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${v}) *\n                    getW(wR, wC, ${v}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${v}, xR, xC) *\n                    getW(wR, wC, ${v}, d2);\n              }\n\n            } else if (${2===O}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${v}, d2),\n                getW(wR, wC, ${v} + 1, d2)\n              );\n\n              if (${w}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${v}),\n                  getX(batch, xR, xC, ${v} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${v}, xR, xC),\n                  getX(batch, ${v} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===O}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${v}, d2),\n                getW(wR, wC, ${v} + 1, d2),\n                getW(wR, wC, ${v} + 2, d2)\n              );\n\n              if (${w}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${v}),\n                  getX(batch, xR, xC, ${v} + 1),\n                  getX(batch, xR, xC, ${v} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${v}, xR, xC),\n                  getX(batch, ${v} + 1, xR, xC),\n                  getX(batch, ${v} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${$}\n        ${T}\n        setOutput(result);\n      }\n    `}}class Kr{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,o=e.strideDepth,c=e.strideHeight,d=e.strideWidth,l=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,m=e.filterDepth,y=e.filterHeight,x=e.filterWidth,v=4*Math.floor(e.inChannels/4),O=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${c}, ${d});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${m}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${y}; wR++) {\n            int xR = xRCorner + wR * ${h};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${x}; wC++) {\n              int xC = xCCorner + wC * ${f};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${v}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===O}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${v}) *\n                  getW(wF, wR, wC, ${v}, d2);\n              } else if (${2===O}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${v}),\n                  getX(batch, xF, xR, xC, ${v} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${v}, d2),\n                  getW(wF, wR, wC, ${v} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===O}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${v}),\n                  getX(batch, xF, xR, xC, ${v} + 1),\n                  getX(batch, xF, xR, xC, ${v} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${v}, d2),\n                  getW(wF, wR, wC, ${v} + 1, d2),\n                  getW(wF, wR, wC, ${v} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qr{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=be(this.outputShape.length);const{dataFormat:n}=t,r=K(),o="channelsLast"===n,c=o?0:1,d=o?1:2,l=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let h="";for(let e=0;e<=1;e++)for(let col=0;col<=1;col++)h+=`\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${e};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${c}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${d}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${h}\n\n        ${r.output} = result;\n      }\n    `}}function Xr({x:e,filter:filter,convInfo:t,backend:n,bias:o=null,preluActivationWeights:c=null,leakyreluAlpha:d=0,activation:l=null}){const h=e.shape,f=n.texData.get(e.dataId),m=t.inChannels,y=h[0]*h[1]*h[2],x=t.outChannels,v="channelsLast"===t.dataFormat;let O;const w=[];if(!((1===y||1===x)&&m>1e3)&&f.isPacked&&v&&null!=f.texture&&h[2]%2!=0&&r.Wd.arraysEqual(f.shape.slice(-3),h.slice(-3))){const m=h[0]*h[1]*(h[2]+1),y={dataId:e.dataId,shape:[1,m,t.inChannels],dtype:e.dtype},x=f.shape;f.shape=f.shape.slice(),f.shape[f.shape.length-2]++,r.Wd.assert(P(f.shape,y.shape),(()=>`packed reshape ${f.shape} to ${y.shape} isn't free`));const v=ln({inputs:{x:filter},backend:n,attrs:{shape:[1,t.inChannels,t.outChannels]}});w.push(v);const k=kn({a:y,b:v,backend:n,transposeA:false,transposeB:false,bias:o,activation:l,preluActivationWeights:c,leakyreluAlpha:d}),I=n.texData.get(k.dataId);r.Wd.assert(I.isPacked,(()=>"batchMatMul result is expected to be packed")),f.shape=x,I.shape=t.outShape,O=Ut({inputs:{x:k},backend:n}),O.shape=t.outShape,w.push(k)}else{const r=ln({inputs:{x:e},backend:n,attrs:{shape:[1,v?h[0]*h[1]*h[2]:h[0]*h[2]*h[3],t.inChannels]}}),f=ln({inputs:{x:filter},backend:n,attrs:{shape:[1,t.inChannels,t.outChannels]}}),m=kn({a:r,b:f,transposeA:false,transposeB:false,backend:n,bias:o,activation:l,preluActivationWeights:c,leakyreluAlpha:d});O=ln({inputs:{x:m},backend:n,attrs:{shape:t.outShape}}),w.push(r),w.push(f),w.push(m)}for(const i of w)n.disposeIntermediateTensorInfo(i);return O}function Yr({x:e,filter:filter,convInfo:t,backend:n,bias:o=null,preluActivationWeights:c=null,leakyreluAlpha:d=0,activation:l=null}){const{filterWidth:h,filterHeight:f,inChannels:m,outWidth:y,outHeight:x,dataFormat:v}=t,O="channelsLast"===v,w=h*f*m,k=x*y,I=[w,k],N=[],S=ln({inputs:{x:e},backend:n,attrs:{shape:e.shape.slice(1)}}),T=ln({inputs:{x:filter},backend:n,attrs:{shape:[1,w,r.Wd.sizeFromShape(filter.shape)/w]}});N.push(S),N.push(T);const $=new qr(I,t),j=[S.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],C=n.runWebGLProgram($,[S],"float32",j),E=ln({inputs:{x:C},backend:n,attrs:{shape:[1,I[0],I[1]]}});N.push(C),N.push(E);const A=null!=o,R=null!=c,F="leakyrelu"===l,_=l?nn(l,!0):null,D=new rn(E.shape,T.shape,[1,k,t.outChannels],!0,!1,A,_,R,F),M=[E,T];if(o&&M.push(o),R&&M.push(c),F){const e=n.makeTensorInfo([],"float32",r.Wd.createScalarValue(d,"float32"));M.push(e),N.push(e)}const P=n.runWebGLProgram(D,M,"float32"),W=ln({inputs:{x:P},backend:n,attrs:{shape:O?[1,x,y,t.outChannels]:[1,t.outChannels,x,y]}});N.push(P);for(const i of N)n.disposeIntermediateTensorInfo(i);return W}const Zr={kernelName:r.C,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter}=t,{strides:d,pad:l,dataFormat:h,dilations:f,dimRoundingMode:m}=o,y=r.nd.convertConv2DDataFormat(h),x=r.nd.computeConv2DInfo(c.shape,filter.shape,d,f,l,m,!1,y);let v;if(1!==x.filterHeight||1!==x.filterWidth||1!==x.dilationHeight||1!==x.dilationWidth||1!==x.strideHeight||1!==x.strideWidth||"SAME"!==x.padInfo.type&&"VALID"!==x.padInfo.type)if(Object(r.xd)().getBool("WEBGL_CONV_IM2COL")&&1===c.shape[0])v=Yr({x:c,filter:filter,convInfo:x,backend:n});else{const e=new Hr(x);v=n.runWebGLProgram(e,[c,filter],"float32")}else v=Xr({x:c,filter:filter,convInfo:x,backend:n});const O=ln({inputs:{x:v},backend:n,attrs:{shape:x.outShape}});return n.disposeIntermediateTensorInfo(v),O}};class Qr{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,c="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${c}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jr{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c="channelsLast"===e.dataFormat,d=t-1-e.padInfo.top,l=n-1-e.padInfo.left,h=c?1:2,f=c?2:3,m=c?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${d}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${m}];\n\n        ivec2 dyCorner = ivec2(coords[${h}], coords[${f}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${c}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ea{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.padInfo.front,c=e.padInfo.top,d=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${o};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${c};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${d};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ta{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,c=e.strideHeight,d=e.strideWidth,l=t-1-e.padInfo.front,h=n-1-e.padInfo.top,f=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${l}, ${h}, ${f});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${d}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const na={kernelName:r.D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,dy:d}=t,{strides:l,pad:h,dataFormat:f,dimRoundingMode:m,filterShape:y}=o,x=r.nd.convertConv2DDataFormat(f),v=r.nd.computeConv2DInfo(c.shape,y,l,1,h,m,!1,x),O=new Qr(v);return n.runWebGLProgram(O,[c,d],"float32")}};const ra={kernelName:r.E,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,filter:filter}=t,{inputShape:d,strides:l,pad:h,dataFormat:f,dimRoundingMode:m}=o,y=r.nd.convertConv2DDataFormat(f),x=r.nd.computeConv2DInfo(d,filter.shape,l,1,h,m,!1,y),v=new Jr(x);return n.runWebGLProgram(v,[c,filter],"float32")}};const aa={kernelName:r.F,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter}=t,{strides:d,pad:l,dilations:h}=o,f=r.nd.computeConv3DInfo(c.shape,filter.shape,d,h,l),m=new Kr(f);return n.runWebGLProgram(m,[c,filter],"float32")}};const sa={kernelName:r.G,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,dy:d}=t,{strides:l,pad:h,filterShape:f}=o,m=r.nd.computeConv3DInfo(c.shape,f,l,1,h),y=new ea(m);return n.runWebGLProgram(y,[c,d],"float32")}};const oa={kernelName:r.H,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,filter:filter}=t,{pad:d,strides:l,inputShape:h}=o,f=r.nd.computeConv3DInfo(h,filter.shape,l,1,d),m=new ta(f);return n.runWebGLProgram(m,[c,filter],"float32")}},ia=en({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),ca={kernelName:r.I,backendName:"webgl",kernelFunc:ia},ua=en({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),da={kernelName:r.J,backendName:"webgl",kernelFunc:ua};class la{constructor(e,t,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[c,d,l,h]=e,[f]=t,[m,y]=n;this.outputShape=[f,m,y,h];const x="bilinear"===r?1:0,[v,O]=[d-1+".0",l-1+".0"],[w,k,I]=m>1?[""+(d-1)/(m-1),"(y2-y1) * height_ratio",`y1*${v} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${v}`],[N,S,T]=y>1?[""+(l-1)/(y-1),"(x2-x1) * width_ratio",`x1*${O} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${O}`];this.userCode=`\n      const float height_ratio = float(${w});\n      const float width_ratio = float(${N});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${c}) {\n          return;\n        }\n\n        float height_scale = ${k};\n        float width_scale = ${S};\n\n        float in_y = ${I};\n        if( in_y < 0.0 || in_y > ${v} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${T};\n        if( in_x < 0.0 || in_x > ${O} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${x} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const pa={kernelName:r.K,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:image,boxes:o,boxInd:c}=t,{cropSize:d,method:l,extrapolationValue:h}=r,f=new la(image.shape,o.shape,d,l,h);return n.runWebGLProgram(f,[image,o,c],"float32")}};class ha{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const r=e.length,o=t?"0.0":`getX(${fa(r,"coords")})`,c=e[e.length-1];let d="",l="";t?(d=n?"end != "+(c-1):"end != 0",l=n?"end + 1":"end - 1"):(d=n?`end + pow2 < ${c}`:"end >= pow2",l=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${le(r)} coords = getOutputCoords();\n        int end = ${ma(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${d}) {\n          int idx = ${l};\n          ${ma(r,"coords")} = idx;\n          val += getX(${fa(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function fa(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function ma(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const ba={kernelName:r.L,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,exclusive:l,reverse:h}=o,f=c.shape.length,m=r.nd.getAxesPermutation([d],f);let y=c;null!=m&&(y=On({inputs:{x:c},backend:n,attrs:{perm:m}}));const x=r.nd.getInnerMostAxes(1,f)[0];if(x!==f-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${c.shape.length-1} but got axis=${d}`);const v=y.shape[x];let O=Ut({inputs:{x:y},backend:n});for(let i=0;i<=Math.ceil(Math.log2(v))-1;i++){const e=new ha(y.shape,!1,h),t=[[i]],r=O;O=n.runWebGLProgram(e,[O],O.dtype,t),n.disposeIntermediateTensorInfo(r)}if(l){const e=new ha(y.shape,l,h),t=O;O=n.runWebGLProgram(e,[O],O.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=m){const e=On({inputs:{x:O},backend:n,attrs:{perm:r.nd.getUndoAxesPermutation(m)}});return n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(y),e}return O}};const ga={kernelName:r.N,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:d,binaryOutput:l}=r;if(1===o.shape.length){const e=n.readSync(o.dataId),t=n.readSync(c.dataId),r=De(e,t,c.dtype,c.shape,d);return n.makeTensorInfo([d],c.dtype,r)}if(2===o.shape.length){const e=n.bufferSync(o),t=n.bufferSync(c),r=Me(e,t,d,l);return n.makeTensorInfo(r.shape,c.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`)}};class ya{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const xa={kernelName:r.O,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{blockSize:d,dataFormat:l}=o;r.Wd.assert(d>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${d}`));const h=c.shape[0],f="NHWC"===l?c.shape[1]:c.shape[2],m="NHWC"===l?c.shape[2]:c.shape[3],y="NHWC"===l?c.shape[3]:c.shape[1],x=f*d,v=m*d,O=y/(d*d),w=new ya("NHWC"===l?[h,x,v,O]:[h,O,x,v],d,l);return n.runWebGLProgram(w,[c],c.dtype)}};class va{constructor(e,t=!1,n=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=be(this.outputShape.length);const c=e.filterHeight,d=e.filterWidth,l=e.outChannels/e.inChannels;let h="",f="";n&&(h=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${h}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}class Oa{constructor(e,t=!1,n=null,o=!1,c=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=be(this.outputShape.length);const d=e.outChannels/e.inChannels,l=e.padInfo.left,h=e.strideWidth,f=e.dilationWidth,m=e.filterHeight,y=e.filterWidth,x=y;let v="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<y;e++)v+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;for(let e=0;e<m;e++){for(let e=0;e<y;e++)v+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;v+=`\n        xR = xRCorner + ${e} * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;for(let t=0;t<(x+1)/2;t++){const n=2*t;if(v+=`\n          xC = xCCorner + ${n*f};\n          `,1===h){if(n<y&&(l%2==1?(v+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,v+=1===f&&n>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):v+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,n+1<y)){const e=l%2==0?r.Wd.nearestLargerEven(f):f;f%2==0&&l%2==1||f%2!=0&&l%2!=1?(v+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,f>1&&(v+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${n}Ready = 1;\n                    }\n                    `),v+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                  `):v+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else n<y&&(l%2==1?(v+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,n+1<y&&(v+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(v+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,n+1<y&&(v+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<y&&(v+=`\n            wTexel = getW(${e}, ${n}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,n+1<y&&(v+=`\n              wTexel = getW(${e}, ${n+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}v+="\n        }\n      "}let O="",w="";n&&(O=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:c?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${O}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${d};\n        int q = d2 - d1 * ${d};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${v}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}const wa={kernelName:r.P,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter}=t,{strides:d,pad:l,dilations:h,dimRoundingMode:f}=o;let m=h;null==m&&(m=[1,1]),r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(d,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${d} and dilations '${m}'`));const y=r.nd.computeConv2DInfo(c.shape,filter.shape,d,m,l,f,!0);let x;x=Object(r.xd)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1?new Oa(y):new va(y);const v=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]];return n.runWebGLProgram(x,[c,filter],"float32",v)}};class ka{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,c=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${c} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ia{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c=t-1-e.padInfo.top,d=n-1-e.padInfo.left,l=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Na={kernelName:r.Q,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,dy:d}=t,{strides:l,dilations:h,pad:f,dimRoundingMode:m,filterShape:y}=o,x=r.nd.computeConv2DInfo(c.shape,y,l,h,f,m,!0),v=new ka(x);return n.runWebGLProgram(v,[c,d],"float32")}};const Sa={kernelName:r.R,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,filter:filter}=t,{strides:d,dilations:l,pad:h,dimRoundingMode:f,inputShape:m}=o,y=r.nd.computeConv2DInfo(m,filter.shape,d,l,h,f,!0),x=new Ia(y);return n.runWebGLProgram(x,[c,filter],"float32")}};class Ta{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const $a={kernelName:r.S,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:o}=t,c=[...o.shape,...o.shape],d=r.Wd.sizeFromShape(o.shape),l=ln({inputs:{x:o},backend:n,attrs:{shape:[d]}}),h=new Ta(d),f=n.runWebGLProgram(h,[l],l.dtype),m=ln({inputs:{x:f},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(f),m}};class ja{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:o,strideWidth:c,filterHeight:d,filterWidth:l,dilationHeight:h,dilationWidth:f}=e,{top:m,left:y}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${c});\n      const ivec2 pads = ivec2(${m}, ${y});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${d}; h++) {\n          int hIn = hBeg + h * ${h};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${f};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Ca={kernelName:r.T,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter}=t,{strides:d,pad:l,dilations:h}=o,f=r.nd.computeDilation2DInfo(c.shape,filter.shape,d,l,"NHWC",h);let m;const y=new ja(f);m=n.runWebGLProgram(y,[c,filter],"float32");const x=ln({inputs:{x:m},backend:n,attrs:{shape:f.outShape}});return n.disposeIntermediateTensorInfo(m),x}};const Ea={kernelName:r.W,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{equation:c}=o,d=t,{allDims:l,summedDims:h,idDims:f}=r.nd.decodeEinsumEquation(c,d.length);r.nd.checkEinsumDimSizes(l.length,f,d);const{path:path,steps:m}=r.nd.getEinsumComputePath(h,f),y=m.length;let x=null,v=l.length;const O=[];for(let i=0;i<y;++i){for(const e of m[i]){const{permutationIndices:t,expandDims:o}=r.nd.getEinsumPermutation(v,f[e]);let c;r.nd.isIdentityPermutation(t)?c=d[e]:(c=On({inputs:{x:d[e]},backend:n,attrs:{perm:t}}),O.push(c));const l=c.shape.slice();for(let e=0;e<o.length;++e)l.splice(o[e],0,1);r.Wd.arraysEqual(c.shape,l)||(c=ln({inputs:{x:c},backend:n,attrs:{shape:l}}),O.push(c)),null===x?x=c:(x=un({inputs:{a:c,b:x},backend:n}),O.push(x))}i<y-1&&(path[i]>=0&&(x=xn({inputs:{x:x},backend:n,attrs:{axis:path[i]-(l.length-v),keepDims:!1}}),O.push(x)),v--)}for(const e of O)e!==x&&n.disposeIntermediateTensorInfo(e);return x}},Aa=en({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Ra={kernelName:r.X,backendName:"webgl",kernelFunc:Aa},Fa={kernelName:r.Y,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:o,y:c}=t,d=Object(r.xd)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Vt("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",o.shape,c.shape):new zt("return (b >= 1.0) ? a : a * (b + 1.0);",o.shape,c.shape);return n.runWebGLProgram(d,[o,c],o.dtype)}},_a=tn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Le}),Da={kernelName:r.Z,backendName:"webgl",kernelFunc:_a},Ma=en({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${r.nd.ERF_P};\n  float a1 = ${r.nd.ERF_A1};\n  float a2 = ${r.nd.ERF_A2};\n  float a3 = ${r.nd.ERF_A3};\n  float a4 = ${r.nd.ERF_A4};\n  float a5 = ${r.nd.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Pa={kernelName:r.ab,backendName:"webgl",kernelFunc:Ma},Wa="return exp(x);",La=en({opSnippet:Wa,packedOpSnippet:Wa,cpuKernelImpl:Be}),Ba={kernelName:r.bb,backendName:"webgl",kernelFunc:La};function za(e){const{inputs:t,attrs:n,backend:o}=e,{dim:c}=n,{input:input}=t,d=input.shape.length,l=input.shape.slice();let h=c;return c<0&&(r.Wd.assert(-(d+1)<=c,(()=>`Axis must be in the interval [${-(d+1)}, ${d}]`)),h=d+c+1),l.splice(h,0,1),ln({inputs:{x:input},backend:o,attrs:{shape:l}})}const Va={kernelName:r.cb,backendName:"webgl",kernelFunc:za},Ua="return exp(x) - 1.0;",Ga=en({opSnippet:Ua,packedOpSnippet:Ua,cpuKernelImpl:ze}),Ha={kernelName:r.db,backendName:"webgl",kernelFunc:Ga};class Ka{constructor(component,e,t){this.variableNames=["real","imag"];const n=e[1];this.outputShape=e;const r=t?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=t?`${n}.0`:"1.0";let c;if("real"===component)c="return real * expR - imag * expI;";else{if("imag"!==component)throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);c="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${c}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${n});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${n}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function qa(e,t,n){const o=n.texData.get(e.dataId),c=r.Wd.sizeFromShape(e.shape),d=e.shape[e.shape.length-1],l=ln({inputs:{x:e},backend:n,attrs:{shape:[c/d,d]}}),h=l.shape,f=new Ka("real",h,t),m=new Ka("imag",h,t),y=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:h},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:h}],x=n.runWebGLProgram(f,y,"float32"),v=n.runWebGLProgram(m,y,"float32"),O=Ht({inputs:{real:x,imag:v},backend:n});n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(v);const w=ln({inputs:{x:O},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(O),w}const Xa={kernelName:r.eb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t;return qa(input,!1,n)}};class Ya{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Za(e){const{backend:t,attrs:n}=e,{shape:o,value:c}=n;let{dtype:d}=n;if(d=d||r.Wd.inferDtype(c),"string"===d){const e=r.Wd.getArrayFromDType(d,r.Wd.sizeFromShape(o));return e.fill(c),t.makeTensorInfo(o,d,e)}{const e=new Ya(o,c),n=[[c]];return t.runWebGLProgram(e,[],d,n)}}const Qa={kernelName:r.fb,backendName:"webgl",kernelFunc:Za};class Ja{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const es={kernelName:r.gb,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:image}=e,n=t,r=new Ja(image.shape);return n.runWebGLProgram(r,[image],image.dtype)}},ts="return floor(x);",ns=en({opSnippet:ts,packedOpSnippet:ts,cpuKernelImpl:Ve}),rs={kernelName:r.hb,backendName:"webgl",kernelFunc:ns},as=tn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ss={kernelName:r.ib,backendName:"webgl",kernelFunc:as};class os{constructor(e){this.variableNames=["A"];const t=K(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class is{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=K(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const cs={kernelName:r.jb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e;let{pixels:c}=t;const{numChannels:d}=o,l="undefined"!=typeof HTMLVideoElement&&c instanceof HTMLVideoElement,f="undefined"!=typeof HTMLImageElement&&c instanceof HTMLImageElement,[m,y]=l?[c.videoWidth,c.videoHeight]:[c.width,c.height],x=[y,m],v=[y,m,d];(f||l)&&(null==us&&(us=document.createElement("canvas").getContext("2d")),us.canvas.width=m,us.canvas.height=y,us.drawImage(c,0,0,m,y),c=us.canvas);const O=n.makeTensorInfo(x,"int32");n.texData.get(O.dataId).usage=h.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(O.dataId),c);const w=Object(r.xd)().getBool("WEBGL_PACK")?new is(v):new os(v),k=n.runWebGLProgram(w,[O],"int32");return n.disposeData(O.dataId),k}};let us;const ds={kernelName:r.lb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter,bias:d,preluActivationWeights:l}=t,{strides:h,pad:f,dataFormat:m,dilations:y,dimRoundingMode:x,activation:v,leakyreluAlpha:O}=o,w=r.nd.convertConv2DDataFormat(m),k=r.nd.computeConv2DInfo(c.shape,filter.shape,h,y,f,x,!1,w);let I;const N=[];if(1!==k.filterHeight||1!==k.filterWidth||1!==k.dilationHeight||1!==k.dilationWidth||1!==k.strideHeight||1!==k.strideWidth||"SAME"!==k.padInfo.type&&"VALID"!==k.padInfo.type)if(Object(r.xd)().getBool("WEBGL_CONV_IM2COL")&&1===c.shape[0])I=Yr({x:c,filter:filter,convInfo:k,backend:n,bias:d,activation:v,preluActivationWeights:l,leakyreluAlpha:O});else{const e=null!=d,t=null!=l,o="leakyrelu"===v,h=v?nn(v,!1):null,f=new Hr(k,e,h,t,o),m=[c,filter];if(d&&m.push(d),l&&m.push(l),o){const e=n.makeTensorInfo([],"float32",r.Wd.createScalarValue(O,"float32"));m.push(e),N.push(e)}I=n.runWebGLProgram(f,m,"float32")}else I=Xr({x:c,filter:filter,convInfo:k,backend:n,bias:d,activation:v,preluActivationWeights:l,leakyreluAlpha:O});const S=ln({inputs:{x:I},backend:n,attrs:{shape:k.outShape}});return N.push(I),N.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};const ls={kernelName:r.mb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,filter:filter,bias:d,preluActivationWeights:l}=t,{strides:h,pad:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:v}=o,O=[];let w=m;null==w&&(w=[1,1]),r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(h,w),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${h} and dilations '${w}'`));const k=r.nd.computeConv2DInfo(c.shape,filter.shape,h,w,f,y,!0),I=Object(r.xd)().getBool("WEBGL_PACK_DEPTHWISECONV")&&k.strideWidth<=2&&k.outChannels/k.inChannels==1,N=x?nn(x,I):null,S=[c,filter],T=null!=d,$=null!=l,j="leakyrelu"===x;if(T&&S.push(d),$&&S.push(l),j){const e=n.makeTensorInfo([],"float32",r.Wd.createScalarValue(v,"float32"));S.push(e),O.push(e)}let C;C=I?new Oa(k,T,N,$,j):new va(k,T,N,$,j);const E=[[k.padInfo.top,k.padInfo.left],[k.strideHeight,k.strideWidth],[k.dilationHeight,k.dilationWidth],[k.inHeight,k.inWidth]],A=n.runWebGLProgram(C,S,"float32",E);return O.forEach((e=>n.disposeIntermediateTensorInfo(e))),A}};class ps{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=le(t.length),o=le(n.length),c=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${c};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const hs={kernelName:r.nb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:o,indices:c}=t,d=c.shape,l=d[d.length-1],h=r.Wd.sizeFromShape(o.shape),[f,m,y,x]=r.nd.prepareAndValidate(o,c),v=ln({inputs:{x:c},backend:n,attrs:{shape:[m,l]}}),O=ln({inputs:{x:o},backend:n,attrs:{shape:[r.Wd.sizeFromShape(o.shape)/y,y]}});if(n.shouldExecuteOnCPU([o,c])||"string"===o.dtype){const e=n.readSync(c.dataId),t=n.bufferSync(o),r=Ue(e,t,o.dtype,m,l,y,x,o.shape,h);return n.makeTensorInfo(f,o.dtype,r.values)}const w=new ps(l,x,[m,y]),k=n.runWebGLProgram(w,[O,v],O.dtype),I=ln({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(k),I}};class fs{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=le(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let i=0;i<e.length;i++)2===i?r.push("int(getIndices(resRC.x, resRC.z))"):r.push(`${n[i]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function ms(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,indices:d}=t,{axis:l,batchDims:h}=o,f=r.Wd.parseAxisParam(l,c.shape)[0],m=r.nd.segment_util.collectGatherOpShapeInfo(c,d,f,h),y=r.Wd.sizeFromShape(d.shape),x=[],v=ln({inputs:{x:c},backend:n,attrs:{shape:[m.batchSize,m.outerSize,m.dimSize,m.sliceSize]}}),O=ln({inputs:{x:d},backend:n,attrs:{shape:[m.batchSize,y/m.batchSize]}});x.push(v),x.push(O);const w=[m.batchSize,m.outerSize,y/m.batchSize,m.sliceSize];if(n.shouldExecuteOnCPU([c,d])||"string"===c.dtype){const e=n.bufferSync(O),t=n.bufferSync(v),r=Ge(t,e,w);return x.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(m.outputShape,r.dtype,r.values)}const k=new fs(v.shape,w),I=n.runWebGLProgram(k,[v,O],v.dtype);x.push(I);const N=ln({inputs:{x:I},backend:n,attrs:{shape:m.outputShape}});return x.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}const bs={kernelName:r.ob,backendName:"webgl",kernelFunc:ms},gs=tn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:He,dtype:"bool"}),ys={kernelName:r.pb,backendName:"webgl",kernelFunc:gs},xs=tn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Ke}),vs={kernelName:r.qb,backendName:"webgl",kernelFunc:xs};const Os={kernelName:r.rb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t;return qa(input,!0,n)}},ws=en({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),ks={kernelName:r.ub,backendName:"webgl",kernelFunc:ws},Is=en({opSnippet:"return float(isinf(x));",dtype:"bool"}),Ns={kernelName:r.vb,backendName:"webgl",kernelFunc:Is},Ss=en({opSnippet:"return float(isnan(x));",dtype:"bool"}),Ts={kernelName:r.wb,backendName:"webgl",kernelFunc:Ss},$s=tn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:qe,dtype:"bool"}),js={kernelName:r.Bb,backendName:"webgl",kernelFunc:$s},Cs=tn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Xe,dtype:"bool"}),Es={kernelName:r.Cb,backendName:"webgl",kernelFunc:Cs};const As={kernelName:r.Db,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,num:c}=n,d=Ye(r,o,c);return t.makeTensorInfo([d.length],"float32",d)}},Rs=en({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Ze}),Fs={kernelName:r.Eb,backendName:"webgl",kernelFunc:Rs},_s=en({opSnippet:"return log(1.0 + x);"}),Ds={kernelName:r.Fb,backendName:"webgl",kernelFunc:_s},Ms=tn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Ps={kernelName:r.Gb,backendName:"webgl",kernelFunc:Ms},Ws=en({opSnippet:"return float(!(x >= 1.0));"}),Ls={kernelName:r.Hb,backendName:"webgl",kernelFunc:Ws},Bs=tn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),zs={kernelName:r.Ib,backendName:"webgl",kernelFunc:Bs};class Vs{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[];const c=t,d=e[3]-1;let l;this.outputShape=e;const h=`float(${n}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${c}; j <= ${c}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${d}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class Us{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const c=t,d=e[3]-1;let l;this.outputShape=e;const h=`float(${n}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${c};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${c}; j <= ${c}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${d}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const Gs={kernelName:r.yb,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{depthRadius:d,bias:l,alpha:h,beta:f}=o,m=Object(r.xd)().getBool("WEBGL_PACK_NORMALIZATION")?new Us(c.shape,d,l,h,f):new Vs(c.shape,d,l,h,f);return n.runWebGLProgram(m,[c],c.dtype)}};class Hs{constructor(e,t,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Ks={kernelName:r.zb,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:o,y:c,dy:d}=t,{depthRadius:l,bias:h,alpha:f,beta:m}=r,y=new Hs(o.shape,l,h,f,m);return n.runWebGLProgram(y,[o,c,d],o.dtype)}};function qs(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{reductionIndices:d,keepDims:l}=o,h=c.shape.length,f=r.Wd.parseAxisParam(d,c.shape);let m=f;const y=r.nd.getAxesPermutation(m,h),x=null!=y,v=n.shouldExecuteOnCPU([c]);let O=c;if(x){if(v){const e=n.texData.get(O.dataId).values,t=new Array(h);for(let i=0;i<t.length;i++)t[i]=c.shape[y[i]];const r=kt(e,c.shape,c.dtype,y,t);O=n.makeTensorInfo(t,c.dtype);n.texData.get(O.dataId).values=r}else O=yn(c,y,n);m=r.nd.getInnerMostAxes(m.length,h)}r.nd.assertAxesAreInnerMostDims("max",m,h);const[w,k]=r.nd.computeOutAndReduceShapes(O.shape,m);let I,N=w;if(l&&(N=r.nd.expandShapeToKeepDim(w,f)),v){const e=n.texData.get(O.dataId).values,t=Qe(e,r.Wd.sizeFromShape(k),N,c.dtype);I=n.makeTensorInfo(N,c.dtype);n.texData.get(I.dataId).values=t}else I=function(e,t,n,o){const c=r.Wd.sizeFromShape(t),d=ln({inputs:{x:e},attrs:{shape:[r.Wd.sizeFromShape(e.shape)/c,c]},backend:o}),l=mn(d,e.dtype,"max",o),h=ln({inputs:{x:l},attrs:{shape:n},backend:o});return o.disposeIntermediateTensorInfo(d),o.disposeIntermediateTensorInfo(l),h}(O,k,N,n);return x&&n.disposeIntermediateTensorInfo(O),I}const Xs={kernelName:r.Jb,backendName:"webgl",kernelFunc:qs},Ys=tn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Je}),Zs={kernelName:r.Pb,backendName:"webgl",kernelFunc:Ys};const Qs={kernelName:r.Kb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t;G(c,"maxPool");const{filterSize:d,strides:l,pad:h,dimRoundingMode:f}=o;r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const m=r.nd.computePool2DInfo(c.shape,d,l,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&r.Wd.arraysEqual(m.inShape,m.outShape))return Ut({inputs:{x:c},backend:n});const y=new rr(m,"max",!1);return n.runWebGLProgram(y,[c],c.dtype)}};const Js={kernelName:r.Lb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{filterSize:d,strides:l,pad:h,dataFormat:f,dimRoundingMode:m}=o,y=r.nd.computePool3DInfo(c.shape,d,l,[1,1,1],h,m,f),x=new ar(y,"max",!1);return n.runWebGLProgram(x,[c],c.dtype)}};class eo{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,o=e.effectiveFilterHeight,c=e.effectiveFilterWidth,d=o-1-e.padInfo.top,l=c-1-e.padInfo.left,h=o*c-1;this.userCode=`\n      const ivec2 pads = ivec2(${d}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${c}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${h} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${c} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class to{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,l=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=l-1-e.padInfo.front,y=h-1-e.padInfo.top,x=f-1-e.padInfo.left,v=l*h*f-1;this.userCode=`\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${c}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${f};\n                wC += ${d}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${v} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${h} * ${f} +\n                  wR * ${f} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const no={kernelName:r.Mb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,input:input}=t,d=input,{filterSize:l,strides:h,pad:f,dimRoundingMode:m}=o,y=r.nd.computePool3DInfo(d.shape,l,h,[1,1,1],f,m),x=new ar(y,"max",!0),v=n.runWebGLProgram(x,[d],d.dtype),O=new to(y),w=n.runWebGLProgram(O,[c,v],d.dtype);return n.disposeIntermediateTensorInfo(v),w}};const ro={kernelName:r.Nb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{dy:c,input:input,output:output}=t,d=input;G([input,output],"maxPoolGrad");const{filterSize:l,strides:h,pad:f,dimRoundingMode:m}=o,y=r.nd.computePool2DInfo(d.shape,l,h,1,f,m),x=new rr(y,"max",!0),v=n.runWebGLProgram(x,[d],d.dtype),O=new eo(y),w=n.runWebGLProgram(O,[c,v],d.dtype);return n.disposeIntermediateTensorInfo(v),w}};const ao={kernelName:r.Ob,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:o}=e,{filterSize:c,strides:d,pad:l,includeBatchInIndex:h}=t,f=n;r.Wd.assert(4===o.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`));const m=[1,1];r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(d,m),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${d} and dilations '${m}'`));const y=r.nd.computePool2DInfo(o.shape,c,d,m,l),[x,v]=function(e,t,n,r){let o=new rr(n,"max",!1);const c=r.runWebGLProgram(o,[e],"float32");return o=new rr(n,"max",!0,!0,t),[c,r.runWebGLProgram(o,[e],"float32")]}(o,h,y,f);return[x,v]}};const so={kernelName:r.Qb,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:o}=e,{keepDims:c,axis:d}=t,l=n,h=o.shape.length,f=r.Wd.parseAxisParam(d,o.shape);let m=f;const y=r.nd.getAxesPermutation(m,h),x=null!=y,v=l.shouldExecuteOnCPU([o]),O=[];let w=o;if(x){if(v){const e=l.texData.get(w.dataId).values,t=new Array(h);for(let i=0;i<t.length;i++)t[i]=o.shape[y[i]];const n=kt(e,o.shape,o.dtype,y,t);w=l.makeTensorInfo(t,o.dtype);l.texData.get(w.dataId).values=n}else w=yn(o,y,l);O.push(w),m=r.nd.getInnerMostAxes(m.length,h)}r.nd.assertAxesAreInnerMostDims("sum",m,h);const[k,I]=r.nd.computeOutAndReduceShapes(w.shape,m);let N=k;c&&(N=r.nd.expandShapeToKeepDim(k,f));const S=function(e,t,n,o){const c=r.Wd.sizeFromShape(t),d=ln({inputs:{x:e},attrs:{shape:[r.Wd.sizeFromShape(e.shape)/c,c]},backend:o}),l=mn(d,"float32","mean",o),h=ln({inputs:{x:l},attrs:{shape:n},backend:o});return o.disposeIntermediateTensorInfo(d),o.disposeIntermediateTensorInfo(l),h}(w,I,N,l);for(const i of O)l.disposeIntermediateTensorInfo(i);return S}};const oo={kernelName:r.Rb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o,h=c.shape.length,f=r.Wd.parseAxisParam(d,c.shape);let m=f;const y=r.nd.getAxesPermutation(m,h);let x=c;null!=y&&(x=On({inputs:{x:c},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,c.shape.length)),r.nd.assertAxesAreInnerMostDims("min",m,h);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=ln({inputs:{x:x},backend:n,attrs:{shape:[-1,r.Wd.sizeFromShape(O)]}}),k=mn(w,w.dtype,"min",n);let I;if(l){I=ln({inputs:{x:k},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}})}else I=ln({inputs:{x:k},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),null!=y&&n.disposeIntermediateTensorInfo(x),I}},io=tn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:et}),co={kernelName:r.Sb,backendName:"webgl",kernelFunc:io};class uo{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=le(r),c=t.map((p=>p[0])).join(","),d=t.map(((p,i)=>p[0]+e[i])).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),h="reflect"===n?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${d});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${h};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${h};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${c};\n        int end = ${d};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${h};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${h};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class lo{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=le(r),c=t.map((p=>p[0])).join(","),d=t.map(((p,i)=>p[0]+e[i])).join(","),l=St("rc",r),source=St("source",r),h=`${l[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m="reflect"===n?0:1;let y="";if(1===r){const e=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${m};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${m};\n        }\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${l[r-1]} += 1;\n        if(${h}) {\n          ${e}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n      `}else{const e=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${m}) +\n                gte * ((end - 1) * 2 - source + ${m});\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${l[r-1]} += 1;\n        if(${h}) {\n          ${e}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${source.join()}), ${f});\n          ${l[r-1]} += 1;\n          if(${h}) {\n            ${e}\n            result[3] = getChannel(getX(${source.join()}), ${f});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${d});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${y}\n        setOutput(result);\n      }\n    `}}const po={kernelName:r.Tb,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:o}=e,{paddings:c,mode:d}=n,l=Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lo(o.shape,c,d):new uo(o.shape,c,d);return t.runWebGLProgram(l,[o],o.dtype)}},ho=tn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),fo={kernelName:r.Ub,backendName:"webgl",kernelFunc:ho};class mo{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const bo=tn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),go={kernelName:r.lc,backendName:"webgl",kernelFunc:bo},yo="return a - b;",sub=tn({opSnippet:yo,packedOpSnippet:yo,supportsComplex:!0,cpuKernelImpl:vt}),xo={kernelName:r.Xc,backendName:"webgl",kernelFunc:sub};function vo(e){const{inputs:t,backend:n,attrs:o}=e,{logits:c}=t,{dim:d}=o,l=r.Wd.parseAxisParam([d],c.shape),h=qs({inputs:{x:c},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),f=r.nd.expandShapeToKeepDim(h.shape,l),m=ln({inputs:{x:h},backend:n,attrs:{shape:f}}),a=sub({inputs:{a:c,b:m},backend:n}),b=La({inputs:{x:a},backend:n}),y=xn({inputs:{x:b},backend:n,attrs:{axis:l,keepDims:!1}}),x=ln({inputs:{x:y},backend:n,attrs:{shape:f}}),v=bo({inputs:{a:b,b:x},backend:n});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(x),v}const Oo={kernelName:r.Gc,backendName:"webgl",kernelFunc:vo};const wo={kernelName:r.Vb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:o}=t,{numSamples:c,seed:d,normalized:l}=r,h=l?o:vo({inputs:{logits:o},backend:n,attrs:{dim:o.shape.length-1}}),f=h.shape[0],m=h.shape[1],y=new mo(f,m,c),x=[[d]],v=n.runWebGLProgram(y,[h],"int32",x);return l||n.disposeIntermediateTensorInfo(h),v}},ko="return -x;";const Io={kernelName:r.Xb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:o}=t;if(n.shouldExecuteOnCPU([o])){const e=n.texData.get(o.dataId),[t,r]=nt(e.values,o.shape,o.dtype);return n.makeTensorInfo(r,o.dtype,t)}let c;return c=Object(r.xd)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Dt(o.shape,ko):new Rt(o.shape,ko),n.runWebGLProgram(c,[o],o.dtype)}},No=r.Dd.nonMaxSuppressionV3Impl;const So={kernelName:r.Yb,backendName:"webgl",kernelFunc:function(e){r.nd.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:o}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f}=o,m=n.readSync(c.dataId),y=n.readSync(d.dataId),{selectedIndices:x}=No(m,y,l,h,f);return n.makeTensorInfo([x.length],"int32",new Int32Array(x))}},To=r.Dd.nonMaxSuppressionV4Impl;const $o={kernelName:r.Zb,backendName:"webgl",kernelFunc:function(e){r.nd.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:o}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f,padToMaxOutputSize:m}=o,y=n.readSync(c.dataId),x=n.readSync(d.dataId),{selectedIndices:v,validOutputs:O}=To(y,x,l,h,f,m);return[n.makeTensorInfo([v.length],"int32",new Int32Array(v)),n.makeTensorInfo([],"int32",new Int32Array([O]))]}},jo=r.Dd.nonMaxSuppressionV5Impl;const Co={kernelName:r.ac,backendName:"webgl",kernelFunc:function(e){r.nd.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:o}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f,softNmsSigma:m}=o,y=n.readSync(c.dataId),x=n.readSync(d.dataId),v=l,O=h,w=f,k=m,{selectedIndices:I,selectedScores:N}=jo(y,x,v,O,w,k);return[n.makeTensorInfo([I.length],"int32",new Int32Array(I)),n.makeTensorInfo([N.length],"float32",new Float32Array(N))]}};class Eo{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Ao={kernelName:r.cc,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:o}=e,{indices:c}=t,{depth:d,onValue:l,offValue:h}=o,f=r.Wd.sizeFromShape(c.shape),m=new Eo(f,d,l,h),y=ln({inputs:{x:c},backend:n,attrs:{shape:[f]}}),x=n.runWebGLProgram(m,[y],c.dtype);n.disposeIntermediateTensorInfo(y);const v=ln({inputs:{x:x},backend:n,attrs:{shape:[...c.shape,d]}});return n.disposeIntermediateTensorInfo(x),v}};function Ro(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=Sr({inputs:{input:r},backend:n}),t=Ro({inputs:{x:e},backend:n}),o=Br({inputs:{input:r},backend:n}),i=Ro({inputs:{x:o},backend:n}),c=Ht({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}return Za({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Fo={kernelName:r.kd,backendName:"webgl",kernelFunc:Ro};const _o={kernelName:r.dc,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:o}=n;if("string"===o.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===o.dtype){const t=Sr({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r}),c=Br({inputs:{input:o},backend:r}),i=Ro({inputs:{x:c},backend:r}),d=Ht({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(i),d}return Za({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:r})}};const Do={kernelName:r.ec,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{axis:c}=o;if(1===t.length)return za({inputs:{input:t[0]},backend:n,attrs:{dim:c}});const d=t[0].shape,l=t[0].dtype;t.forEach((e=>{r.Wd.assertShapesMatch(d,e.shape,"All tensors passed to stack must have matching shapes"),r.Wd.assert(l===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const h=[],f=Ur({inputs:t.map((e=>{const t=za({inputs:{input:e},backend:n,attrs:{dim:c}});return h.push(t),t})),backend:n,attrs:{axis:c}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class Mo{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=le(r),c=t.map((p=>p[0])).join(","),d=t.map(((p,i)=>p[0]+e[i])).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${d});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${c};\n        int end = ${d};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Po{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=le(r),c=t.map((p=>p[0])).join(","),d=t.map(((p,i)=>p[0]+e[i])).join(","),l=St("rc",r),source=St("source",r),h=`${l[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${h}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${h}) {`],y=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let x="";for(let i=0,e=1===r?2:4;i<e;i++)x+=`\n        ${m[i]}\n        if (${y}) {\n          result[${i}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${f});\n        }\n      `;x+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${d});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${x}\n        setOutput(result);\n      }\n    `}}const Wo=e=>{const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{paddings:d,constantValue:l}=o;if(0===r.Wd.sizeFromShape(c.shape)){return Za({backend:n,attrs:{shape:d.map(((p,i)=>p[0]+c.shape[i]+p[1])),value:l,dtype:c.dtype}})}const h=Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Po(c.shape,d,l):new Mo(c.shape,d,l),f=[[l]];return n.runWebGLProgram(h,[c],c.dtype,f)},Lo={kernelName:r.fc,backendName:"webgl",kernelFunc:Wo},Bo=tn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),zo={kernelName:r.gc,backendName:"webgl",kernelFunc:Bo};const Vo={kernelName:r.ic,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o,h=c.shape.length,f=[],m=r.Wd.parseAxisParam(d,c.shape);let y=m;const x=r.nd.getAxesPermutation(y,h);let v,O=c;if(null!=x&&(O=On({inputs:{x:c},backend:n,attrs:{perm:x}}),y=r.nd.getInnerMostAxes(y.length,h),f.push(O)),r.nd.assertAxesAreInnerMostDims("prod",y,h),n.shouldExecuteOnCPU([O])){const e=n.texData.get(O.dataId).values,{outVals:t,outShape:r,outDtype:o}=st(O.shape,O.dtype,e,y);v=n.makeTensorInfo(r,o,t)}else{const[e,t]=r.nd.computeOutAndReduceShapes(O.shape,y),o=r.Wd.sizeFromShape(t),d=ln({inputs:{x:O},backend:n,attrs:{shape:[-1,o]}}),l=mn(d,Object(r.Pd)(c.dtype),"prod",n);v=ln({inputs:{x:l},backend:n,attrs:{shape:e}}),f.push(d),f.push(l)}if(l){f.push(v);const e=r.nd.expandShapeToKeepDim(v.shape,m);v=ln({inputs:{x:v},backend:n,attrs:{shape:e}})}return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}},Uo=e=>{const{backend:t,attrs:n}=e,{start:r,stop:o,step:c,dtype:d}=n,l=ot(r,o,c,d);return t.makeTensorInfo([l.length],d,l)},Go={kernelName:r.jc,backendName:"webgl",kernelFunc:Uo},Ho=en({opSnippet:"return 1.0 / x;"}),Ko={kernelName:r.mc,backendName:"webgl",kernelFunc:Ho},qo=en({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Xo={kernelName:r.nc,backendName:"webgl",kernelFunc:qo},Yo=en({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Zo={kernelName:r.oc,backendName:"webgl",kernelFunc:Yo};class Qo{constructor(e,t,n,r,o){this.variableNames=["A"],this.outputShape=[];const[c,d,l,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?d-1:d,r&&n>1?l-1:l],m=[r&&t>1?t-1:t,r&&n>1?n-1:n];let y;y=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]});\n      const vec2 inputShapeRC = vec2(${d}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${y};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Jo{constructor(e,t,n,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,d,l,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?d-1:d,r&&n>1?l-1:l],m=[r&&t>1?t-1:t,r&&n>1?n-1:n];let y;y=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]},\n          ${f[1]/m[1]});\n      const vec3 inputShapeRC = vec3(${d}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${y};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${h-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const ei={kernelName:r.qc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{images:c}=t,{alignCorners:d,halfPixelCenters:l,size:h}=o,[f,m]=h,y=Object(r.xd)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Jo(c.shape,f,m,d,l):new Qo(c.shape,f,m,d,l);return n.runWebGLProgram(y,[c],"float32")}};class ti{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,o]=t,[,c,d]=e,l=[n&&c>1?r-1:r,n&&d>1?o-1:o],h=[n&&c>1?c-1:c,n&&d>1?d-1:d],f=l[0]/h[0],m=l[1]/h[1],y=1/f,x=1/m,v=2*Math.ceil(y)+2,O=2*Math.ceil(x)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${x});\n\n        const int winHeight = int(${v});\n        const int winWidth = int(${O});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${d}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const ni={kernelName:r.rc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:o,dy:c}=t,{alignCorners:d}=r,l=new ti(c.shape,o.shape,d);return n.runWebGLProgram(l,[c],c.dtype)}};class ri{constructor(e,t,n,r,o){this.variableNames=["A"],this.outputShape=[];const[c,d,l,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?d-1:d,r&&n>1?l-1:l],m=[r&&t>1?t-1:t,r&&n>1?n-1:n],y=r?"0.5":"0.0";let x;x=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]});\n      const vec2 inputShapeRC = vec2(${d}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${x};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${y})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class ai{constructor(e,t,n,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,d,l,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?d-1:d,r&&n>1?l-1:l],m=[r&&t>1?t-1:t,r&&n>1?n-1:n],y=r?"0.5":"0.0";let x;x=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]},\n          ${f[1]/m[1]});\n      const vec3 inputShapeRC = vec3(${d}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${x};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${y})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${h-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const si={kernelName:r.sc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{images:c}=t,{alignCorners:d,halfPixelCenters:l,size:h}=o,[f,m]=h,y=Object(r.xd)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ai(c.shape,f,m,d,l):new ri(c.shape,f,m,d,l);return n.runWebGLProgram(y,[c],c.dtype)}};class oi{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,o]=t,[,c,d]=e,l=[n&&c>1?r-1:r,n&&d>1?o-1:o],h=[n&&c>1?c-1:c,n&&d>1?d-1:d],f=l[0]/h[0],m=l[1]/h[1],y=1/f,x=1/m,v=2*Math.ceil(y)+2,O=2*Math.ceil(x)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${x});\n\n        const int winHeight = int(${v});\n        const int winWidth = int(${O});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${d}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${h[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${h[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const ii={kernelName:r.tc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:o,dy:c}=t,{alignCorners:d}=r,l=new oi(c.shape,o.shape,d);return n.runWebGLProgram(l,[c],c.dtype)}};class ci{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,i)=>(i=>-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - coords[${i}] - 1`:`coords[${i}]`)(i))).join(","),o=le(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class ui{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=St("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,c=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,d=le(n);function l(n){const r=e.map(((r,i)=>function(i,n){return-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - ${n[i]} - 1`:`${n[i]}`}(i,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${d} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return l(e)}(r.slice())};\n          if(${o}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(r.slice())};\n          }\n          if(${c}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const di={kernelName:r.uc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{dims:d}=o,l=c.shape.length,h=r.Wd.parseAxisParam(d,c.shape);if(0===l)return Ut({inputs:{x:c},backend:n});const f=Object(r.xd)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ui(c.shape,h):new ci(c.shape,h);return n.runWebGLProgram(f,[c],c.dtype)}};class pi{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let o="";o="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const hi={kernelName:r.vc,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,{radians:o,fillValue:c,center:d}=t,l=n,h=new pi(image.shape,c),[f,m]=r.nd.getImageCenter(d,image.shape[1],image.shape[2]),y=[[f,m,Math.sin(o),Math.cos(o)]];return l.runWebGLProgram(h,[image],image.dtype,y)}},fi=en({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),mi={kernelName:r.wc,backendName:"webgl",kernelFunc:fi},bi=en({opSnippet:"return inversesqrt(x);",cpuKernelImpl:it}),gi={kernelName:r.xc,backendName:"webgl",kernelFunc:bi};class yi{constructor(e,t,n,r,o,c,d=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=c;const l=le(o.length),h=le(c.length);let f="";1===n?f="i":2===n&&(f="i, j");const m=`getIndices(${f})`;let y="";1===r?y="i":2===r&&(y="i, coords[1]");const x=`getUpdates(${y})`,v=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${o});\n\n        void main() {\n          ${h} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${m});\n              flattenedIndex += index * ${v};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${x};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const xi={kernelName:r.yc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{indices:c,updates:d}=t,{shape:l}=o,{sliceRank:h,numUpdates:f,sliceSize:m,strides:y,outputSize:x}=r.nd.calculateShapes(d,c,l),v=[x/m,m];if(0===x)return n.makeTensorInfo(l,c.dtype);const O=ln({inputs:{x:c},backend:n,attrs:{shape:[f,h]}}),w=ln({inputs:{x:d},backend:n,attrs:{shape:[f,m]}}),k=n.makeTensorInfo([],"float32",new Float32Array([0])),I=new yi(f,h,O.shape.length,w.shape.length,y,v),N=n.runWebGLProgram(I,[w,O,k],w.dtype),S=ln({inputs:{x:N},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(N),n.disposeIntermediateTensorInfo(k),S}};class vi{constructor(e,t,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],c=[],d=[];for(let i=0;i<t.length;i++)d.push(`${n[i]}`),i<e&&c.push(`${n[i]}`);r=c.join(),o=d.join()}const c=le(n);this.userCode=`\n      void main() {\n        ${c} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const Oi={kernelName:r.zc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:o,t:c,e:d}=t,l=new vi(o.shape.length,c.shape,c.shape.length);return n.runWebGLProgram(l,[o,c,d],Object(r.Vd)(c.dtype,d.dtype))}},wi=en({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${r.nd.SELU_SCALEALPHA};\n  float scale = ${r.nd.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),ki={kernelName:r.Ac,backendName:"webgl",kernelFunc:wi},Ii="return 1.0 / (1.0 + exp(-1.0 * x));",Ni=en({opSnippet:Ii,packedOpSnippet:Ii,cpuKernelImpl:ct}),Si={kernelName:r.Bc,backendName:"webgl",kernelFunc:Ni},Ti=en({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),$i={kernelName:r.Cc,backendName:"webgl",kernelFunc:Ti},ji=en({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Ci={kernelName:r.Dc,backendName:"webgl",kernelFunc:ji},Ei=en({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Ai={kernelName:r.Ec,backendName:"webgl",kernelFunc:Ei},Ri=en({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Fi={kernelName:r.Hc,backendName:"webgl",kernelFunc:Ri},_i={kernelName:r.Ic,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{blockShape:d,paddings:l}=o;r.Wd.assert(c.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const h=d.reduce(((a,b)=>a*b)),f=[[0,0]];f.push(...l);for(let i=1+d.length;i<c.shape.length;++i)f.push([0,0]);const m=[],y=Wo({inputs:{x:c},backend:n,attrs:{paddings:f,constantValue:0}}),x=r.nd.getReshaped(y.shape,d,h,!1),v=r.nd.getPermuted(x.length,d.length,!1),O=r.nd.getReshapedPermuted(y.shape,d,h,!1),w=ln({inputs:{x:y},backend:n,attrs:{shape:x}}),k=On({inputs:{x:w},backend:n,attrs:{perm:v}}),I=ln({inputs:{x:k},backend:n,attrs:{shape:O}});return m.push(y),m.push(w),m.push(k),m.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const Di={kernelName:r.Jc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:o,denseShape:c,defaultValue:d}=t;if(1!==c.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${c.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Values must be a vector, saw:\n         ${o.shape}`);if(0!==d.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${d.shape}`);const l=n.readSync(r.dataId),h=n.readSync(o.dataId),f=n.readSync(c.dataId),m=n.readSync(d.dataId)[0],[y,x,v,O,w]=pt(l,r.shape,r.dtype,h,o.dtype,f,m);return[n.makeTensorInfo(x,r.dtype,y),n.makeTensorInfo([x[0]],o.dtype,v),n.makeTensorInfo([O.length],"bool",new Uint8Array(O.map((e=>Number(e))))),n.makeTensorInfo([w.length],r.dtype,new Int32Array(w))]}};const Mi={kernelName:r.Kc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:o,newShape:c}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Input shape should be a vector but received shape ${o.shape}`);if(1!==c.shape.length)throw new Error(`Target shape should be a vector but received shape ${c.shape}`);const d=Array.from(n.readSync(o.dataId)),l=n.readSync(r.dataId),h=Array.from(n.readSync(c.dataId)),[f,m,y]=ht(l,r.shape,r.dtype,d,h);return[n.makeTensorInfo(m,r.dtype,f),n.makeTensorInfo([y.length],c.dtype,new Int32Array(y))]}};const Pi={kernelName:r.Lc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const c=n.readSync(data.dataId),d=n.readSync(r.dataId),l=n.readSync(o.dataId),[h,f]=ft(c,data.shape,data.dtype,d,l,!0);return n.makeTensorInfo(f,data.dtype,h)}};const Wi={kernelName:r.Mc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const c=n.readSync(data.dataId),d=n.readSync(r.dataId),l=n.readSync(o.dataId),[h,f]=ft(c,data.shape,data.dtype,d,l);return n.makeTensorInfo(f,data.dtype,h)}};const Li={kernelName:r.Nc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{sparseIndices:c,sparseValues:d,defaultValue:l}=t,{outputShape:h}=o,{sliceRank:f,numUpdates:m,strides:y,outputSize:x}=r.nd.calculateShapes(d,c,h),v=new yi(m,f,c.shape.length,d.shape.length,y,[x,1],!1),O=n.runWebGLProgram(v,[d,c,l],d.dtype),w=ln({inputs:{x:O},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(O),w}};const Bi={kernelName:r.Oc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{numOrSizeSplits:d,axis:l}=o,h=r.Wd.parseAxisParam(l,c.shape)[0],f=r.nd.prepareSplitSize(c,d,h),m=c.shape.length,y=new Array(m).fill(0),x=c.shape.slice();return f.map((s=>{const e=[...x];e[h]=s;const t=vr({inputs:{x:c},backend:n,attrs:{begin:y,size:e}});return y[h]+=s,t}))}},zi="return sqrt(x);",Vi=en({opSnippet:zi,packedOpSnippet:zi,cpuKernelImpl:mt}),Ui={kernelName:r.Pc,backendName:"webgl",kernelFunc:Vi},Gi=en({opSnippet:"return x * x;"}),Hi={kernelName:r.Qc,backendName:"webgl",kernelFunc:Gi},Ki="return (a - b) * (a - b);",qi=tn({opSnippet:Ki,packedOpSnippet:Ki}),Xi={kernelName:r.Rc,backendName:"webgl",kernelFunc:qi};const Yi={kernelName:r.Sc,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,o=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,c=new Rt(r.shape,o);return n.runWebGLProgram(c,[r],r.dtype)}};class Zi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=le(n.length),c=le(n.length);let d="";if(1===r)d="coords * strides + begin";else{let e=0;d=n.map(((t,i)=>(e++,1===n.length?`coords * strides[${i}] + begin[${i}]`:`coords[${e-1}] * strides[${i}] + begin[${i}]`))).join(",")}this.userCode=`\n      ${o} begin = ${o}(${e});\n      ${o} strides = ${o}(${t});\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        setOutput(getX(${d}));\n      }\n    `}}const Qi={kernelName:r.Tc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{begin:d,end:l,strides:h,beginMask:f,endMask:m,ellipsisMask:y,newAxisMask:x,shrinkAxisMask:v}=o,{nonStrided:O,$begin:w,$strides:k,size:I,newShape:N,outShape:S}=r.Ld.sliceInfo(c.shape,d,l,h,f,m,y,x,v),T=ln({inputs:{x:c},backend:n,attrs:{shape:N}});let $;if(O){const e=vr({inputs:{x:T},backend:n,attrs:{begin:w,size:I}});$=ln({inputs:{x:e},backend:n,attrs:{shape:S}}),n.disposeIntermediateTensorInfo(e)}else if(S.some((e=>0===e)))$=n.makeTensorInfo(S,c.dtype,[]);else{if(n.shouldExecuteOnCPU([T])){const e=n.texData.get(T.dataId).values,t=Object(r.pd)(T.shape,T.dtype,e),o=bt(S,t,k,w);$=n.makeTensorInfo(S,T.dtype,o.values)}else{const e=new Zi(w,k,S);$=n.runWebGLProgram(e,[T],T.dtype)}}const j=ln({inputs:{x:$},backend:n,attrs:{shape:S}});return n.disposeIntermediateTensorInfo(T),n.disposeIntermediateTensorInfo($),j}};const Ji={kernelName:r.Uc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:o,nGramWidths:c,leftPad:d,rightPad:l,padWidth:h,preserveShortSequences:f}=r,{data:data,dataSplits:m}=t,y=n.readSync(data.dataId),x=n.readSync(m.dataId),[v,O]=gt(y,x,o,c,d,l,h,f);return[n.makeTensorInfo([v.length],"string",v),n.makeTensorInfo(m.shape,"int32",O)]}};const ec={kernelName:r.Vc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:o}=r,{input:input,delimiter:c}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(1!==input.shape.length)throw new Error(`Input must be a vector, got shape: ${input.shape}`);if(0!==c.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const d=n.readSync(input.dataId),l=n.readSync(c.dataId)[0],[h,f,m]=yt(d,l,o),y=f.length;return[n.makeTensorInfo([y,2],"int32",h),n.makeTensorInfo([y],"string",f),n.makeTensorInfo([2],"int32",new Int32Array(m))]}};const tc={kernelName:r.Wc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:o}=r,{input:input}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(o<=0)throw new Error("Number of buckets must be at least 1");const c=n.readSync(input.dataId),output=xt(c,o);return n.makeTensorInfo(input.shape,"int32",output)}},nc=en({opSnippet:"return tan(x);"}),rc={kernelName:r.Zc,backendName:"webgl",kernelFunc:nc},ac=en({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),sc={kernelName:r.ad,backendName:"webgl",kernelFunc:ac};class oc{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[i]*t[i];this.outputShape=n,this.rank=n.length;const r=le(this.rank),o=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let i=0;i<e.length;i++)r.push(`imod(${n[i]}, ${e[i]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function ic(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{reps:d}=o;if("string"===c.dtype||c.shape.length>5){const data=n.readSync(c.dataId),e="string"===c.dtype?data.map((e=>r.Wd.decodeString(e))):data,t=Object(r.pd)(c.shape,c.dtype,e),o=Ot(t,d);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const l=new oc(c.shape,d);return n.runWebGLProgram(l,[c],c.dtype)}const cc={kernelName:r.dd,backendName:"webgl",kernelFunc:ic};class uc{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class dc{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function lc(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function pc(e){let t=1;for(;t<e;)t*=2;return t}const hc={kernelName:r.ed,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{k:d,sorted:l}=o,h=Object(r.xd)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),f=Object(r.xd)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),m=c.shape,y=m[m.length-1];if(n.shouldExecuteOnCPU([c])||y<h||d>f){const e=n.readSync(c.dataId),[t,r]=wt(e,m,c.dtype,d,l);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===d)return m[m.length-1]=0,[n.makeTensorInfo(m,c.dtype,[]),n.makeTensorInfo(m,"int32",[])];if(1===y)return[c,Za({attrs:{shape:m,dtype:"int32",value:0},backend:n})];const x=n.texData.get(c.dataId),v=null!==x&&x.isPacked,O=v?n.unpackTensor(c):c,w=r.Wd.sizeFromShape(m)/y,k=ln({inputs:{x:O},attrs:{shape:[w,y]},backend:n});v&&lc(n,O);const I=pc(d),N=pc(y);let S=null;const T=()=>null===S?[k,k]:[k,S],$=(e,t,r)=>{const o=T(),c=new uc(r),d=[[y],[null===S?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],l=S;S=n.runWebGLProgram(c,o,"int32",d),lc(n,l)};for(let e=1;e<I;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)$(t,n,[w,N])}for(let e=N;e>I;e/=2){const t=T(),r=new dc([w,e/2]),o=[[y],[null===S?1:0],[I]],c=S;S=n.runWebGLProgram(r,t,"int32",o),lc(n,c);const d=I/2,l=2*d;for(let e=d;e>=1;e/=2)$(l,e,S.shape)}let j=S;S=vr({inputs:{x:S},backend:n,attrs:{begin:0,size:[w,d]}}),lc(n,j);let C=ms({inputs:{x:k,indices:S},backend:n,attrs:{axis:1,batchDims:1}});lc(n,k);const E=m.slice(0,-1);E.push(d),j=S,S=ln({inputs:{x:S},attrs:{shape:E},backend:n}),lc(n,j);const A=C;return C=ln({inputs:{x:C},attrs:{shape:E},backend:n}),lc(n,A),[C,S]}};class fc{constructor(e,t,n,r,o,c){this.variableNames=["Image","Transforms"],this.outputShape=c;const d="nearest"===n?1:2;let l;switch(r){default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${d} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const mc={kernelName:r.fd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:image,transforms:o}=t,{interpolation:c,fillMode:d,fillValue:l,outputShape:h}=r,[f,m,y,x]=image.shape,[v,O]=null!=h?h:[m,y],w=new fc(m,y,c,d,l,[f,v,O,x]);return n.runWebGLProgram(w,[image,o],"float32")}};const bc={kernelName:r.hd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:o}=n,{x:c}=t;G(c,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const d=r.readSync(c.dataId),{outputValues:l,outputShape:h,indices:f}=It(d,o,c.shape,c.dtype);return[r.makeTensorInfo(h,c.dtype,l),r.makeTensorInfo([f.length],"int32",f)]}};const gc={kernelName:r.id,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:o}=t;let{axis:c}=r;c<0&&(c+=o.shape.length);const d=o,l=d.shape.length,h=o.shape[c],f=new Array(l-1);let m=0;for(let i=0;i<l;i++)i!==c&&(f[m++]=d.shape[i]);const y=[],x=new Array(l).fill(0),v=d.shape.slice();v[c]=1;const O=new Array(h);for(let i=0;i<O.length;i++){x[c]=i;const e=vr({inputs:{x:d},backend:n,attrs:{begin:x,size:v}}),t=ln({inputs:{x:e},backend:n,attrs:{shape:f}});O[i]=t,y.push(e)}return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),O}};class yc{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,o=e.inSize,c=e.numSegments,d=c*Math.ceil(o/n);this.outputShape=[r,d];const l=4*Math.floor(n/4),h=n%4,f="\n        sumValue += dot(values, segFilter);\n    ";let m="";o%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let y="";o%n>0&&(y=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${y}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${c})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${c})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}const xc=[Gs,Ks,In,Sn,$n,Cn,Rn,Dn,Mn,Pn,Un,Gn,Kn,Xn,Jn,Zn,nr,or,sr,ur,dr,lr,mr,wr,kr,$r,Er,Fr,Mr,Kt,Gr,na,ra,Zr,sa,oa,aa,ca,da,pa,ba,ga,xa,Na,Sa,wa,$a,Ca,Ea,Ra,Fa,Da,Pa,Ba,Va,Ha,Xa,Qa,es,rs,ss,cs,ds,ls,hs,bs,ys,vs,Gt,Os,zr,ks,Ns,Ts,Yt,js,Es,As,Ds,Fs,Ps,Ls,zs,Xs,Js,Qs,no,ro,ao,Zs,so,oo,co,po,fo,wo,dn,Io,So,$o,Co,Nr,Ao,_o,Do,Lo,zo,Jt,Vo,Go,Tr,go,Ko,Zo,Xo,pn,ei,ni,si,ii,di,hi,mi,gi,xi,Oi,ki,Si,$i,Ci,Ai,Or,Oo,Fi,_i,Di,Mi,Pi,Wi,Li,Bi,Ui,Hi,Xi,Yi,Qi,Ji,ec,tc,xo,vn,rc,sc,cc,hc,mc,wn,bc,gc,{kernelName:r.jd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c,segmentIds:d}=t,{numSegments:l}=o,h=c.shape.length,f=[];let m=0;const y=r.nd.getAxesPermutation([m],h);let x=c;null!=y&&(x=On({inputs:{x:c},backend:n,attrs:{perm:y}}),f.push(x),m=r.nd.getInnerMostAxes(1,h)[0]);const v=r.nd.segment_util.computeOutShape(x.shape,m,l),O=r.Wd.sizeFromShape([x.shape[m]]),w=ln({inputs:{x:x},backend:n,attrs:{shape:[-1,O]}});f.push(w);const k=Object(r.Pd)(c.dtype),I=(e,t,o,c,d)=>{const l=e.shape[0],h=e.shape[1],m=r.nd.segment_util.segOpComputeOptimalWindowSize(h,d),y=new yc({windowSize:m,inSize:h,batchSize:l,numSegments:d},t),output=n.compileAndRun(y,[e,o],c);if(f.push(output),output.shape[1]===d)return output;const x=Uo({backend:n,attrs:{start:0,stop:d,step:1,dtype:"float32"}}),v=ic({inputs:{x:x},backend:n,attrs:{reps:[h/m]}});f.push(x),f.push(v);return I(output,t,v,c,d)},N=ln({inputs:{x:I(w,"unsortedSegmentSum",d,k,l)},backend:n,attrs:{shape:v}});let S=N;if(null!=y){f.push(N);const e=r.nd.getUndoAxesPermutation(y);S=On({inputs:{x:S},backend:n,attrs:{perm:e}})}return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}},Fo];for(const e of xc)Object(r.Gd)(e)},function(e,t,n){"use strict";var r=n(274),o=n(280);const c=r.Dd.whereImpl;class d extends r.xb{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.M(this,Object(r.wd)())}nextDataId(){return d.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Object(r.xd)().get("IS_NODE")&&r.nd.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:n,refCount:1}),o}makeTensorInfo(e,t,n){let o;if("string"===t&&null!=n&&n.length>0&&r.Wd.isString(n[0])){const c=n.map((e=>r.Wd.encodeString(e)));o=this.write(c,e,t)}else o=this.write(n,e,t);return{dataId:o,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,o){this.data.set(e,{values:t,dtype:r,refCount:o})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.nd.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const data=this.readSync(e.dataId);let t=data;if("string"===e.dtype)try{t=data.map((e=>r.Wd.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(r.pd)(e.shape,e.dtype,t)}makeOutput(e,t,n){const o=this.write(e,t,n);return Object(r.wd)().makeTensorFromDataId(o,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.Wd.now();e();return{kernelMs:r.Wd.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Object(o.a)([e],"where");const t=this.readSync(e.dataId);return c(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}d.nextDataId=0,Object(r.Fd)("cpu",(()=>new d),1);var l=n(282);const h=Object(l.a)(r.X,(e=>e>=0?e:Math.exp(e)-1)),f={kernelName:r.X,backendName:"cpu",kernelFunc:h};var m=n(303);function y(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{alpha:l}=c;Object(o.a)([d],"leakyRelu");const h=r.Wd.sizeFromShape(d.shape),f=n.data.get(d.dataId).values,m=r.Wd.getTypedArrayFromDType("float32",h);for(let i=0;i<f.length;i++)m[i]=f[i]<0?l*f[i]:f[i];return n.makeTensorInfo(d.shape,"float32",m)}const x={kernelName:r.Ab,backendName:"cpu",kernelFunc:y};var v=n(285);const O=Object(v.a)(((e,t)=>e<0?t*e:e));function w(e){const{inputs:t,backend:n}=e,{x:r,alpha:c}=t;Object(o.a)([r,c],"prelu");const d=n.data.get(r.dataId).values,l=n.data.get(c.dataId).values,[h,f]=O(r.shape,c.shape,d,l,r.dtype);return n.makeTensorInfo(f,r.dtype,h)}const k={kernelName:r.hc,backendName:"cpu",kernelFunc:w},I=Object(l.a)(r.nc,(e=>Math.max(0,e))),N={kernelName:r.nc,backendName:"cpu",kernelFunc:I},S=Object(l.a)(r.oc,(e=>Math.min(Math.max(0,e),6))),T={kernelName:r.oc,backendName:"cpu",kernelFunc:S};var $=n(361);function j(e,t,n,r,o){if("linear"===n)return Object(m.a)({inputs:{x:t},backend:e});if("relu"===n)return I({inputs:{x:t},backend:e});if("elu"===n)return h({inputs:{x:t},backend:e});if("relu6"===n)return S({inputs:{x:t},backend:e});if("prelu"===n)return w({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return y({inputs:{x:t},backend:e,attrs:{alpha:o}});if("sigmoid"===n)return Object($.a)({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var C=n(315);function E(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{shape:d}=o,l=r.Wd.sizeFromShape(c.shape),h=r.Wd.inferFromImplicitShape(d,l),f=r.Wd.sizeFromShape(h);r.Wd.assert(l===f,(()=>`The new shape (${h}) has ${f} elements and the old shape (${c.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(c.dataId);const m=n.data.get(c.dataId);if(null!=m.complexTensorInfos){const e=m.complexTensorInfos.real,t=m.complexTensorInfos.imag;e.shape=h,t.shape=h}return{dataId:c.dataId,shape:h,dtype:c.dtype}}const A={kernelName:r.pc,backendName:"cpu",kernelFunc:E};function R(e){const{inputs:t,backend:n,attrs:c}=e,{a:a,b:b}=t,{transposeA:d,transposeB:l}=c;Object(o.a)([a,b],"matMul");const h=a.shape.length,f=b.shape.length,m=d?a.shape[h-2]:a.shape[h-1],y=l?b.shape[f-1]:b.shape[f-2],x=d?a.shape[h-1]:a.shape[h-2],v=l?b.shape[f-2]:b.shape[f-1],O=a.shape.slice(0,-2),w=b.shape.slice(0,-2),k=r.Wd.sizeFromShape(O),I=r.Wd.sizeFromShape(w),N=k===I||1===k||1===I;r.Wd.assert(h>=2&&f>=2&&N,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${O}) and (${w}).`));const S=(k>I?a.shape.slice(0,-2):b.shape.slice(0,-2)).concat([x,v]);r.Wd.assert(m===y,(()=>`Error in matMul: inner shapes (${m}) and (${y}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${d} and transposeB=${l} must match.`));const T=l?[I,v,y]:[I,y,v],$=E({inputs:{x:a},backend:n,attrs:{shape:d?[k,m,x]:[k,x,m]}}),j=E({inputs:{x:b},backend:n,attrs:{shape:T}}),C=d?$.shape[1]:$.shape[2],A=d?$.shape[2]:$.shape[1],R=l?j.shape[1]:j.shape[2],F=Math.max(k,I),_=n.data.get($.dataId).values,D=n.data.get(j.dataId).values,M=r.Wd.computeStrides($.shape),P=r.Wd.computeStrides(j.shape),[W,L,B]=d?[M[0],1,M[1]]:[M[0],M[1],1],[z,V,U]=l?[1,P[1],P[0]]:[P[1],1,P[0]],G=A*R,H=Object(r.pd)([F,A,R],$.dtype),K=H.values,X=n.blockSize;for(let e=0;e<F;e++)for(let t=0;t<A;t+=X)for(let n=0;n<R;n+=X)for(let r=0;r<C;r+=X){const o=Math.min(t+X,A),c=Math.min(n+X,R),d=Math.min(r+X,C);for(let i=t;i<o;i++)for(let t=n;t<c;t++){let n=0;for(let o=r;o<d;o++){const r=Math.min(e,k-1)*W,c=Math.min(e,I-1)*U;n+=_[r+i*L+o*B]*D[o*z+t*V+c]}K[e*G+(i*R+t)]+=n}}return n.disposeIntermediateTensorInfo($),n.disposeIntermediateTensorInfo(j),n.makeTensorInfo(S,H.dtype,H.values)}const F={kernelName:r.s,backendName:"cpu",kernelFunc:R};const _={kernelName:r.ld,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b,bias:o,preluActivationWeights:c}=t,{transposeA:d,transposeB:l,activation:h,leakyreluAlpha:f}=r;let m,y,x;const v=[];m=R({inputs:{a:a,b:b},attrs:{transposeA:d,transposeB:l},backend:n}),o&&(y=Object(C.a)({inputs:{a:m,b:o},backend:n}),v.push(m),m=y),h&&(x=j(n,m,h,c,f),v.push(m),m=x);for(const i of v)n.disposeIntermediateTensorInfo(i);return m}};var D=n(401);const M=Object(l.a)(r.b,(e=>Math.acos(e))),P={kernelName:r.b,backendName:"cpu",kernelFunc:M},W=Object(l.a)(r.c,(e=>Math.acosh(e))),L={kernelName:r.c,backendName:"cpu",kernelFunc:W};const B={kernelName:r.e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,c=t;Object(o.a)(t,"addN");const d=c.map((e=>n.data.get(e.dataId).values)),l=Object(r.pd)(c[0].shape,c[0].dtype),h=l.values;for(let i=0;i<c.length;i++){const e=d[i];for(let t=0;t<h.length;t++)h[t]+=e[t]}return n.makeTensorInfo(l.shape,l.dtype,l.values)}};var z=n(297);const V={kernelName:r.f,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l,keepDims:h}=c;Object(o.a)(d,"all");const f=r.Wd.parseAxisParam(l,d.shape);let m=f;const y=r.nd.getAxesPermutation(m,d.shape.length);let x=d;null!=y&&(x=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,d.shape.length)),r.nd.assertAxesAreInnerMostDims("all",m,x.shape.length);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=r.Wd.sizeFromShape(O),k=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(v),x.dtype),I=n.data.get(x.dataId).values;for(let i=0;i<k.length;++i){const e=i*w;let t=I[e];for(let n=0;n<w;++n){const r=I[e+n];t=t&&r}k[i]=t}null!=y&&n.disposeIntermediateTensorInfo(x);const N=n.makeTensorInfo(v,x.dtype,k);if(h){const e=E({inputs:{x:N},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}});return n.disposeIntermediateTensorInfo(N),e}return N}};const U={kernelName:r.g,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l,keepDims:h}=c;Object(o.a)(d,"any");const f=r.Wd.parseAxisParam(l,d.shape);let m=f;const y=r.nd.getAxesPermutation(m,d.shape.length);let x=d;null!=y&&(x=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,d.shape.length)),r.nd.assertAxesAreInnerMostDims("any",m,x.shape.length);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=r.Wd.sizeFromShape(O),k=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(v),x.dtype),I=n.data.get(x.dataId).values;for(let i=0;i<k.length;++i){const e=i*w;let t=I[e];for(let n=0;n<w;++n){const r=I[e+n];t=t||r}k[i]=t}null!=y&&n.disposeIntermediateTensorInfo(x);const N=n.makeTensorInfo(v,x.dtype,k);if(h){const e=E({inputs:{x:N},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}});return n.disposeIntermediateTensorInfo(N),e}return N}};const G={kernelName:r.h,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l}=c;Object(o.a)(d,"argMax");let h=r.Wd.parseAxisParam(l,d.shape);const f=r.nd.getAxesPermutation(h,d.shape.length);let m=d;const y=[];null!=f&&(m=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:f}}),y.push(m),h=r.nd.getInnerMostAxes(h.length,m.shape.length)),h=[h[0]],r.nd.assertAxesAreInnerMostDims("argMax",h,m.shape.length);const[x,v]=r.nd.computeOutAndReduceShapes(m.shape,h),O=r.Wd.sizeFromShape(x),w=r.Wd.makeZerosTypedArray(O,"int32"),k=r.Wd.sizeFromShape(v),I=n.data.get(m.dataId).values;for(let i=0;i<w.length;++i){const e=i*k;let t=I[e],n=0;for(let r=0;r<k;++r){const o=I[e+r];o>t&&(t=o,n=r)}w[i]=n}return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,"int32",w)}};const H={kernelName:r.i,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l}=c;Object(o.a)(d,"argMin");let h=r.Wd.parseAxisParam(l,d.shape);const f=r.nd.getAxesPermutation(h,d.shape.length);let m=d;const y=[];null!=f&&(m=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:f}}),y.push(m),h=r.nd.getInnerMostAxes(h.length,m.shape.length)),h=[h[0]],r.nd.assertAxesAreInnerMostDims("argMin",h,m.shape.length);const[x,v]=r.nd.computeOutAndReduceShapes(m.shape,h),O=r.Wd.sizeFromShape(x),w=r.Wd.makeZerosTypedArray(O,"int32"),k=r.Wd.sizeFromShape(v),I=n.data.get(m.dataId).values;for(let i=0;i<w.length;++i){const e=i*k;let t=I[e],n=0;for(let r=0;r<k;++r){const o=I[e+r];o<t&&(t=o,n=r)}w[i]=n}return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,"int32",w)}},K=Object(l.a)(r.j,(e=>Math.asin(e))),X={kernelName:r.j,backendName:"cpu",kernelFunc:K},Y=Object(l.a)(r.k,(e=>Math.asinh(e))),Z={kernelName:r.k,backendName:"cpu",kernelFunc:Y},Q=Object(l.a)(r.l,(e=>Math.atan(e))),J={kernelName:r.l,backendName:"cpu",kernelFunc:Q};var ee=n(287);const te=Object(v.a)(((e,t)=>Math.atan2(e,t))),ne=Object(ee.a)(r.m,te),re={kernelName:r.m,backendName:"cpu",kernelFunc:ne},ae=Object(l.a)(r.n,(e=>Math.atanh(e))),se={kernelName:r.n,backendName:"cpu",kernelFunc:ae};function oe(e,t,n,o,c,d){const l=c.strideHeight,h=c.strideWidth,f=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,v=c.padInfo.top,O=c.padInfo.left,w="max"===d?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,output=Object(r.pd)(c.outShape,n),k=output.values,I=c.outShape[1]*c.outShape[2]*c.outShape[3],N=c.outShape[2]*c.outShape[3],S=c.outShape[3];for(let b=0;b<c.batchSize;++b){const t=b*I,n=b*o[0];for(let r=0;r<c.inChannels;++r)for(let I=0;I<c.outHeight;++I){const T=I*l-v,$=Math.max(0,T),j=Math.min(c.inHeight,y+T),C=t+I*N;for(let t=0;t<c.outWidth;++t){const l=t*h-O,y=Math.max(0,l),v=Math.min(c.inWidth,x+l);let I=w,N=0,T=0;for(let t=$;t<j;t+=f){const c=n+t*o[1];for(let t=y;t<v;t+=m){const n=e[c+t*o[2]+r];"max"===d&&n>I?I=n:"avg"===d&&(N+=n,T++)}if(isNaN(I))break}k[C+t*S+r]="avg"===d?N/T:I}}}return output}function ie(e,t,n,o,c=!1,d=!1){const l=Object(r.pd)(o.outShape,"int32"),h=o.strideHeight,f=o.strideWidth,m=o.dilationHeight,y=o.dilationWidth,x=o.effectiveFilterHeight,v=o.effectiveFilterWidth,O=o.padInfo.top,w=o.padInfo.left,k=Object(r.pd)(t,n,e);for(let b=0;b<o.batchSize;++b)for(let e=0;e<o.inChannels;++e)for(let t=0;t<o.outHeight;++t){const n=t*h-O;let r=n;for(;r<0;)r+=m;const I=Math.min(o.inHeight,x+n);for(let h=0;h<o.outWidth;++h){const x=h*f-w;let O=x;for(;O<0;)O+=y;const N=Math.min(o.inWidth,v+x);let S=Number.NEGATIVE_INFINITY,T=-1;for(let t=r;t<I;t+=m){const r=t-n;for(let n=O;n<N;n+=y){const l=n-x,h=k.get(b,t,n,e);h>S&&(S=h,T=c?d?((b*o.inHeight+t)*o.inWidth+n)*o.inChannels+e:(t*o.inWidth+n)*o.inChannels+e:r*v+l)}}l.set(T,b,t,h,e)}}return l}function ce(e,t,n,o,c,d){const l=c.strideDepth,h=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,v=c.effectiveFilterDepth,O=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=c.padInfo.front,I=c.padInfo.top,N=c.padInfo.left,S="max"===d?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,output=Object(r.pd)(c.outShape,n),T=output.values,$=c.outShape[1]*c.outShape[2]*c.outShape[3]*c.outShape[4],j=c.outShape[2]*c.outShape[3]*c.outShape[4],C=c.outShape[3]*c.outShape[4],E=c.outShape[4];for(let t=0;t<c.batchSize;++t){const n=t*$,r=t*o[0];for(let t=0;t<c.inChannels;++t)for(let $=0;$<c.outDepth;++$){const A=$*l-k;let R=A;for(;R<0;)R+=m;const F=Math.min(c.inDepth,v+A),_=n+$*j;for(let n=0;n<c.outHeight;++n){const l=n*h-I;let v=l;for(;v<0;)v+=y;const k=Math.min(c.inHeight,O+l),$=_+n*C;for(let n=0;n<c.outWidth;++n){const l=n*f-N;let h=l;for(;h<0;)h+=x;const O=Math.min(c.inWidth,w+l),I=$+n*E;let j=S,C=0,A=0;for(let n=R;n<F;n+=m){const c=r+n*o[1];for(let n=v;n<k;n+=y){const r=c+n*o[2];for(let n=h;n<O;n+=x){const c=e[r+n*o[3]+t];if("max"===d&&c>j?j=c:"avg"===d&&(C+=c,A++),isNaN(j))break}if(isNaN(j))break}if(isNaN(j))break}T[I+t]="avg"===d?C/A:j}}}}return output}const ue={kernelName:r.o,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t;Object(o.a)(d,"avgPool");const{filterSize:l,strides:h,pad:f,dimRoundingMode:y}=c;r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(h,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${h} and dilations '1'`));const x=r.nd.computePool2DInfo(d.shape,l,h,1,f,y);let v;if(1===x.filterWidth&&1===x.filterHeight&&r.Wd.arraysEqual(x.inShape,x.outShape))v=Object(m.a)({inputs:{x:d},backend:n});else{const e=n.data.get(d.dataId).values,t=r.Wd.computeStrides(d.shape),o=oe(e,d.shape,d.dtype,t,x,"avg");v=n.makeTensorInfo(x.outShape,d.dtype,o.values)}return v}};const de={kernelName:r.p,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{filterSize:l,strides:h,pad:f,dimRoundingMode:m,dataFormat:y}=c;Object(o.a)(d,"avgPool3d");const x=r.nd.computePool3DInfo(d.shape,l,h,1,f,m,y),v=ce(n.data.get(d.dataId).values,d.shape,d.dtype,r.Wd.computeStrides(d.shape),x,"avg");return n.makeTensorInfo(v.shape,"float32",v.values)}};const le={kernelName:r.q,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,input:input}=t,{filterSize:l,strides:h,pad:f,dimRoundingMode:m}=c;Object(o.a)([d,input],"avgPool3DGrad");const y=r.nd.computePool3DInfo(input.shape,l,h,1,f,m),x=y.strideDepth,v=y.strideHeight,O=y.strideWidth,w=y.filterDepth,k=y.filterHeight,I=y.filterWidth,N=y.dilationDepth,S=y.dilationHeight,T=y.dilationWidth,$=y.effectiveFilterDepth,j=y.effectiveFilterHeight,C=y.effectiveFilterWidth,E=$-1-y.padInfo.front,A=C-1-y.padInfo.left,R=j-1-y.padInfo.top,F=Object(r.pd)(input.shape,"float32"),_=1/(w*k*I),D=n.bufferSync(d);for(let e=0;e<y.batchSize;++e)for(let t=0;t<y.inChannels;++t)for(let n=0;n<y.inDepth;++n)for(let r=0;r<y.inHeight;++r)for(let o=0;o<y.inWidth;++o){const c=n-E,d=r-R,l=o-A;let h=0;for(let n=0;n<$;n+=N){const r=(c+n)/x;if(!(r<0||r>=y.outDepth||Math.floor(r)!==r))for(let n=0;n<j;n+=S){const o=(d+n)/v;if(!(o<0||o>=y.outHeight||Math.floor(o)!==o))for(let n=0;n<C;n+=T){const c=(l+n)/O;if(c<0||c>=y.outWidth||Math.floor(c)!==c)continue;h+=D.get(e,r,o,c,t)}}}F.set(h*_,e,n,r,o,t)}return n.makeTensorInfo(F.shape,F.dtype,F.values)}};const pe={kernelName:r.r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,input:input}=t,l=input;Object(o.a)([d,input],"avgPoolGrad");const{filterSize:h,strides:f,pad:m}=c,y=r.nd.computePool2DInfo(l.shape,h,f,1,m),x=y.strideHeight,v=y.strideWidth,O=y.filterHeight,w=y.filterWidth,k=y.dilationHeight,I=y.dilationWidth,N=y.effectiveFilterHeight,S=y.effectiveFilterWidth,T=S-1-y.padInfo.left,$=N-1-y.padInfo.top,j=Object(r.pd)(l.shape,"float32"),C=1/(O*w),E=n.data.get(d.dataId).values,A=Object(r.pd)(d.shape,"float32",E);for(let b=0;b<y.batchSize;++b)for(let e=0;e<y.inChannels;++e)for(let t=0;t<y.inHeight;++t)for(let n=0;n<y.inWidth;++n){const r=t-$,o=n-T;let c=0;for(let t=0;t<N;t+=k){const n=(r+t)/x;if(!(n<0||n>=y.outHeight||Math.floor(n)!==n))for(let t=0;t<S;t+=I){const r=(o+t)/v;if(r<0||r>=y.outWidth||Math.floor(r)!==r)continue;c+=A.get(b,n,r,e)}}j.set(c*C,b,t,n,e)}return n.makeTensorInfo(j.shape,j.dtype,j.values)}};const he={kernelName:r.kb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,scale:l,offset:h,mean:f,variance:m}=t;r.Wd.assert(f.shape.length===m.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.Wd.assert(null==h||f.shape.length===h.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.Wd.assert(null==l||f.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Object(o.a)([d,f,m,l,h],"batchNorm");let{varianceEpsilon:y}=c;null==y&&(y=.001);const x=n.data.get(d.dataId).values,v=n.data.get(f.dataId).values,O=n.data.get(m.dataId).values,w=l?n.data.get(l.dataId).values:new Float32Array([1]),k=h?n.data.get(h.dataId).values:new Float32Array([0]),I=new Float32Array(x.length),N=k.length,S=w.length,T=O.length,$=v.length;let j=0,C=0,E=0,A=0;for(let i=0;i<x.length;++i)I[i]=k[j++]+(x[i]-v[C++])*w[E++]/Math.sqrt(O[A++]+y),j>=N&&(j=0),C>=$&&(C=0),E>=S&&(E=0),A>=T&&(A=0);return n.makeTensorInfo(d.shape,d.dtype,I)}};var fe=n(307);const me={kernelName:r.t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{blockShape:l,crops:h}=c;Object(o.a)([d],"batchToSpaceND");const f=l.reduce(((a,b)=>a*b)),m=r.nd.getReshaped(d.shape,l,f),y=r.nd.getPermuted(m.length,l.length),x=r.nd.getReshapedPermuted(d.shape,l,f),v=r.nd.getSliceBeginCoords(h,l.length),O=r.nd.getSliceSize(x,h,l.length),w=E({inputs:{x:d},backend:n,attrs:{shape:m}}),k=Object(z.a)({inputs:{x:w},backend:n,attrs:{perm:y}}),I=E({inputs:{x:k},backend:n,attrs:{shape:x}}),N=Object(fe.a)({inputs:{x:I},backend:n,attrs:{begin:v,size:O}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(I),N}};var be=n(340);const ge={kernelName:r.u,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:d}=r,l=n.data.get(o.dataId).values,h=n.data.get(c.dataId).values,f=Object(be.a)(l,h,c.dtype,c.shape,d);return n.makeTensorInfo([d],c.dtype,f)}};const ye={kernelName:r.v,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:o,s1:c}=t,d=n.data.get(o.dataId).values,l=n.data.get(c.dataId).values,h=r.nd.assertAndGetBroadcastShape(Array.from(d),Array.from(l));return n.makeTensorInfo([h.length],"int32",Int32Array.from(h))}};var xe=n(339),ve=n(402);const Oe=Object(l.a)(r.y,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),we={kernelName:r.y,backendName:"cpu",kernelFunc:Oe};var ke=n(305);const Ie={kernelName:r.A,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,o=new Float32Array(r.Wd.sizeFromShape(t.shape)),c=n.data.get(t.dataId),d=c.complexTensorInfos.real,l=c.complexTensorInfos.imag,h=n.data.get(d.dataId).values,f=n.data.get(l.dataId).values;for(let i=0;i<h.length;i++){const e=h[i],t=f[i];o[i]=Math.hypot(e,t)}return n.makeOutput(o,t.shape,"float32")}};var Ne=n(403);function Se(e){const{inputs:t,backend:n}=e,{input:input}=t,r=n.data.get(input.dataId).complexTensorInfos.imag,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}const Te={kernelName:r.tb,backendName:"cpu",kernelFunc:Se};var $e=n(324);function je(e){const{inputs:t,backend:n,attrs:o}=e,{axis:c}=o,d=r.Wd.parseAxisParam(c,t[0].shape)[0];let l=r.nd.computeOutShape(t.map((e=>e.shape)),d);if(0===r.Wd.sizeFromShape(l))return n.makeTensorInfo(l,t[0].dtype,[]);const h=t.filter((e=>r.Wd.sizeFromShape(e.shape)>0));if(1===h.length)return Object(m.a)({inputs:{x:h[0]},backend:n});const f=h.map((e=>e.shape));if(r.nd.assertParamsConsistent(f,d),"complex64"===h[0].dtype){const e=h.map((e=>Object($e.a)({inputs:{input:e},backend:n}))),t=h.map((e=>Se({inputs:{input:e},backend:n}))),r=je({inputs:e,backend:n,attrs:{axis:d}}),o=je({inputs:t,backend:n,attrs:{axis:d}}),c=Object(ke.a)({inputs:{real:r,imag:o},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((i=>n.disposeIntermediateTensorInfo(i))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),c}const y=h.map((e=>{const t=r.Wd.sizeFromShape(e.shape.slice(d));return E({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),x=y.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));l=r.nd.computeOutShape(y.map((e=>e.shape)),1);const v=1===y[0].shape[0],O=Object(Ne.a)(x,l,t[0].dtype,v),w=r.nd.computeOutShape(h.map((e=>e.shape)),d),k=n.makeTensorInfo(w,t[0].dtype,O);return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),k}const Ce={kernelName:r.B,backendName:"cpu",kernelFunc:je};function Ee(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,filter:filter}=t,{strides:l,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}=c;Object(o.a)([d,filter],"conv2d");const x=r.nd.convertConv2DDataFormat(f),v=r.nd.computeConv2DInfo(d.shape,filter.shape,l,m,h,y,!1,x),O=v.filterHeight,w=v.filterWidth,k=v.dilationHeight,I=v.dilationWidth,N=v.padInfo.left,S=v.padInfo.top,T="channelsLast"===v.dataFormat,$=new r.cd(v.outShape,d.dtype),j=r.Wd.computeStrides(d.shape),C=r.Wd.computeStrides(filter.shape),E=j[0],A=T?j[1]:j[2],R=T?j[2]:1,F=T?1:j[1],_=$.strides[0],D=T?$.strides[1]:$.strides[2],M=T?$.strides[2]:1,P=T?1:$.strides[1],W=n.data.get(d.dataId).values,L=n.data.get(filter.dataId).values,B=$.values;for(let b=0;b<v.batchSize;++b){const e=b*E,t=b*_;for(let n=0;n<v.outHeight;++n){const r=t+n*D,o=n*v.strideHeight-S;for(let t=0;t<O;++t){const n=o+t*k;if(n<0||n>=v.inHeight)continue;const c=t*C[0],d=e+n*A;for(let e=0;e<v.outWidth;++e){const t=r+e*M,n=e*v.strideWidth-N;for(let e=0;e<w;++e){const r=n+e*I;if(r<0||r>=v.inWidth)continue;const o=d+r*R;let l=c+e*C[1];for(let e=0;e<v.inChannels;++e){const n=W[o+e*F];for(let e=0;e<v.outChannels;++e)B[t+e*P]+=n*L[l+e];l+=v.outChannels}}}}}}return n.makeTensorInfo($.shape,$.dtype,B)}const Ae={kernelName:r.C,backendName:"cpu",kernelFunc:Ee};const Re={kernelName:r.D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,dy:l}=t,{strides:h,pad:f,dataFormat:m,dimRoundingMode:y,filterShape:x}=c;Object(o.a)([d,l],"conv2dBackpropFilter");const v=r.nd.convertConv2DDataFormat(m),O=r.nd.computeConv2DInfo(d.shape,x,h,1,f,y,!1,v),{strideHeight:w,strideWidth:k,filterHeight:I,filterWidth:N}=O,S="channelsLast"===O.dataFormat,T=new r.cd(O.filterShape,"float32"),$=O.padInfo.left,j=O.padInfo.top,C=n.data.get(d.dataId).values,E=n.data.get(l.dataId).values,A=new r.cd(d.shape,d.dtype,C),R=new r.cd(l.shape,l.dtype,E);for(let e=0;e<I;++e){const t=Math.max(0,Math.ceil((j-e)/w)),n=Math.min(O.outHeight,(O.inHeight+j-e)/w);for(let r=0;r<N;++r){const o=Math.max(0,Math.ceil(($-r)/k)),c=Math.min(O.outWidth,(O.inWidth+$-r)/k);for(let d=0;d<O.inChannels;++d)for(let l=0;l<O.outChannels;++l){let h=0;for(let b=0;b<O.batchSize;++b)for(let f=t;f<n;++f){const t=e+f*w-j;for(let e=o;e<c;++e){const n=r+e*k-$;h+=S?A.get(b,t,n,d)*R.get(b,f,e,l):A.get(b,d,t,n)*R.get(b,l,f,e)}}T.set(h,e,r,d,l)}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Fe={kernelName:r.E,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,filter:filter}=t,{inputShape:l,strides:h,pad:f,dataFormat:m,dimRoundingMode:y}=c;Object(o.a)([d,filter],"conv2dBackpropInput");const x=r.Wd.computeStrides(filter.shape),v=r.Wd.computeStrides(d.shape);let O=r.nd.convertConv2DDataFormat(m);const w=r.nd.computeConv2DInfo(l,filter.shape,h,1,f,y,!1,O),k=new r.cd(w.inShape,"float32"),I=k.values,N=n.data.get(d.dataId).values,S=n.data.get(filter.dataId).values,[T,$,j]=x,{batchSize:C,filterHeight:E,filterWidth:A,inChannels:R,inHeight:F,inWidth:_,outChannels:D,outHeight:M,outWidth:P,strideHeight:W,strideWidth:L}=w;O=w.dataFormat;const B=E-1-w.padInfo.top,z=A-1-w.padInfo.left,V="channelsLast"===O,U=k.strides[0],G=V?k.strides[1]:k.strides[2],H=V?k.strides[2]:1,K=V?1:k.strides[1],X=v[0],Y=V?v[1]:v[2],Z=V?v[2]:1,Q=V?1:v[1];for(let b=0;b<C;++b)for(let e=0;e<R;++e)for(let t=0;t<F;++t){const n=t-B,r=Math.max(0,Math.ceil(n/W)),o=Math.min(M,(E+n)/W);for(let c=0;c<_;++c){const d=c-z,l=Math.max(0,Math.ceil(d/L)),h=Math.min(P,(A+d)/L);let f=0;for(let t=r;t<o;++t){const r=t*W-n;for(let n=l;n<h;++n){const o=X*b+Y*t+Z*n,c=T*(E-1-r)+$*(A-1-(n*L-d))+j*e;for(let e=0;e<D;++e){f+=N[o+Q*e]*S[c+e]}}}I[U*b+G*t+H*c+K*e]=f}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const _e={kernelName:r.F,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,filter:filter}=t,{strides:l,pad:h,dilations:f}=c;Object(o.a)([d,filter],"conv3d");const m=r.nd.computeConv3DInfo(d.shape,filter.shape,l,f,h),{filterDepth:y,filterHeight:x,filterWidth:v,dilationDepth:O,dilationHeight:w,dilationWidth:k,padInfo:I}=m,N=I.front,S=I.left,T=I.top,$=new r.cd(m.outShape,d.dtype),j=n.data.get(d.dataId).values,C=n.data.get(filter.dataId).values,E=$.values,A=r.Wd.computeStrides(d.shape),R=r.Wd.computeStrides(filter.shape);for(let b=0;b<m.batchSize;++b){const e=b*A[0],t=b*$.strides[0];for(let n=0;n<m.outDepth;++n){const r=t+n*$.strides[1],o=n*m.strideDepth-N;for(let t=0;t<y;++t){const n=o+t*O;if(n<0||n>=m.inDepth)continue;const c=t*R[0],d=e+n*A[1];for(let e=0;e<m.outHeight;++e){const t=r+e*$.strides[2],n=e*m.strideHeight-T;for(let e=0;e<x;++e){const r=n+e*w;if(r<0||r>=m.inHeight)continue;const o=c+e*R[1],l=d+r*A[2];for(let e=0;e<m.outWidth;++e){const n=t+e*m.outChannels,r=e*m.strideWidth-S;for(let e=0;e<v;++e){const t=r+e*k;if(t<0||t>=m.inWidth)continue;const c=o+e*R[2],d=l+t*m.inChannels;let h=c;for(let e=0;e<m.inChannels;++e){const t=j[d+e];for(let e=0;e<m.outChannels;++e)E[n+e]+=t*C[h+e];h+=m.outChannels}}}}}}}}return n.makeTensorInfo($.shape,$.dtype,$.values)}};const De={kernelName:r.G,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,dy:l}=t,{strides:h,pad:f,filterShape:m}=c;Object(o.a)([d,l],"conv3dBackpropFilterV2");const y=r.Wd.computeStrides(d.shape),x=r.Wd.computeStrides(l.shape),v=r.nd.computeConv3DInfo(d.shape,m,h,1,f),O=v.strideDepth,w=v.strideHeight,k=v.strideWidth,I=v.filterDepth,N=v.filterHeight,S=v.filterWidth,T=new r.cd(v.filterShape,"float32"),$=T.values,[j,C,E,A]=T.strides,R=n.data.get(l.dataId).values,[F,_,D,M]=x,P=n.data.get(d.dataId).values,[W,L,B,z]=y,V=v.padInfo.front,U=v.padInfo.left,G=v.padInfo.top;for(let e=0;e<I;++e){const t=Math.max(0,Math.ceil((V-e)/O)),n=Math.min(v.outDepth,(v.inDepth+V-e)/O),r=e*j;for(let o=0;o<N;++o){const c=Math.max(0,Math.ceil((G-o)/w)),d=Math.min(v.outHeight,(v.inHeight+G-o)/w),l=o*C+r;for(let r=0;r<S;++r){const h=Math.max(0,Math.ceil((U-r)/k)),f=Math.min(v.outWidth,(v.inWidth+U-r)/k),m=r*E+l;for(let l=0;l<v.inChannels;++l){const y=l*A+m;for(let m=0;m<v.outChannels;++m){let x=0;for(let b=0;b<v.batchSize;++b){const y=b*W,v=b*F;for(let I=t;I<n;++I){const t=(e+I*O-V)*L+y,n=I*_+v;for(let e=c;e<d;++e){const c=(o+e*w-G)*B+t,d=e*D+n;for(let e=h;e<f;++e){const t=e*M+d;x+=P[(r+e*k-U)*z+c+l]*R[t+m]}}}}$[y+m]=x}}}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Me={kernelName:r.H,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,filter:filter}=t,{pad:l,strides:h,inputShape:f}=c;Object(o.a)([d],"conv3dBackpropInputV2");const m=r.Wd.computeStrides(d.shape),y=r.Wd.computeStrides(filter.shape),x=r.nd.computeConv3DInfo(f,filter.shape,h,1,l),v=new r.cd(x.inShape,"float32"),O=v.values,[w,k,I,N]=v.strides,S=n.data.get(d.dataId).values,[T,$,j,C]=m,E=n.data.get(filter.dataId).values,[A,R,F,_]=y,{batchSize:D,filterDepth:M,filterHeight:P,filterWidth:W,inChannels:L,inDepth:B,inHeight:z,inWidth:V,outChannels:U,outDepth:G,outHeight:H,outWidth:K,strideDepth:X,strideHeight:Y,strideWidth:Z}=x,Q=M-1-x.padInfo.front,J=P-1-x.padInfo.top,ee=W-1-x.padInfo.left;for(let b=0;b<D;++b)for(let e=0;e<L;++e)for(let t=0;t<B;++t){const n=t-Q,r=Math.max(0,Math.ceil(n/X)),o=Math.min(G,(M+n)/X);for(let c=0;c<z;++c){const d=c-J,l=Math.max(0,Math.ceil(d/Y)),h=Math.min(H,(P+d)/Y);for(let f=0;f<V;++f){const m=f-ee,y=Math.max(0,Math.ceil(m/Z)),x=Math.min(K,(W+m)/Z);let v=0;for(let t=r;t<o;++t){const r=t*X-n;for(let n=l;n<h;++n){const o=n*Y-d;for(let c=y;c<x;++c){const d=T*b+$*t+j*n+C*c,l=A*(M-1-r)+R*(P-1-o)+F*(W-1-(c*Z-m))+_*e;for(let e=0;e<U;++e){v+=S[d+e]*E[l+e]}}}}O[w*b+k*t+I*c+N*f+e]=v}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Pe=Object(l.a)(r.I,(e=>Math.cos(e))),We={kernelName:r.I,backendName:"cpu",kernelFunc:Pe},Le=Object(l.a)(r.J,(e=>Math.cosh(e))),Be={kernelName:r.J,backendName:"cpu",kernelFunc:Le};const ze={kernelName:r.K,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{image:image,boxes:c,boxInd:d}=t,{cropSize:l,method:h,extrapolationValue:f}=o,[m,y,x,v]=image.shape,O=c.shape[0],[w,k]=l,output=Object(r.pd)([O,w,k,v],"float32"),I=n.data.get(c.dataId).values,N=n.data.get(d.dataId).values,S=n.data.get(image.dataId).values,T=r.Wd.computeStrides(image.shape),$=r.Wd.computeStrides(output.shape);for(let b=0;b<O;b++){const e=4*b,t=I[e],n=I[e+1],r=I[e+2],o=I[e+3],c=N[b];if(c>=m)continue;const d=w>1?(r-t)*(y-1)/(w-1):0,l=k>1?(o-n)*(x-1)/(k-1):0;for(let e=0;e<w;e++){const m=w>1?t*(y-1)+e*d:.5*(t+r)*(y-1);if(m<0||m>y-1)for(let t=0;t<k;t++)for(let n=0;n<v;n++){const r=n+t*$[2]+e*$[1]+b*$[0];output.values[r]=f}else if("bilinear"===h){const t=Math.floor(m),r=Math.ceil(m),d=m-t;for(let h=0;h<k;h++){const m=k>1?n*(x-1)+h*l:.5*(n+o)*(x-1);if(m<0||m>x-1){for(let t=0;t<v;t++){const n=t+h*$[2]+e*$[1]+b*$[0];output.values[n]=f}continue}const y=Math.floor(m),O=Math.ceil(m),w=m-y;for(let n=0;n<v;n++){let o=n+y*T[2]+t*T[1]+c*T[0];const l=S[o];o=n+O*T[2]+t*T[1]+c*T[0];const f=S[o];o=n+y*T[2]+r*T[1]+c*T[0];const m=S[o];o=n+O*T[2]+r*T[1]+c*T[0];const x=l+(f-l)*w,v=m+(S[o]-m)*w;o=n+h*$[2]+e*$[1]+b*$[0],output.values[o]=x+(v-x)*d}}}else for(let t=0;t<k;++t){const r=k>1?n*(x-1)+t*l:.5*(n+o)*(x-1);if(r<0||r>x-1){for(let n=0;n<v;n++){const r=n+t*$[2]+e*$[1]+b*$[0];output.values[r]=f}continue}const d=Math.round(r),h=Math.round(m);for(let n=0;n<v;n++){const r=n+d*T[2]+h*T[1]+c*T[0],o=n+t*$[2]+e*$[1]+b*$[0];output.values[o]=S[r]}}}}return n.makeTensorInfo(output.shape,output.dtype,output.values)}};const Ve={kernelName:r.L,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l,exclusive:h,reverse:f}=c;Object(o.a)(d,"cumsum");const m=r.nd.getAxesPermutation([l],d.shape.length);let y=d;null!=m&&(y=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:m}}));const x=r.nd.getInnerMostAxes(1,d.shape.length)[0];if(x!==y.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${y.shape.length-1} but got axis=${x}`);const v=Object(r.Vd)(y.dtype,"int32"),O=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(y.shape),v),w=n.data.get(y.dataId).values,k=y.shape[y.shape.length-1],I=f?(i,e)=>i+k-e-1:(i,e)=>i+e;for(let i=0;i<w.length;i+=k)for(let e=0;e<k;e++){const t=I(i,e);if(0===e)O[t]=h?0:w[t];else{const n=I(i,e-1);O[t]=h?w[n]+O[n]:w[t]+O[n]}}const N=n.makeTensorInfo(y.shape,v,O);if(null!=m){const e=r.nd.getUndoAxesPermutation(m),t=Object(z.a)({inputs:{x:N},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(N),n.disposeIntermediateTensorInfo(y),t}return N}};const Ue={kernelName:r.N,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:d,binaryOutput:l}=r;if(1===o.shape.length){const e=n.data.get(o.dataId).values,t=n.data.get(c.dataId).values,r=Object(be.a)(e,t,c.dtype,c.shape,d);return n.makeTensorInfo([d],c.dtype,r)}if(2===o.shape.length){const e=n.bufferSync(o),t=n.bufferSync(c),r=Object(be.b)(e,t,d,l);return n.makeTensorInfo(r.shape,c.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`)}};const Ge={kernelName:r.O,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{blockSize:d,dataFormat:l}=o;r.Wd.assert("NHWC"===l,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${l}`)),r.Wd.assert(d>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${d}`));const h=c.shape[0],f=c.shape[1],m=c.shape[2],y=c.shape[3],x=f*d,v=m*d,O=y/(d*d),w=n.data.get(c.dataId).values,k=new Float32Array(h*x*v*O);let I=0;for(let b=0;b<h;++b)for(let e=0;e<x;++e){const t=Math.floor(e/d),n=e%d;for(let e=0;e<v;++e){const r=Math.floor(e/d),o=(n*d+e%d)*O;for(let e=0;e<O;++e){const n=e+o+y*(r+m*(t+f*b));k[I++]=w[n]}}}return n.makeTensorInfo([h,x,v,O],c.dtype,k)}};function He(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,filter:filter}=t,{strides:l,pad:h,dilations:f,dimRoundingMode:m}=c;Object(o.a)([d,filter],"depthwiseConv2DNative");const y=r.Wd.computeStrides(d.shape),x=r.Wd.computeStrides(filter.shape);let v=f;null==v&&(v=[1,1]),r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(l,v),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${v}'`));const O=r.nd.computeConv2DInfo(d.shape,filter.shape,l,v,h,m,!0),{filterHeight:w,filterWidth:k,dilationHeight:I,dilationWidth:N,padInfo:S}=O,T=S.left,$=S.top,j=O.outChannels/O.inChannels,C=new r.cd(O.outShape,d.dtype),E=n.data.get(d.dataId).values,A=n.data.get(filter.dataId).values,R=C.values;for(let b=0;b<O.batchSize;++b){const e=b*y[0],t=b*C.strides[0];for(let n=0;n<O.outHeight;++n){const r=t+n*C.strides[1],o=n*O.strideHeight-$;for(let t=0;t<w;++t){const n=o+t*I;if(n<0||n>=O.inHeight)continue;const c=t*x[0],d=e+n*y[1];for(let e=0;e<O.outWidth;++e){const t=r+e*C.strides[2],n=e*O.strideWidth-T;for(let e=0;e<k;++e){const r=n+e*N;if(r<0||r>=O.inWidth)continue;const o=c+e*x[1],l=d+r*O.inChannels;let h=t,f=o;for(let e=0;e<O.inChannels;++e){const t=E[l+e];for(let q=0;q<j;++q)R[h+q]+=t*A[f+q];h+=j,f+=j}}}}}}return n.makeTensorInfo(C.shape,C.dtype,C.values)}const Ke={kernelName:r.P,backendName:"cpu",kernelFunc:He};const qe={kernelName:r.Q,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,dy:l}=t,{strides:h,dilations:f,pad:m,dimRoundingMode:y,filterShape:x}=c;Object(o.a)([d,l],"depthwiseConv2dNativeBackpropFilter");const v=r.nd.computeConv2DInfo(d.shape,x,h,f,m,y,!0),{strideHeight:O,strideWidth:w,filterHeight:k,filterWidth:I}=v,N=new r.cd(v.filterShape,"float32"),S=v.padInfo.left,T=v.padInfo.top,$=v.outChannels/v.inChannels,j=n.data.get(d.dataId).values,C=new r.cd(d.shape,d.dtype,j),E=n.data.get(l.dataId).values,A=new r.cd(l.shape,l.dtype,E);for(let e=0;e<k;++e){const t=Math.max(0,Math.ceil((T-e)/O)),n=Math.min(v.outHeight,(v.inHeight+T-e)/O);for(let r=0;r<I;++r){const o=Math.max(0,Math.ceil((S-r)/w)),c=Math.min(v.outWidth,(v.inWidth+S-r)/w);for(let d=0;d<v.outChannels;++d){const l=Math.trunc(d/$),h=d%$;let f=0;for(let b=0;b<v.batchSize;++b)for(let h=t;h<n;++h){const t=e+h*O-T;for(let e=o;e<c;++e){const n=r+e*w-S;f+=C.get(b,t,n,l)*A.get(b,h,e,d)}}N.set(f,e,r,l,h)}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Xe={kernelName:r.R,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,filter:filter}=t,{strides:l,dilations:h,pad:f,dimRoundingMode:m,inputShape:y}=c;Object(o.a)([d,filter],"depthwiseConv2DNativeBackpropInput");const x=r.Wd.computeStrides(d.shape),v=r.Wd.computeStrides(filter.shape),O=r.nd.computeConv2DInfo(y,filter.shape,l,h,f,m,!0),w=new r.cd(O.inShape,"float32"),k=w.values,[I,N,S]=w.strides,T=n.data.get(d.dataId).values,[$,j,C]=x,E=n.data.get(filter.dataId).values,[A,R,F]=v,{batchSize:_,filterHeight:D,filterWidth:M,inChannels:P,inHeight:W,inWidth:L,outChannels:B,outHeight:z,outWidth:V,strideHeight:U,strideWidth:G}=O,H=D-1-O.padInfo.top,K=M-1-O.padInfo.left,X=B/P;for(let b=0;b<_;++b)for(let e=0;e<P;++e)for(let t=0;t<W;++t){const n=t-H,r=Math.max(0,Math.ceil(n/U)),o=Math.min(z,(D+n)/U);for(let c=0;c<L;++c){const d=c-K,l=Math.max(0,Math.ceil(d/G)),h=Math.min(V,(M+d)/G);let f=0;for(let t=r;t<o;++t){const r=t*U-n;for(let n=l;n<h;++n){const o=$*b+j*t+C*n,c=A*(D-1-r)+R*(M-1-(n*G-d))+F*e;for(let t=0;t<X;++t){f+=T[o+(e*X+t)]*E[c+t]}}}k[I*b+N*t+S*c+e]=f}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Ye={kernelName:r.S,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:o}=t,c=r.Wd.sizeFromShape(o.shape),d=n.data.get(o.dataId).values,l=Object(r.pd)([c,c],o.dtype),h=l.values;for(let i=0;i<d.length;i++)h[i*c+i]=d[i];const f=[...o.shape,...o.shape];return n.makeTensorInfo(f,l.dtype,l.values)}},Ze={kernelName:r.T,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:o,filter:filter}=e,{strides:c,pad:d,dilations:l}=n,h=t,f=h.data.get(o.dataId).values,m=o.shape.length,y=h.data.get(filter.dataId).values,x=filter.shape.length,{batchSize:v,inHeight:O,inWidth:w,inChannels:k,outHeight:I,outWidth:N,padInfo:S,strideHeight:T,strideWidth:$,filterHeight:j,filterWidth:C,dilationHeight:E,dilationWidth:A,outShape:R}=r.nd.computeDilation2DInfo(o.shape,filter.shape,c,d,"NHWC",l),F=r.Wd.sizeFromShape(R),_=R.length,D=r.Wd.getArrayFromDType(o.dtype,F);for(let b=0;b<v;++b)for(let e=0;e<I;++e){const t=e*T-S.top;for(let n=0;n<N;++n){const c=n*$-S.left;for(let d=0;d<k;++d){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<j;++e){const n=t+e*E;if(n>=0&&n<O)for(let t=0;t<C;++t){const h=c+t*A;if(h>=0&&h<w){const c=r.Wd.locToIndex([b,n,h,d],m,r.Wd.computeStrides(o.shape)),v=r.Wd.locToIndex([e,t,d],x,r.Wd.computeStrides(filter.shape)),O=f[c]+y[v];O>l&&(l=O)}}}D[r.Wd.locToIndex([b,e,n,d],_,r.Wd.computeStrides(R))]=l}}}return{dataId:h.write(r.Wd.toTypedArray(D,o.dtype),R,o.dtype),shape:R,dtype:o.dtype}}},Qe={kernelName:r.U,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:o,filter:filter,dy:c}=e,{strides:d,pad:l,dilations:h}=n,f=t,m=r.Wd.toNestedArray(o.shape,f.data.get(o.dataId).values),y=r.Wd.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:x,inHeight:v,inWidth:O,inChannels:w,outHeight:k,outWidth:I,padInfo:N,strideHeight:S,strideWidth:T,filterHeight:$,filterWidth:j,dilationHeight:C,dilationWidth:E,outShape:A}=r.nd.computeDilation2DInfo(o.shape,filter.shape,d,l,"NHWC",h);r.Wd.assert(c.rank===A.length,(()=>`Error in ${r.U}, dy must have the same rank as output ${A.length}, but got ${c.rank}`));const R=r.Wd.toNestedArray(A,f.data.get(c.dataId).values),F=r.Wd.makeZerosNestedTypedArray(filter.shape,filter.dtype);for(let b=0;b<x;++b)for(let e=0;e<k;++e){const t=e*S-N.top;for(let n=0;n<I;++n){const r=n*T-N.left;for(let o=0;o<w;++o){let c=Number.MIN_SAFE_INTEGER,d=0,l=0;for(let e=0;e<$;++e){const n=t+e*C;if(n>=0&&n<v)for(let t=0;t<j;++t){const h=r+t*E;if(h>=0&&h<O){const r=m[b][n][h][o]+y[e][t][o];r>c&&(c=r,d=e,l=t)}}}F[d][l][o]+=R[b][e][n][o]}}}return{dataId:f.write(r.Wd.toTypedArray(F,o.dtype),filter.shape,filter.dtype),shape:filter.shape,dtype:filter.dtype}}},Je={kernelName:r.V,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:o,filter:filter,dy:c}=e,{strides:d,pad:l,dilations:h}=n,f=t,m=r.Wd.toNestedArray(o.shape,f.data.get(o.dataId).values),y=r.Wd.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:x,inHeight:v,inWidth:O,inChannels:w,outHeight:k,outWidth:I,padInfo:N,strideHeight:S,strideWidth:T,filterHeight:$,filterWidth:j,dilationHeight:C,dilationWidth:E,outShape:A}=r.nd.computeDilation2DInfo(o.shape,filter.shape,d,l,"NHWC",h);r.Wd.assert(c.rank===A.length,(()=>`Error in ${r.V}, dy must have the same rank as output ${A.length}, but got ${c.rank}`));const R=r.Wd.toNestedArray(A,f.data.get(c.dataId).values),F=r.Wd.makeZerosNestedTypedArray(o.shape,o.dtype);for(let b=0;b<x;++b)for(let e=0;e<k;++e){const t=e*S-N.top;for(let n=0;n<I;++n){const r=n*T-N.left;for(let o=0;o<w;++o){let c=Number.MIN_SAFE_INTEGER,d=t<0?0:t,l=r<0?0:r;for(let e=0;e<$;++e){const n=t+e*C;if(n>=0&&n<v)for(let t=0;t<j;++t){const h=r+t*E;if(h>=0&&h<O){const r=m[b][n][h][o]+y[e][t][o];r>c&&(c=r,d=n,l=h)}}}F[b][d][l][o]+=R[b][e][n][o]}}}return{dataId:f.write(r.Wd.toTypedArray(F,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var et=n(316),tt=n(533);function nt(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l,keepDims:h}=c;let f;Object(o.a)(d,"sum"),f="bool"===d.dtype?Object(xe.a)({inputs:{x:d},backend:n,attrs:{dtype:"int32"}}):Object(m.a)({inputs:{x:d},backend:n});const y=f.shape.length,x=r.Wd.parseAxisParam(l,f.shape),v=r.nd.getAxesPermutation(x,y);let O=x,w=f;null!=v&&(w=Object(z.a)({inputs:{x:f},backend:n,attrs:{perm:v}}),O=r.nd.getInnerMostAxes(O.length,y)),r.nd.assertAxesAreInnerMostDims("sum",O,w.shape.length);const[k,I]=r.nd.computeOutAndReduceShapes(w.shape,O),N=r.nd.upcastType(w.dtype,"int32");let S=Object(tt.a)(n,k,N);const T=r.Wd.sizeFromShape(I),$=n.data.get(S.dataId).values,j=n.data.get(w.dataId).values;for(let i=0;i<$.length;++i){const e=i*T;let t=0;for(let n=0;n<T;++n)t+=j[e+n];$[i]=t}if(h){const e=S;S=E({inputs:{x:S},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(S.shape,x)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(f),null!=v&&n.disposeIntermediateTensorInfo(w),S}const at={kernelName:r.Yc,backendName:"cpu",kernelFunc:nt};const st={kernelName:r.W,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{equation:c}=o,d=t,{allDims:l,summedDims:h,idDims:f}=r.nd.decodeEinsumEquation(c,d.length);r.nd.checkEinsumDimSizes(l.length,f,d);const{path:path,steps:m}=r.nd.getEinsumComputePath(h,f),y=m.length;let x=null,v=l.length;const O=[];for(let i=0;i<y;++i){for(const e of m[i]){const{permutationIndices:t,expandDims:o}=r.nd.getEinsumPermutation(v,f[e]);let c;r.nd.isIdentityPermutation(t)?c=d[e]:(c=Object(z.a)({inputs:{x:d[e]},backend:n,attrs:{perm:t}}),O.push(c));const l=c.shape.slice();for(let e=0;e<o.length;++e)l.splice(o[e],0,1);r.Wd.arraysEqual(c.shape,l)||(c=E({inputs:{x:c},backend:n,attrs:{shape:l}}),O.push(c)),null===x?x=c:(x=Object(et.a)({inputs:{a:c,b:x},backend:n}),O.push(x))}i<y-1&&(path[i]>=0&&(x=nt({inputs:{x:x},backend:n,attrs:{axis:path[i]-(l.length-v),keepDims:!1}}),O.push(x)),v--)}for(const e of O)e!==x&&n.disposeIntermediateTensorInfo(e);return x}};const ot={kernelName:r.Y,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:c,y:d}=t;Object(o.a)([c,d],"eluGrad");const l=new Float32Array(r.Wd.sizeFromShape(d.shape)),h=n.data.get(d.dataId).values,f=n.data.get(c.dataId).values;for(let i=0;i<h.length;++i){const e=h[i];l[i]=e>=1?f[i]:f[i]*(e+1)}return n.makeTensorInfo(d.shape,"float32",l)}};var it=n(363);const p=r.nd.ERF_P,ct=r.nd.ERF_A1,ut=r.nd.ERF_A2,lt=r.nd.ERF_A3,pt=r.nd.ERF_A4,ht=r.nd.ERF_A5,ft=Object(l.a)(r.ab,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+p*n);return t*(1-((((ht*r+pt)*r+lt)*r+ut)*r+ct)*r*Math.exp(-n*n))})),mt={kernelName:r.ab,backendName:"cpu",kernelFunc:ft};var bt=n(364);function gt(e){const{inputs:t,backend:n,attrs:o}=e,{input:input}=t,{dim:c}=o,d=input.shape.length,l=input.shape.slice();let h=c;return c<0&&(r.Wd.assert(-(d+1)<=c,(()=>`Axis must be in the interval [${-(d+1)}, ${d}]`)),h=d+c+1),l.splice(h,0,1),E({inputs:{x:input},backend:n,attrs:{shape:l}})}const yt={kernelName:r.cb,backendName:"cpu",kernelFunc:gt};var xt=n(404);const vt=Object(v.a)(((a,b)=>a/b)),div=Object(ee.a)(r.lc,vt),Ot={kernelName:r.lc,backendName:"cpu",kernelFunc:div};var wt=n(341);function kt(input,e,t){const n=input.shape,o=n[0],c=n[1],d=t.data.get(input.dataId),l=d.complexTensorInfos.real,h=d.complexTensorInfos.imag,f=[o,c],m=r.Wd.sizeFromShape(f),y=r.Wd.getTypedArrayFromDType("float32",m),x=r.Wd.getTypedArrayFromDType("float32",m);for(let b=0;b<o;b++){const n=Object(fe.a)({inputs:{x:l},backend:t,attrs:{begin:[b,0],size:[1,c]}}),i=Object(fe.a)({inputs:{x:h},backend:t,attrs:{begin:[b,0],size:[1,c]}}),input=Object(ke.a)({inputs:{real:n,imag:i},backend:t}),{real:o,imag:d}=It(input,e,t),f=r.nd.mergeRealAndImagArrays(o,d);for(let e=0;e<c;e++){const t=r.nd.getComplexWithIndex(f,e);y[b*c+e]=t.real,x[b*c+e]=t.imag}t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(input)}const v=t.makeTensorInfo(f,"float32",y),O=t.makeTensorInfo(f,"float32",x),w=Object(ke.a)({inputs:{real:v,imag:O},backend:t});return t.disposeIntermediateTensorInfo(v),t.disposeIntermediateTensorInfo(O),w}function It(input,e,t){const n=r.Wd.sizeFromShape(input.shape),o=t.data.get(input.dataId),c=t.data.get(o.complexTensorInfos.real.dataId).values,d=t.data.get(o.complexTensorInfos.imag.dataId).values;if(0==((l=n)&l-1)){const o=Nt(c,d,n,e,t),l=[input.shape[0],input.shape[1]];if(e){const e=t.makeTensorInfo(l,"float32",o.real),c=t.makeTensorInfo(l,"float32",o.imag),d=t.makeTensorInfo([],"float32",r.Wd.createScalarValue(n,"float32")),h=Object(m.a)({inputs:{x:d},backend:t}),f=Ot.kernelFunc({inputs:{a:e,b:d},backend:t}),y=Ot.kernelFunc({inputs:{a:c,b:h},backend:t}),x=t.data.get(f.dataId).values,v=t.data.get(y.dataId).values;return t.disposeIntermediateTensorInfo(e),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(y),{real:x,imag:v}}return o}{const t=function(data,e,t){const n=new Float32Array(2*e);for(let o=0;o<e;o++){let c=0,d=0;for(let n=0;n<e;n++){const l=r.nd.exponent(o*n,e,t),h=r.nd.getComplexWithIndex(data,n);c+=h.real*l.real-h.imag*l.imag,d+=h.real*l.imag+h.imag*l.real}t&&(c/=e,d/=e),r.nd.assignToTypedArray(n,c,d,o)}return n}(r.nd.mergeRealAndImagArrays(c,d),n,e);return r.nd.splitRealAndImagArrays(t)}var l}function Nt(e,t,n,o,c){if(1===n)return{real:e,imag:t};const data=r.nd.mergeRealAndImagArrays(e,t),d=n/2,l=r.nd.complexWithEvenIndex(data),h=l.real,f=l.imag,m=[h.length],y=c.makeTensorInfo(m,"float32",h),x=c.makeTensorInfo(m,"float32",f),v=Object(ke.a)({inputs:{real:y,imag:x},backend:c}),O=r.nd.complexWithOddIndex(data),w=O.real,k=O.imag,I=[w.length],N=c.makeTensorInfo(I,"float32",w),S=c.makeTensorInfo(I,"float32",k),T=Object(ke.a)({inputs:{real:N,imag:S},backend:c}),$=Nt(h,f,d,o,c),j=$.real,E=$.imag,A=[j.length],R=c.makeTensorInfo(A,"float32",j),F=c.makeTensorInfo(A,"float32",E),_=Object(ke.a)({inputs:{real:R,imag:F},backend:c}),D=Nt(w,k,d,o,c),M=D.real,P=D.imag,W=[M.length],L=c.makeTensorInfo(W,"float32",M),B=c.makeTensorInfo(W,"float32",P),z=Object(ke.a)({inputs:{real:L,imag:B},backend:c}),V=r.nd.exponents(n,o),U=[V.real.length],G=c.makeTensorInfo(U,"float32",V.real),H=c.makeTensorInfo(U,"float32",V.imag),K=Object(ke.a)({inputs:{real:G,imag:H},backend:c}),X=Object(et.a)({inputs:{a:K,b:z},backend:c}),Y=Object(C.a)({inputs:{a:_,b:X},backend:c}),Z=Object(wt.a)({inputs:{a:_,b:X},backend:c}),Q=Object($e.a)({inputs:{input:Y},backend:c}),J=Object($e.a)({inputs:{input:Z},backend:c}),ee=Se({inputs:{input:Y},backend:c}),te=Se({inputs:{input:Z},backend:c}),ne=je({inputs:[Q,J],backend:c,attrs:{axis:0}}),re=je({inputs:[ee,te],backend:c,attrs:{axis:0}}),ae=c.data.get(ne.dataId).values,se=c.data.get(re.dataId).values;return c.disposeIntermediateTensorInfo(y),c.disposeIntermediateTensorInfo(x),c.disposeIntermediateTensorInfo(v),c.disposeIntermediateTensorInfo(N),c.disposeIntermediateTensorInfo(S),c.disposeIntermediateTensorInfo(T),c.disposeIntermediateTensorInfo(R),c.disposeIntermediateTensorInfo(F),c.disposeIntermediateTensorInfo(_),c.disposeIntermediateTensorInfo(L),c.disposeIntermediateTensorInfo(B),c.disposeIntermediateTensorInfo(z),c.disposeIntermediateTensorInfo(G),c.disposeIntermediateTensorInfo(H),c.disposeIntermediateTensorInfo(K),c.disposeIntermediateTensorInfo(X),c.disposeIntermediateTensorInfo(Y),c.disposeIntermediateTensorInfo(Z),c.disposeIntermediateTensorInfo(Q),c.disposeIntermediateTensorInfo(ee),c.disposeIntermediateTensorInfo(J),c.disposeIntermediateTensorInfo(te),c.disposeIntermediateTensorInfo(ne),c.disposeIntermediateTensorInfo(re),{real:ae,imag:se}}const St={kernelName:r.eb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t,o=r.Wd.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],d=E({inputs:{x:input},backend:n,attrs:{shape:[o/c,c]}}),l=kt(d,!1,n),h=E({inputs:{x:l},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(l),h}};function Tt(e){const{backend:t,attrs:n}=e,{shape:o,value:c,dtype:d}=n,l=d||r.Wd.inferDtype(c),h=r.Wd.getArrayFromDType(l,r.Wd.sizeFromShape(o));return function(e,t,n){e.fill(t)}(h,c),t.makeTensorInfo(o,l,h)}const $t={kernelName:r.fb,backendName:"cpu",kernelFunc:Tt};const jt={kernelName:r.gb,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,o=n,output=r.Wd.getTypedArrayFromDType(image.dtype,r.Wd.sizeFromShape(image.shape)),[c,d,l,h]=image.shape,f=o.data.get(image.dataId).values;for(let e=0;e<c;e++){const t=e*l*d*h;for(let e=0;e<d;e++){const n=e*(l*h);for(let col=0;col<l;col++){const e=col*h;for(let r=0;r<h;r++){const o=Math.round(l-col-1),c=t+n+e+r;let d=f[c];if(o>=0&&o<l){d=f[t+n+o*h+r]}output[c]=d}}}}return{dataId:o.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}};var Ct=n(405);const Et=Object(v.a)(((a,b)=>Math.floor(a/b))),At=Object(ee.a)(r.ib,Et,null,"int32"),Rt={kernelName:r.ib,backendName:"cpu",kernelFunc:At};const Ft={kernelName:r.lb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,filter:filter,bias:c,preluActivationWeights:d}=t,{strides:l,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:v}=r;let O=Ee({inputs:{x:o,filter:filter},backend:n,attrs:{strides:l,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const e=O;O=Object(C.a)({inputs:{a:O,b:c},backend:n}),n.disposeIntermediateTensorInfo(e)}if(x){const e=O;O=j(n,O,x,d,v),n.disposeIntermediateTensorInfo(e)}return O}};const _t={kernelName:r.mb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,filter:filter,bias:c,preluActivationWeights:d}=t,{strides:l,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:v}=r;let O=He({inputs:{x:o,filter:filter},backend:n,attrs:{strides:l,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const e=O;O=Object(C.a)({inputs:{a:O,b:c},backend:n}),n.disposeIntermediateTensorInfo(e)}if(x){const e=O;O=j(n,O,x,d,v),n.disposeIntermediateTensorInfo(e)}return O}};var Dt=n(406);const Mt={kernelName:r.nb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:o,indices:c}=t,d=r.Wd.sizeFromShape(o.shape),l=c.shape,h=l[l.length-1],[f,m,y,x]=r.nd.prepareAndValidate(o,c);if(0===m)return n.makeTensorInfo(f,o.dtype,[]);const v=n.data.get(c.dataId).values,O=n.bufferSync(o),w=Object(Dt.a)(v,O,o.dtype,m,h,y,x,o.shape,d);return n.makeTensorInfo(f,o.dtype,w.values)}};var Pt=n(407);const Wt={kernelName:r.ob,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,indices:l}=t,{axis:h,batchDims:f}=c;Object(o.a)([d,l],"gatherV2");let m=f;null==f&&(m=0);const y=r.Wd.sizeFromShape(l.shape),x=r.Wd.parseAxisParam(h,d.shape)[0],v=r.nd.segment_util.collectGatherOpShapeInfo(d,l,x,m),O=E({inputs:{x:d},backend:n,attrs:{shape:[v.batchSize,v.outerSize,v.dimSize,v.sliceSize]}}),w=E({inputs:{x:l},backend:n,attrs:{shape:[v.batchSize,y/v.batchSize]}}),k=[v.batchSize,v.outerSize,y/v.batchSize,v.sliceSize],I=n.bufferSync(w),N=n.bufferSync(O),S=Object(Pt.a)(N,I,k);return n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(w),n.makeTensorInfo(v.outputShape,S.dtype,S.values)}};var Lt=n(408),Bt=n(409);const zt={kernelName:r.rb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t,o=r.Wd.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],d=E({inputs:{x:input},backend:n,attrs:{shape:[o/c,c]}}),l=kt(d,!0,n),h=E({inputs:{x:l},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(l),h}},Vt=Object(l.a)(r.ub,(e=>Number.isFinite(e)?1:0),"bool"),Ut={kernelName:r.ub,backendName:"cpu",kernelFunc:Vt},Gt=Object(l.a)(r.vb,(e=>Math.abs(e)===1/0?1:0),"bool"),Ht={kernelName:r.vb,backendName:"cpu",kernelFunc:Gt},Kt=Object(l.a)(r.wb,(e=>Number.isNaN(e)?1:0),"bool"),qt={kernelName:r.wb,backendName:"cpu",kernelFunc:Kt};var Xt=n(410),Yt=n(411),Zt=n(412);const Qt={kernelName:r.Db,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,num:c}=n,d=Object(Zt.a)(r,o,c);return t.makeTensorInfo([d.length],"float32",d)}};var Jt=n(413);const en=Object(l.a)(r.Fb,(e=>Math.log1p(e))),tn={kernelName:r.Fb,backendName:"cpu",kernelFunc:en},nn=Object(v.a)(((a,b)=>a&&b)),rn=Object(ee.a)(r.Gb,nn,null,"bool"),an={kernelName:r.Gb,backendName:"cpu",kernelFunc:rn},sn=Object(l.a)(r.Hb,(e=>e?0:1),"bool"),on={kernelName:r.Hb,backendName:"cpu",kernelFunc:sn},cn=Object(v.a)(((a,b)=>a||b)),un=Object(ee.a)(r.Ib,cn,null,"bool"),dn={kernelName:r.Ib,backendName:"cpu",kernelFunc:un};const ln={kernelName:r.yb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{depthRadius:l,bias:h,alpha:f,beta:m}=c;Object(o.a)(d,"LRN");const y=d.shape[3],x=y-1,v=n.data.get(d.dataId).values,O=r.Wd.sizeFromShape(d.shape),w=new Float32Array(O);function k(e){const t=e%y;let n=e-t+Math.max(0,t-l);const r=e-t+Math.min(t+l,x);let o=0;for(;n<=r;n++){const e=v[n];o+=e*e}return o}for(let e=0;e<O;e++){const t=k(e),n=v[e]*Math.pow(h+f*t,-m);w[e]=n}return n.makeTensorInfo(d.shape,d.dtype,w)}};const pn={kernelName:r.zb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,y:l,dy:h}=t,{depthRadius:f,bias:m,alpha:y,beta:x}=c;Object(o.a)(h,"LRNGrad");const v=r.Wd.sizeFromShape(h.shape),O=h.shape[3],w=n.data.get(h.dataId).values,k=n.data.get(d.dataId).values,I=n.data.get(l.dataId).values,N=new Float32Array(v),S=v;for(let e=0;e<S;e++){const t=e%O,n=e-t+Math.max(0,t-f),r=e-t+Math.min(O,t+f+1);let o=0;for(let e=n;e<r;e++)o+=Math.pow(k[e],2);o=y*o+m;for(let t=n;t<r;t++){let n=-2*y*x*k[t]*I[e]/o;e===t&&(n+=Math.pow(o,-x)),n*=w[e],N[t]+=n}}return n.makeTensorInfo(h.shape,d.dtype,N)}};var hn=n(415),fn=n(362);function mn(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{reductionIndices:l,keepDims:h}=c,f=n;let m=d.shape;const y=m.length,x=r.Wd.parseAxisParam(l,m);let v=x;const O=r.nd.getAxesPermutation(v,y);let w=f.data.get(d.dataId).values;if(null!=O){const e=new Array(y);for(let i=0;i<e.length;i++)e[i]=m[O[i]];w=Object(fn.a)(w,m,d.dtype,O,e),v=r.nd.getInnerMostAxes(v.length,y),m=e}Object(o.a)(d,"max"),r.nd.assertAxesAreInnerMostDims("max",v,y);const[k,I]=r.nd.computeOutAndReduceShapes(m,v),N=r.Wd.sizeFromShape(I),S=Object(hn.a)(w,N,k,d.dtype),T=f.write(S,k,d.dtype);let $=k;if(h){$=r.nd.expandShapeToKeepDim(k,x)}return{dataId:T,shape:$,dtype:d.dtype}}const bn={kernelName:r.Jb,backendName:"cpu",kernelFunc:mn};var gn=n(414);const yn={kernelName:r.Kb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t;Object(o.a)(d,"maxPool");const{filterSize:l,strides:h,pad:f,dimRoundingMode:y}=c;r.Wd.assert(r.nd.eitherStridesOrDilationsAreOne(h,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${h} and dilations '1'`));const x=r.nd.computePool2DInfo(d.shape,l,h,1,f,y);let v;if(1===x.filterWidth&&1===x.filterHeight&&r.Wd.arraysEqual(x.inShape,x.outShape))v=Object(m.a)({inputs:{x:d},backend:n});else{const e=n.data.get(d.dataId).values,t=r.Wd.computeStrides(d.shape),o=oe(e,d.shape,d.dtype,t,x,"max");v=n.makeTensorInfo(x.outShape,d.dtype,o.values)}return v}};const xn={kernelName:r.Lb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{filterSize:l,strides:h,pad:f,dimRoundingMode:m,dataFormat:y}=c;Object(o.a)(d,"maxPool3d");const x=r.nd.computePool3DInfo(d.shape,l,h,1,f,m,y),v=ce(n.data.get(d.dataId).values,d.shape,d.dtype,r.Wd.computeStrides(d.shape),x,"max");return n.makeTensorInfo(v.shape,"float32",v.values)}};const vn={kernelName:r.Mb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,input:input}=t,{filterSize:l,strides:h,pad:f,dimRoundingMode:m}=c;Object(o.a)([d,input],"maxPool3DGrad");const y=r.nd.computePool3DInfo(input.shape,l,h,1,f,m),x=function(e,t){const n=Object(r.pd)(t.outShape,"int32"),o=t.strideDepth,c=t.strideHeight,d=t.strideWidth,l=t.dilationDepth,h=t.dilationHeight,f=t.dilationWidth,m=t.effectiveFilterDepth,y=t.effectiveFilterHeight,x=t.effectiveFilterWidth,v=t.padInfo.front,O=t.padInfo.top,w=t.padInfo.left;for(let r=0;r<t.batchSize;++r)for(let k=0;k<t.inChannels;++k)for(let I=0;I<t.outDepth;++I){const N=I*o-v;let S=N;for(;S<0;)S+=l;const T=Math.min(t.inDepth,m+N);for(let o=0;o<t.outHeight;++o){const m=o*c-O;let v=m;for(;v<0;)v+=h;const $=Math.min(t.inHeight,y+m);for(let c=0;c<t.outWidth;++c){const O=c*d-w;let j=O;for(;j<0;)j+=f;const C=Math.min(t.inWidth,x+O);let E=Number.NEGATIVE_INFINITY,A=-1;for(let t=S;t<T;t+=l){const n=t-N;for(let o=v;o<$;o+=h){const c=o-m;for(let d=j;d<C;d+=f){const l=d-O,h=e.get(r,t,o,d,k);h>=E&&(E=h,A=n*y*x+c*y+l)}}}n.set(A,r,I,o,c,k)}}}return n}(n.bufferSync(input),y),v=y.strideDepth,O=y.strideHeight,w=y.strideWidth,k=y.dilationDepth,I=y.dilationHeight,N=y.dilationWidth,S=y.effectiveFilterDepth,T=y.effectiveFilterHeight,$=y.effectiveFilterWidth,j=S-1-y.padInfo.front,C=$-1-y.padInfo.left,E=T-1-y.padInfo.top,A=Object(r.pd)(input.shape,"float32"),R=n.bufferSync(d);for(let e=0;e<y.batchSize;++e)for(let t=0;t<y.inChannels;++t)for(let n=0;n<y.inDepth;++n)for(let r=0;r<y.inHeight;++r)for(let o=0;o<y.inWidth;++o){const c=n-j,d=r-E,l=o-C;let h=0;for(let n=0;n<S;n+=k){const r=(c+n)/v;if(!(r<0||r>=y.outDepth||Math.floor(r)!==r))for(let o=0;o<T;o+=I){const c=(d+o)/O;if(!(c<0||c>=y.outHeight||Math.floor(c)!==c))for(let d=0;d<$;d+=N){const f=(l+d)/w;if(f<0||f>=y.outWidth||Math.floor(f)!==f)continue;const mask=S*T*$-1-x.get(e,r,c,f,t)===n*T*$+o*$+d?1:0;if(0===mask)continue;h+=R.get(e,r,c,f,t)*mask}}}A.set(h,e,n,r,o,t)}return n.makeTensorInfo(A.shape,A.dtype,A.values)}};const On={kernelName:r.Nb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{dy:d,input:input,output:output}=t,l=input;Object(o.a)([input,output],"maxPoolGrad");const{filterSize:h,strides:f,pad:m,dimRoundingMode:y}=c,x=r.nd.computePool2DInfo(l.shape,h,f,1,m,y),v=n.data.get(l.dataId).values,O=Object(r.pd)(x.outShape,l.dtype,ie(v,l.shape,l.dtype,x).values),w=x.strideHeight,k=x.strideWidth,I=x.dilationHeight,N=x.dilationWidth,S=x.effectiveFilterHeight,T=x.effectiveFilterWidth,$=T-1-x.padInfo.left,j=S-1-x.padInfo.top,C=Object(r.pd)(l.shape,"float32"),E=n.data.get(d.dataId).values,A=Object(r.pd)(d.shape,"float32",E);for(let b=0;b<x.batchSize;++b)for(let e=0;e<x.inChannels;++e)for(let t=0;t<x.inHeight;++t)for(let n=0;n<x.inWidth;++n){const r=t-j,o=n-$;let c=0;for(let t=0;t<S;t+=I){const n=(r+t)/w;if(!(n<0||n>=x.outHeight||Math.floor(n)!==n))for(let r=0;r<T;r+=N){const d=(o+r)/k;if(d<0||d>=x.outWidth||Math.floor(d)!==d)continue;const mask=S*T-1-O.get(b,n,d,e)===t*T+r?1:0;if(0===mask)continue;c+=A.get(b,n,d,e)*mask}}C.set(c,b,t,n,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const wn={kernelName:r.Ob,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:c}=e,{filterSize:d,strides:l,pad:h,includeBatchInIndex:f}=t,m=n;Object(o.a)(c,"MaxPoolWithArgmax");const y=m.data.get(c.dataId).values,x=r.nd.computePool2DInfo(c.shape,d,l,[1,1],h),[v,O]=function(e,t,n,o,c){const d=oe(e,0,n,r.Wd.computeStrides(t),c,"max"),l=ie(e,t,n,c,!0,o);return[d.values,l.values]}(y,c.shape,c.dtype,f,x),w=m.write(v,x.outShape,c.dtype),k=m.write(O,x.outShape,c.dtype);return[{dataId:w,shape:x.outShape,dtype:c.dtype},{dataId:k,shape:x.outShape,dtype:"int32"}]}};const kn={kernelName:r.Qb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{axis:d,keepDims:l}=o,h=r.Wd.parseAxisParam(d,c.shape),f=r.nd.computeOutAndReduceShapes(c.shape,h)[1],m=r.Wd.sizeFromShape(f),y=[],x=n.makeTensorInfo([],"float32",new Float32Array([m]));y.push(x);const v=Object(xe.a)({inputs:{x:c},backend:n,attrs:{dtype:"float32"}});y.push(v);const O=div({inputs:{a:v,b:x},backend:n});y.push(O);const w=nt({inputs:{x:O},backend:n,attrs:{axis:d,keepDims:l}});return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),w}};const In={kernelName:r.Rb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{axis:l,keepDims:h}=c;Object(o.a)(d,"min");const f=r.Wd.parseAxisParam(l,d.shape);let m=f;const y=r.nd.getAxesPermutation(m,d.shape.length);let x=d;null!=y&&(x=Object(z.a)({inputs:{x:d},backend:n,attrs:{perm:y}}),m=r.nd.getInnerMostAxes(m.length,d.shape.length)),r.nd.assertAxesAreInnerMostDims("min",m,x.shape.length);const[v,O]=r.nd.computeOutAndReduceShapes(x.shape,m),w=r.Wd.sizeFromShape(O),k=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(v),x.dtype),I=n.data.get(x.dataId).values;for(let i=0;i<k.length;++i){const e=i*w;let t=I[e];for(let n=0;n<w;++n){const r=I[e+n];(Number.isNaN(r)||r<t)&&(t=r)}k[i]=t}null!=y&&n.disposeIntermediateTensorInfo(x);const N=n.makeTensorInfo(v,x.dtype,k);if(h){const e=E({inputs:{x:N},backend:n,attrs:{shape:r.nd.expandShapeToKeepDim(v,f)}});return n.disposeIntermediateTensorInfo(N),e}return N}};var Nn=n(416);const Sn={kernelName:r.Tb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{paddings:l,mode:h}=c;Object(o.a)(d,"mirrorPad");const f=l.map(((p,i)=>p[0]+d.shape[i]+p[1])),m=l.map((p=>p[0])),y=l.map(((p,i)=>p[0]+d.shape[i])),x="reflect"===h?0:1,v=n.data.get(d.dataId).values,O=d.shape.length,w=r.Wd.computeStrides(d.shape),k=r.Wd.sizeFromShape(f),I=f.length,N=r.Wd.computeStrides(f),S=r.Wd.getTypedArrayFromDType(d.dtype,k);for(let i=0;i<k;i++){let e=r.Wd.indexToLoc(i,I,N);for(let i=0;i<I;i++)e[i]<m[i]?e[i]=2*m[i]-e[i]-x:e[i]>=y[i]&&(e[i]=2*(y[i]-1)-e[i]+x);e=e.map(((e,i)=>e-m[i]));const t=r.Wd.locToIndex(e,O,w);S[i]=v[t]}return{dataId:n.write(S,f,d.dtype),shape:f,dtype:d.dtype}}},Tn=Object(v.a)(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),$n=Object(ee.a)(r.Ub,Tn),jn={kernelName:r.Ub,backendName:"cpu",kernelFunc:$n};var Cn=n(504);function En(e){const{inputs:t,backend:n,attrs:o}=e,{logits:c}=t,{dim:d}=o,l=c.shape.length;let h=d;if(-1===h&&(h=l-1),h!==l-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${l} and dim was ${h}`);const f=r.Wd.parseAxisParam([h],c.shape),m=mn({inputs:{x:c},backend:n,attrs:{reductionIndices:f,keepDims:!1}}),y=r.nd.expandShapeToKeepDim(m.shape,f),x=E({inputs:{x:m},backend:n,attrs:{shape:y}}),a=Object(wt.a)({inputs:{a:c,b:x},backend:n}),b=Object(bt.a)({inputs:{x:a},backend:n}),v=nt({inputs:{x:b},backend:n,attrs:{axis:f,keepDims:!1}}),O=E({inputs:{x:v},backend:n,attrs:{shape:y}}),w=div({inputs:{a:b,b:O},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(O),w}const An={kernelName:r.Gc,backendName:"cpu",kernelFunc:En};const Rn={kernelName:r.Vb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{logits:d}=t,{numSamples:l,seed:h,normalized:f}=c;Object(o.a)(d,"multinomial");const m=f?d:En({inputs:{logits:d},backend:n,attrs:{dim:-1}}),y=m.shape[0],x=m.shape[1],v=n.data.get(m.dataId).values,O=[y,l],w=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(O),"int32");for(let b=0;b<y;++b){const e=b*x,t=new Float32Array(x-1);t[0]=v[e];for(let n=1;n<t.length;++n)t[n]=t[n-1]+v[e+n];const n=Cn.alea(h.toString()),r=b*l;for(let e=0;e<l;++e){const o=n();w[r+e]=t.length;for(let n=0;n<t.length;n++)if(o<t[n]){w[r+e]=n;break}}}return f||n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(O,"int32",w)}};var Fn=n(417);const _n=r.Dd.nonMaxSuppressionV3Impl;const Dn={kernelName:r.Yb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f}=r;Object(o.a)(c,"NonMaxSuppression");const m=n.data.get(c.dataId).values,y=n.data.get(d.dataId).values,{selectedIndices:x}=_n(m,y,l,h,f);return n.makeTensorInfo([x.length],"int32",new Int32Array(x))}},Mn=r.Dd.nonMaxSuppressionV4Impl;const Pn={kernelName:r.Zb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f,padToMaxOutputSize:m}=r;Object(o.a)(c,"NonMaxSuppressionPadded");const y=n.data.get(c.dataId).values,x=n.data.get(d.dataId).values,{selectedIndices:v,validOutputs:O}=Mn(y,x,l,h,f,m);return[n.makeTensorInfo([v.length],"int32",new Int32Array(v)),n.makeTensorInfo([],"int32",new Int32Array([O]))]}},Wn=r.Dd.nonMaxSuppressionV5Impl;const Ln={kernelName:r.ac,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:d}=t,{maxOutputSize:l,iouThreshold:h,scoreThreshold:f,softNmsSigma:m}=r;Object(o.a)(c,"NonMaxSuppressionWithScore");const y=n.data.get(c.dataId).values,x=n.data.get(d.dataId).values,v=l,O=h,w=f,k=m,{selectedIndices:I,selectedScores:N}=Wn(y,x,v,O,w,k);return[n.makeTensorInfo([I.length],"int32",new Int32Array(I)),n.makeTensorInfo([N.length],"float32",new Float32Array(N))]}};var Bn=n(418);const zn={kernelName:r.cc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{indices:d}=t,{depth:l,onValue:h,offValue:f}=c;Object(o.a)(d,"oneHot");const m=r.Wd.sizeFromShape(d.shape),y=new Float32Array(m*l);y.fill(f);const x=n.data.get(d.dataId).values;for(let e=0;e<m;++e)x[e]>=0&&x[e]<l&&(y[e*l+x[e]]=h);return n.makeTensorInfo([...d.shape,l],"int32",y)}};function Vn(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Object($e.a)({inputs:{input:r},backend:n}),t=Vn({inputs:{x:e},backend:n}),o=Se({inputs:{input:r},backend:n}),i=Vn({inputs:{x:o},backend:n}),c=Object(ke.a)({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}return Tt({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Un={kernelName:r.kd,backendName:"cpu",kernelFunc:Vn};const Gn={kernelName:r.dc,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:o}=n;if("string"===o.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===o.dtype){const t=Object($e.a)({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r}),c=Se({inputs:{input:o},backend:r}),i=Vn({inputs:{x:c},backend:r}),d=Object(ke.a)({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(i),d}return Tt({backend:r,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}};function Hn(e){const{inputs:t,backend:n,attrs:o}=e,{axis:c}=o;if(1===t.length)return gt({inputs:{input:t[0]},backend:n,attrs:{dim:c}});const d=t[0].shape,l=t[0].dtype;t.forEach((e=>{r.Wd.assertShapesMatch(d,e.shape,"All tensors passed to stack must have matching shapes"),r.Wd.assert(l===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const h=[],f=je({inputs:t.map((e=>{const t=gt({inputs:{input:e},backend:n,attrs:{dim:c}});return h.push(t),t})),backend:n,attrs:{axis:c}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Kn={kernelName:r.ec,backendName:"cpu",kernelFunc:Hn};const qn={kernelName:r.fc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{paddings:l,constantValue:h}=c;Object(o.a)(d,"pad");const f=l.map(((p,i)=>p[0]+d.shape[i]+p[1])),m=l.map((p=>p[0])),y=n.data.get(d.dataId).values,x=r.Wd.sizeFromShape(d.shape),v=d.shape.length,O=r.Wd.computeStrides(d.shape),w=r.Wd.sizeFromShape(f),k=f.length,I=r.Wd.computeStrides(f),N=r.Wd.getTypedArrayFromDType(d.dtype,w);0!==h&&N.fill(h);for(let i=0;i<x;i++){const e=r.Wd.indexToLoc(i,v,O).map(((e,i)=>e+m[i]));N[r.Wd.locToIndex(e,k,I)]=y[i]}return{dataId:n.write(N,f,d.dtype),shape:f,dtype:d.dtype}}},Xn=Object(v.a)(((a,b)=>Math.pow(a,b))),Yn=Object(ee.a)(r.gc,Xn),Zn={kernelName:r.gc,backendName:"cpu",kernelFunc:Yn};var Qn=n(419),Jn=n(420);const er={kernelName:r.jc,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,dtype:c,step:d}=n,l=Object(Jn.a)(r,o,d,c);return t.makeTensorInfo([l.length],c,l)}},nr=Object(l.a)(r.mc,(e=>1/e)),rr={kernelName:r.mc,backendName:"cpu",kernelFunc:nr};const ar={kernelName:r.qc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{images:d}=t,{alignCorners:l,halfPixelCenters:h,size:f}=c;Object(o.a)(d,"resizeBilinear");const m=r.Wd.computeStrides(d.shape),[y,x]=f,[v,O,w,k]=d.shape,I=n.data.get(d.dataId).values,N=new Float32Array(r.Wd.sizeFromShape([v,y,x,k])),S=[l&&y>1?O-1:O,l&&x>1?w-1:w],T=[l&&y>1?y-1:y,l&&x>1?x-1:x];let $=0;const j=S[0]/T[0],C=S[1]/T[1];for(let b=0;b<v;b++)for(let e=0;e<y;e++){let t;t=h?j*(e+.5)-.5:j*e;const n=Math.max(0,Math.floor(t)),r=t-n,o=Math.min(O-1,Math.ceil(t)),c=b*m[0]+n*m[1],d=b*m[0]+o*m[1];for(let e=0;e<x;e++){let t;t=h?C*(e+.5)-.5:C*e;const n=Math.max(0,Math.floor(t)),o=t-n,l=Math.min(w-1,Math.ceil(t)),f=c+n*m[2],y=d+n*m[2],x=c+l*m[2],v=d+l*m[2];for(let e=0;e<k;e++){const t=I[f+e],n=I[y+e],c=t+(I[x+e]-t)*o,d=c+(n+(I[v+e]-n)*o-c)*r;N[$++]=d}}}return n.makeTensorInfo([v,y,x,k],"float32",N)}};const sr={kernelName:r.rc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{images:d,dy:l}=t,{alignCorners:h}=c;Object(o.a)([l,d],"resizeBilinearGrad");const f=r.Wd.computeStrides(d.shape),[m,y,x,v]=d.shape,[,O,w]=l.shape,output=new Float32Array(m*y*x*v),k=[h&&O>1?y-1:y,h&&w>1?x-1:x],I=[h&&O>1?O-1:O,h&&w>1?w-1:w],N=k[0]/I[0],S=k[1]/I[1],T=n.data.get(l.dataId).values;let $=0;for(let b=0;b<m;b++){const e=b*f[0];for(let t=0;t<O;t++){const n=t*N,r=Math.floor(n),o=Math.min(Math.ceil(n),y-1),c=e+r*f[1],d=e+o*f[1],l=n-r,h=1-l;for(let e=0;e<w;e++){const t=e*S,n=Math.floor(t),r=Math.min(Math.ceil(t),x-1),o=t-n,m=1-o,y=c+n*f[2],O=c+r*f[2],w=d+n*f[2],k=d+r*f[2],I=h*m,N=h*o,j=l*m,C=l*o;for(let e=0;e<v;e++){const t=T[$++];output[y+e]+=t*I,output[O+e]+=t*N,output[w+e]+=t*j,output[k+e]+=t*C}}}}return n.makeTensorInfo([m,x,y,v],"float32",output)}};const or={kernelName:r.sc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{images:d}=t,{alignCorners:l,halfPixelCenters:h,size:f}=c;Object(o.a)(d,"resizeNearestNeighbor");const m=r.Wd.computeStrides(d.shape),[y,x]=f,[v,O,w,k]=d.shape,I=n.data.get(d.dataId).values,output=new Float32Array(v*y*x*k),N=[l&&y>1?O-1:O,l&&x>1?w-1:w],S=[l&&y>1?y-1:y,l&&x>1?x-1:x],T=N[0]/S[0],$=N[1]/S[1];let j=0;for(let b=0;b<v;b++){const e=b*m[0];for(let t=0;t<y;t++){const n=h?T*(t+.5):T*t;let r=Math.min(O-1,l?Math.round(n):Math.floor(n));h&&(r=Math.max(0,r));const o=e+r*m[1];for(let e=0;e<x;e++){const t=h?$*(e+.5):$*e;let n=Math.min(w-1,l?Math.round(t):Math.floor(t));h&&(n=Math.max(0,n));const r=o+n*m[2];for(let e=0;e<k;e++){const t=I[r+e];output[j++]=t}}}}return n.makeTensorInfo([v,y,x,k],d.dtype,output)}};const ir={kernelName:r.tc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{images:d,dy:l}=t,{alignCorners:h}=c;Object(o.a)([l,d],"resizeNearestNeighborGrad");const f=r.Wd.computeStrides(d.shape),m=r.Wd.computeStrides(l.shape),[y,x,v,O]=d.shape,[,w,k]=l.shape,output=new Float32Array(y*x*v*O),I=n.data.get(l.dataId).values,N=[h&&w>1?x-1:x,h&&k>1?v-1:v],S=[h&&w>1?w-1:w,h&&k>1?k-1:k],T=N[0]/S[0],$=N[1]/S[1],j=1/T,C=1/$,E=2*Math.ceil(j)+2,A=2*Math.ceil(C)+2;for(let b=0;b<y;b++){const e=b*f[0];for(let t=0;t<x;t++){const n=e+t*f[1],r=Math.floor(t*j),o=Math.floor(r-E/2);for(let r=0;r<v;r++){const c=n+r*f[2],d=Math.floor(r*C),l=Math.floor(d-A/2);for(let n=0;n<O;n++){let d=0;for(let c=0;c<E;c++){const f=c+o;if(f<0||f>=w)continue;const y=e+f*m[1],O=f*T;if(t===Math.min(x-1,h?Math.round(O):Math.floor(O)))for(let e=0;e<A;e++){const t=e+l;if(t<0||t>=k)continue;const o=y+t*m[2],c=t*$;r===Math.min(v-1,h?Math.round(c):Math.floor(c))&&(d+=I[o+n])}}output[c+n]=d}}}}return n.makeTensorInfo(d.shape,d.dtype,output)}};const cr={kernelName:r.uc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{dims:l}=c;Object(o.a)(d,"reverse");const h=d.shape.length,f=r.Wd.parseAxisParam(l,d.shape);if(0===h)return Object(m.a)({inputs:{x:d},backend:n});const y=new r.cd(d.shape,d.dtype),x=n.bufferSync(d);for(let i=0;i<y.size;i++){const e=y.indexToLoc(i),t=e.slice();f.forEach((e=>t[e]=d.shape[e]-1-t[e])),y.set(x.get(...t),...e)}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},ur={kernelName:r.vc,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,{radians:o,fillValue:c,center:d}=t,l=n,output=r.Wd.getTypedArrayFromDType(image.dtype,r.Wd.sizeFromShape(image.shape)),[h,f,m,y]=image.shape,[x,v]=r.nd.getImageCenter(d,f,m),O=Math.sin(o),w=Math.cos(o),k=l.data.get(image.dataId).values;for(let e=0;e<h;e++){const t=e*m*f*y;for(let e=0;e<f;e++){const n=e*(m*y);for(let col=0;col<m;col++){const r=col*y;for(let o=0;o<y;o++){const d=[h,e,col,o],l=d[2],I=d[1];let N=(l-x)*w-(I-v)*O,S=(l-x)*O+(I-v)*w;N=Math.round(N+x),S=Math.round(S+v);let T=c;if("number"!=typeof c&&(T=3===o?255:c[o]),N>=0&&N<m&&S>=0&&S<f){T=k[t+S*(m*y)+N*y+o]}output[t+n+r+o]=T}}}}return{dataId:l.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}},dr=Object(l.a)(r.wc,(e=>{const base=Math.floor(e);return e-base<.5?Math.floor(e):e-base>.5?Math.ceil(e):base%2==0?base:base+1})),lr={kernelName:r.wc,backendName:"cpu",kernelFunc:dr};var pr=n(421);function fr(e,t,n,o,c,d,l,h,f,m){const y=[o/c,c],x=e.values,v=t.values;if(0===o)return Object(r.pd)(n,t.dtype);const O=Object(r.pd)(y,t.dtype);O.values.fill(f);for(let i=0;i<d;i++){const e=[];let r=0;for(let t=0;t<l;t++){const n=x[i*l+t];e.push(n),r+=n*h[t]}if(r<0||r>=o/c)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let e=0;e<c;e++)m?O.values[r*c+e]+=v[i*c+e]:O.values[r*c+e]=0===t.rank?v[0]:v[i*c+e]}return O}const mr={kernelName:r.yc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{indices:c,updates:d}=t,{shape:l}=o,{sliceRank:h,numUpdates:f,sliceSize:m,strides:y,outputSize:x}=r.nd.calculateShapes(d,c,l),v=fr(n.bufferSync(c),n.bufferSync(d),l,x,m,f,h,y,0,!0);return n.makeTensorInfo(l,v.dtype,v.values)}};const gr={kernelName:r.zc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:c,t:d,e:l}=t;Object(o.a)([c,d,l],"select");const h=c.shape.length,f=n.data.get(c.dataId).values,m=n.data.get(d.dataId).values,y=n.data.get(l.dataId).values,x=Object(r.Vd)(d.dtype,l.dtype),v=r.Wd.makeZerosTypedArray(r.Wd.sizeFromShape(d.shape),x);let O=0;const w=0===h||h>1||1===d.shape.length?1:r.Wd.sizeFromShape(d.shape.slice(1));for(let i=0;i<f.length;i++)for(let e=0;e<w;e++)1===f[i]?v[O++]=m[i]:v[O++]=y[i];return n.makeTensorInfo(d.shape,x,v)}},yr=r.nd.SELU_SCALEALPHA,xr=r.nd.SELU_SCALE,vr=Object(l.a)(r.Ac,(e=>e>=0?xr*e:yr*(Math.exp(e)-1))),Or={kernelName:r.Ac,backendName:"cpu",kernelFunc:vr},wr=Object(l.a)(r.Cc,(e=>e<0?-1:e>0?1:0)),kr={kernelName:r.Cc,backendName:"cpu",kernelFunc:wr},Ir=Object(l.a)(r.Dc,(e=>Math.sin(e))),Nr={kernelName:r.Dc,backendName:"cpu",kernelFunc:Ir},Sr=Object(l.a)(r.Ec,(e=>Math.sinh(e))),Tr={kernelName:r.Ec,backendName:"cpu",kernelFunc:Sr},$r=Math.log(1.1920928955078125e-7)+2,jr=Object(l.a)(r.Hc,(e=>{const t=e>-$r,n=e<$r,r=Math.exp(e);let o;return o=n?r:t?e:Math.log(1+r),o})),Cr={kernelName:r.Hc,backendName:"cpu",kernelFunc:jr};const Er={kernelName:r.Ic,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{blockShape:l,paddings:h}=c;Object(o.a)([d],"spaceToBatchND");const f=r.Wd.sizeFromShape(l),m=[[0,0]];m.push(...h);for(let i=1+l.length;i<d.shape.length;++i)m.push([0,0]);const y=qn.kernelFunc({inputs:{x:d},backend:n,attrs:{paddings:m,constantValue:0}}),x=r.nd.getReshaped(y.shape,l,f,!1),v=r.nd.getPermuted(x.length,l.length,!1),O=r.nd.getReshapedPermuted(y.shape,l,f,!1),w=E({inputs:{x:y},backend:n,attrs:{shape:x}}),k={x:w},I={perm:v},N=Object(z.a)({inputs:k,backend:n,attrs:I}),S=E({inputs:{x:N},backend:n,attrs:{shape:O}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(N),S}};var Ar=n(422);const Rr={kernelName:r.Jc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:o,denseShape:c,defaultValue:d}=t;if(1!==c.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${c.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Values must be a vector, saw:\n        ${o.shape}`);if(0!==d.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${d.shape}`);const l=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,f=n.data.get(c.dataId).values,m=n.data.get(d.dataId).values[0],[y,x,v,O,w]=Object(Ar.a)(l,r.shape,r.dtype,h,o.dtype,f,m);return[n.makeTensorInfo(x,r.dtype,y),n.makeTensorInfo([x[0]],o.dtype,v),n.makeTensorInfo([O.length],"bool",new Uint8Array(O.map((e=>Number(e))))),n.makeTensorInfo([w.length],r.dtype,new Int32Array(w))]}};var Fr=n(423);const _r={kernelName:r.Kc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:o,newShape:c}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${o.shape}`);if(1!==c.shape.length)throw new Error(`Target shape should be a vector but received shape ${c.shape}`);const d=Array.from(n.data.get(o.dataId).values),l=n.data.get(r.dataId).values,h=Array.from(n.data.get(c.dataId).values),[f,m,y]=Object(Fr.a)(l,r.shape,r.dtype,d,h);return[n.makeTensorInfo(m,r.dtype,f),n.makeTensorInfo([y.length],c.dtype,new Int32Array(y))]}};var Dr=n(365);const Mr={kernelName:r.Lc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);const c=n.data.get(data.dataId).values,d=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values,[h,f]=Object(Dr.a)(c,data.shape,data.dtype,d,l,!0);return n.makeTensorInfo(f,data.dtype,h)}};const Pr={kernelName:r.Mc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);const c=n.data.get(data.dataId).values,d=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values,[h,f]=Object(Dr.a)(c,data.shape,data.dtype,d,l);return n.makeTensorInfo(f,data.dtype,h)}};const Wr={kernelName:r.Nc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{sparseIndices:c,sparseValues:d,defaultValue:l}=t,{outputShape:h}=o,{sliceRank:f,numUpdates:m,sliceSize:y,strides:x,outputSize:v}=r.nd.calculateShapes(d,c,h),O=fr(n.bufferSync(c),n.bufferSync(d),h,v,y,m,f,x,n.data.get(l.dataId).values[0],!1);return n.makeTensorInfo(h,O.dtype,O.values)}};const Lr={kernelName:r.Oc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:c}=t,{numOrSizeSplits:d,axis:l}=o,h=r.Wd.parseAxisParam(l,c.shape)[0],f=r.nd.prepareSplitSize(c,d,h),m=new Array(c.shape.length).fill(0),y=c.shape.slice();return f.map((s=>{const e=[...y];e[h]=s;const t=Object(fe.a)({inputs:{x:c},backend:n,attrs:{begin:m,size:e}});return m[h]+=s,t}))}};var Br=n(424);const zr={kernelName:r.Qc,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;Object(o.a)(n,"square");const c=r.data.get(n.dataId).values,d=new Float32Array(c.length);for(let i=0;i<c.length;++i){const e=c[i];d[i]=e*e}return{dataId:r.write(d,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var Vr=n(425);const Ur=Object(l.a)(r.Sc,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Gr={kernelName:r.Sc,backendName:"cpu",kernelFunc:Ur};var Hr=n(426);const Kr={kernelName:r.Tc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{begin:l,end:h,strides:f,beginMask:m,endMask:y,ellipsisMask:x,newAxisMask:v,shrinkAxisMask:O}=c;Object(o.a)(d,"stridedSlice");const{nonStrided:w,$begin:k,$strides:I,size:N,newShape:S,outShape:T}=r.Ld.sliceInfo(d.shape,l,h,f,m,y,x,v,O),$=E({inputs:{x:d},backend:n,attrs:{shape:S}});let j;if(w){const e=Object(fe.a)({inputs:{x:$},backend:n,attrs:{begin:k,size:N}});j=E({inputs:{x:e},backend:n,attrs:{shape:T}}),n.disposeIntermediateTensorInfo(e)}else if(T.some((e=>0===e)))j=n.makeTensorInfo(T,d.dtype,[]);else{const e=n.bufferSync($),t=Object(Hr.a)(T,e,I,k);j=n.makeTensorInfo(t.shape,t.dtype,t.values)}const C=E({inputs:{x:j},backend:n,attrs:{shape:T}});return n.disposeIntermediateTensorInfo($),n.disposeIntermediateTensorInfo(j),C}};var qr=n(427);const Xr={kernelName:r.Uc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:o,nGramWidths:c,leftPad:d,rightPad:l,padWidth:h,preserveShortSequences:f}=r,{data:data,dataSplits:m}=t,y=n.data.get(data.dataId).values,x=n.data.get(m.dataId).values,[v,O]=Object(qr.a)(y,x,o,c,d,l,h,f);return[n.makeTensorInfo([v.length],"string",v),n.makeTensorInfo(m.shape,"int32",O)]}};var Yr=n(428);const Zr={kernelName:r.Vc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:o}=r,{input:input,delimiter:c}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(1!==input.shape.length)throw new Error(`Input must be a vector, got shape: ${input.shape}`);if(0!==c.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const d=n.data.get(input.dataId).values,l=n.data.get(c.dataId).values[0],[h,f,m]=Object(Yr.a)(d,l,o),y=f.length;return[n.makeTensorInfo([y,2],"int32",h),n.makeTensorInfo([y],"string",f),n.makeTensorInfo([2],"int32",new Int32Array(m))]}};var Qr=n(429);const Jr={kernelName:r.Wc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:o}=r,{input:input}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(o<=0)throw new Error("Number of buckets must be at least 1");const c=n.data.get(input.dataId).values,output=Object(Qr.a)(c,o);return n.makeTensorInfo(input.shape,"int32",output)}},ea=Object(l.a)(r.Zc,(e=>Math.tan(e))),ta={kernelName:r.Zc,backendName:"cpu",kernelFunc:ea},na=Object(l.a)(r.ad,(e=>Math.tanh(e))),ra={kernelName:r.ad,backendName:"cpu",kernelFunc:na};var aa=n(430);const sa={kernelName:r.dd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{reps:d}=r;Object(o.a)(c,"tile");const l=Object(aa.a)(n.bufferSync(c),d);return n.makeTensorInfo(l.shape,l.dtype,l.values)}};var oa=n(431);const ia={kernelName:r.ed,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{k:d,sorted:l}=r;Object(o.a)(c,"topk");const h=n.data.get(c.dataId).values,[f,m]=Object(oa.a)(h,c.shape,c.dtype,d,l);return[n.makeTensorInfo(f.shape,f.dtype,f.values),n.makeTensorInfo(m.shape,m.dtype,m.values)]}};const ca={kernelName:r.fd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:o}=e,{image:image,transforms:c}=t,{interpolation:d,fillMode:l,fillValue:h,outputShape:f}=n,[m,y,x,v]=image.shape,[O,w]=null!=f?f:[y,x],k=[m,O,w,v],I=r.Wd.computeStrides(image.shape),N=I[0],S=I[1],T=I[2],$=r.Wd.getTypedArrayFromDType(image.dtype,r.Wd.sizeFromShape(k));$.fill(h);const j=o.data.get(image.dataId).values,C=o.data.get(c.dataId).values;for(let b=0;b<m;++b){const e=1===c.shape[0]?C:C.subarray(8*b,8*b+8);for(let t=0;t<O;++t)for(let n=0;n<w;++n)for(let r=0;r<v;++r){let o;const c=e[6]*n+e[7]*t+1;if(0===c)continue;const f=(e[0]*n+e[1]*t+e[2])/c,m=(e[3]*n+e[4]*t+e[5])/c,v=ua(f,x,l),O=ua(m,y,l);switch(d){case"nearest":o=la(j,y,x,N,S,T,b,O,v,r,h);break;case"bilinear":o=pa(j,y,x,N,S,T,b,O,v,r,h);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${d}`)}$[b*N+t*S+n*T+r]=o}return o.makeTensorInfo(k,image.dtype,$)}return{dataId:o.write($,k,image.dtype),shape:image.shape,dtype:image.dtype}}};function ua(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r.Wd.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r.Wd.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r.Wd.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function da(e,t,n,r,o,c,d,l,h,f,m){return 0<=l&&l<t&&0<=h&&h<n?e[d*r+l*o+h*c+f]:m}function la(e,t,n,r,o,c,d,l,h,f,m){return da(e,t,n,r,o,c,d,Math.round(l),Math.round(h),f,m)}function pa(e,t,n,r,o,c,d,l,h,f,m){const y=Math.floor(l),x=Math.floor(h),v=y+1,O=x+1;return(v-l)*((O-h)*da(e,t,n,r,o,c,d,y,x,f,m)+(h-x)*da(e,t,n,r,o,c,d,y,O,f,m))+(l-y)*((O-h)*da(e,t,n,r,o,c,d,v,x,f,m)+(h-x)*da(e,t,n,r,o,c,d,v,O,f,m))}var ha=n(432);const fa={kernelName:r.hd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:c}=n,{x:d}=t;Object(o.a)(d,"unique");const l=r.data.get(d.dataId).values,{outputValues:h,outputShape:f,indices:m}=Object(ha.a)(l,c,d.shape,d.dtype);return[r.makeTensorInfo(f,d.dtype,h),r.makeTensorInfo([m.length],"int32",m)]}};const ma={kernelName:r.id,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:o}=t;let{axis:c}=r;c<0&&(c+=o.shape.length);const d=o.shape.length,l=o.shape[c],h=new Array(d-1);let f=0;for(let i=0;i<d;i++)i!==c&&(h[f++]=o.shape[i]);const m=new Array(d).fill(0),y=o.shape.slice();y[c]=1;const x=new Array(l);for(let i=0;i<x.length;i++){m[c]=i;const e=Object(fe.a)({inputs:{x:o},backend:n,attrs:{begin:m,size:y}});x[i]=E({inputs:{x:e},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(e)}return x}};const ba={kernelName:r.jd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:c}=e,{x:d,segmentIds:l}=t,{numSegments:h}=c;Object(o.a)(d,"unsortedSegmentSum");const f=[],m=[],y=d.shape.length-l.shape.length;let x=l;for(let i=0;i<y;++i){const e=gt({inputs:{input:x},backend:n,attrs:{dim:i+1}});x=e,m.push(e)}for(let i=0;i<h;++i){const e=r.Wd.createScalarValue(i,"int32"),t=n.makeTensorInfo([],"int32",e),mask=Object(it.a)({inputs:{a:t,b:x},backend:n}),o=Object(xe.a)({inputs:{x:mask},backend:n,attrs:{dtype:"float32"}}),c=Object(et.a)({inputs:{a:o,b:d},backend:n}),l=nt({inputs:{x:c},backend:n,attrs:{axis:0,keepDims:!1}});f.push(l),m.push(t),m.push(mask),m.push(o),m.push(c),m.push(l)}const v=Hn({inputs:f,backend:n,attrs:{axis:0}});return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}},ga=[_,D.a,P,L,C.b,B,V,U,G,H,X,Z,J,re,se,ue,de,le,pe,F,he,me,ge,ye,xe.b,ve.a,we,ke.b,Ie,Ce,Re,Fe,Ae,De,Me,_e,We,Be,ze,Ve,Ue,Ge,Ke,qe,Xe,Ye,Ze,Je,Qe,Ot,st,f,ot,it.b,mt,bt.b,yt,xt.a,St,$t,jt,Ct.a,Rt,Ft,_t,Mt,Wt,Lt.a,Bt.a,m.b,zt,Te,Ut,Ht,qt,x,Xt.a,Yt.a,Qt,Jt.a,tn,an,on,dn,ln,pn,gn.a,yn,xn,vn,On,wn,bn,kn,In,Nn.a,Sn,jn,Rn,et.b,Fn.a,Dn,Pn,Ln,Bn.a,zn,Gn,Kn,qn,Zn,k,Qn.a,er,$e.b,rr,N,T,A,ar,sr,or,ir,cr,ur,lr,pr.a,mr,gr,Or,$.b,kr,Nr,Tr,fe.b,An,Cr,Er,Rr,_r,Mr,Pr,Wr,Lr,Br.a,zr,Vr.a,Gr,Kr,Xr,Zr,Jr,wt.b,at,ta,ra,sa,ia,z.b,ca,fa,ma,ba,Un];for(const e of ga)Object(r.Gd)(e)},function(e,t,n){"use strict";n.d(t,"a",(function(){return Qn})),n.d(t,"b",(function(){return er}));var r=n(274),o=n(459),c=n(284);class d{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Object(c.e)(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Object(c.e)(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(o.f)(this.node.rawAttrs,e,t);if(null!=n.s)return Object(o.i)(this.node.rawAttrs,e,t);if(null!=n.b)return Object(o.c)(this.node.rawAttrs,e,t);if(null!=n.shape)return Object(o.k)(this.node.rawAttrs,e,t);if(null!=n.type)return Object(o.e)(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(o.g)(this.node.rawAttrs,e,t);if(null!=n.list.s)return Object(o.h)(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Object(o.j)(this.node.rawAttrs,e,t);if(null!=n.list.b)return Object(o.b)(this.node.rawAttrs,e,t);if(null!=n.list.type)return Object(o.d)(this.node.rawAttrs,e,t)}return t}}var l=n(338),h=n(299),f=n(460),m=n(461),y=n(290),div=n(304),x=n(462),v=n(369),sub=n(292),O=n(388),w=n(463),k=n(382),I=n(389);var N=n(320),S=n(464),T=n(465),$=n(466),j=n(467),C=n(468),E=n(469),A=n(470),R=n(471),F=n(309),_=n(472),D=n(473),M=n(392),P=n(474),W=n(322),L=n(475),B=n(476),z=n(336),V=n(390),U=n(352),G=n(321),H=n(477),K=n(351),X=n(335),Y=n(376),Z=n(478),Q=n(371),J=n(479),ee=n(480),te=n(481),ne=n(482),re=n(381),ae=n(358),se=n(483),oe=n(484),ie=n(485),ce=n(393),ue=n(486),de=n(487),le=n(395),pe=n(394),he=n(488);function fe(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){r.Wd.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let i=0;i<e.length;i++){const o=e[i],c=t[i];r.Wd.assert(o<0||c<0||o===c,(()=>n+` Shapes ${e} and ${t} must match`))}}}function me(e){return"number"!=typeof e&&!e.some((e=>e<0))}function be(e,t,n){let r=ge(e,n);const o=!me(r);if(o&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(o&&t.forEach((e=>{r=ge(e.shape,r)})),!me(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function ge(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let i=0;i<e.length;++i){const r=e[i],o=t[i];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[i]=r>=0?r:o}return n}class ye{constructor(e,t,n,o,c,d,l){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=o,this.identicalElementShapes=c,this.dynamicSize=d,this.clearAfterRead=l,this.tensors=[],this.closed_=!1,this.idTensor=Object(r.Id)(0),Object(r.Cd)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),fe(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Object(r.Cd)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((i,e)=>this.write(i,t[e])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let i=0;i<this.size();i++)e.push(i)}if(0===e.length)return Object(r.Qd)([],[0].concat(this.elementShape));const n=this.readMany(e);return fe(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(r.Nd)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Object(r.Qd)([],[0].concat(this.elementShape));const t=[];for(let i=0;i<this.size();i++)t.push(i);const n=this.readMany(t);return fe(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(r.sd)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Object(r.Ud)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const o=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const c=0===n?0:t.size/n,d=[];Object(r.Td)((()=>{t=Object(r.Hd)(t,[1,n,c]);for(let i=0;i<e.length;++i){const n=[0,0===i?0:o[i-1],0],l=[1,e[i],c];d[i]=Object(r.Hd)(Object(r.Kd)(t,n,l),this.elementShape)}return d}));const l=[];for(let i=0;i<e.length;i++)l[i]=i;this.writeMany(l,d)}}class xe{constructor(e,t,n,o=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);fe(t,e.shape,"TensorList shape mismatch: "),Object(r.Cd)(e)})),this.idTensor=Object(r.Id)(0),this.maxNumElements=o,Object(r.Cd)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new xe([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);fe(e,this.elementShape,"TensorList shape mismatch: ");const o=be(this.elementShape,this.tensors,e);return Object(r.Td)((()=>{const e=this.tensors.map((e=>Object(r.Hd)(e,o)));return Object(r.Nd)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=be(this.elementShape,this.tensors,e),o=this.tensors.pop();return fe(o.shape,e,"TensorList shape mismatch: "),Object(r.Hd)(o,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(fe(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(r.Cd)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);fe(this.tensors[e].shape,t,"TensorList shape mismatch: ");const o=be(this.elementShape,this.tensors,t);return Object(r.Hd)(this.tensors[e],o)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);fe(this.elementShape,t.shape,"TensorList shape mismatch: "),Object(r.Cd)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);fe(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const o=be(this.elementShape,this.tensors,n);return 0===e.length?Object(r.Qd)([],[0].concat(o)):Object(r.Td)((()=>{const t=e.map((i=>Object(r.Hd)(this.tensors[i],o)));return Object(r.Nd)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);fe(this.elementShape,t,"TensorList shape mismatch: ");const n=be(this.elementShape,this.tensors,t);return 0===this.size()?Object(r.Qd)([],[0].concat(n)):Object(r.Td)((()=>{const e=this.tensors.map((e=>Object(r.Hd)(e,n)));return Object(r.sd)(e,0)}))}}const ve=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Object(c.d)("thenBranch",e,t,n),o=Object(c.d)("elseBranch",e,t,n),d=Object(c.d)("cond",e,t,n),l=Object(c.d)("args",e,t,n);return(await d.data())[0]?n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap):n.functionMap[o].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(c.d)("body",e,t,n),o=Object(c.d)("cond",e,t,n),d=Object(c.d)("args",e,t,n),l=await n.functionMap[o].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap),h=d.map((e=>e.id));let f=await l[0].data();l.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||e.dispose()}));let m=d;for(;f[0];){const e=m;m=await n.functionMap[r].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);const t=m.map((e=>e.id));e.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const c=await n.functionMap[o].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);f=await c[0].data(),c.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return m}case"LoopCond":{const r=Object(c.d)("pred",e,t,n);return[Object(c.a)(r)]}case"Switch":{const r=Object(c.d)("pred",e,t,n);let data=Object(c.d)("data",e,t,n);return data.kept||(data=Object(c.a)(data)),(await r.data())[0]?[void 0,data]:[data,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Object(c.e)(e,t,n)));if(r){const data=Object(c.e)(r,t,n);return[Object(c.a)(data)]}return}case"Enter":{const r=Object(c.d)("frameName",e,t,n),data=Object(c.d)("tensor",e,t,n);return n.enterFrame(r),[Object(c.a)(data)]}case"Exit":{const data=Object(c.d)("tensor",e,t,n);return n.exitFrame(),[Object(c.a)(data)]}case"NextIteration":{const data=Object(c.d)("tensor",e,t,n);return n.nextIteration(),[Object(c.a)(data)]}case"TensorArrayV3":{const o=Object(c.d)("size",e,t,n),d=Object(c.d)("dtype",e,t,n),l=Object(c.d)("elementShape",e,t,n),h=Object(c.d)("dynamicSize",e,t,n),f=Object(c.d)("clearAfterRead",e,t,n),m=Object(c.d)("identicalElementShapes",e,t,n),y=Object(c.d)("name",e,t,n),x=new ye(y,d,o,l,m,h,f);return n.addTensorArray(x),[x.idTensor,Object(r.Id)(1)]}case"TensorArrayWriteV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=Object(c.d)("index",e,t,n),d=Object(c.d)("tensor",e,t,n),l=n.getTensorArray(r.id);return l.write(o,d),[l.idTensor]}case"TensorArrayReadV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=Object(c.d)("index",e,t,n);return[n.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=Object(c.d)("indices",e,t,n),d=Object(c.d)("dtype",e,t,n);return[n.getTensorArray(r.id).gather(o,d)]}case"TensorArrayScatterV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=Object(c.d)("indices",e,t,n),d=Object(c.d)("tensor",e,t,n),l=n.getTensorArray(r.id);return l.scatter(o,d),[l.idTensor]}case"TensorArrayConcatV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=n.getTensorArray(r.id),d=Object(c.d)("dtype",e,t,n);return[o.concat(d)]}case"TensorArraySplitV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=Object(c.d)("tensor",e,t,n),d=Object(c.d)("lengths",e,t,n),l=n.getTensorArray(r.id);return l.split(d,o),[l.idTensor]}case"TensorArraySizeV3":{const o=Object(c.d)("tensorArrayId",e,t,n),d=n.getTensorArray(o.id);return[Object(r.Id)(d.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(c.d)("tensorArrayId",e,t,n),o=n.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("index",e,t,n),d=Object(c.d)("tensor",e,t,n),l=n.getTensorList(r.id);return l.setItem(o,d),[l.idTensor]}case"TensorListGetItem":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("index",e,t,n),d=Object(c.d)("elementShape",e,t,n),l=Object(c.d)("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(o,d,l)]}case"TensorListScatterV2":case"TensorListScatter":{const o=Object(c.d)("indices",e,t,n),d=function(e,t,n,o){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const c=Math.max(...t);if(null!=o&&-1!==o&&c>=o)throw new Error(`Max index must be < array size (${c}  vs. ${o})`);const d=new xe([],n,e.dtype,o),l=Object(r.Ud)(e,0);return t.forEach(((e,t)=>{d.setItem(e,l[t])})),d}(Object(c.d)("tensor",e,t,n),o,Object(c.d)("elementShape",e,t,n),Object(c.d)("numElements",e,t,n));return n.addTensorList(d),[d.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Object(c.d)("elementShape",e,t,n),o=Object(c.d)("elementDType",e,t,n);let d;d="TensorListReserve"===e.op?"numElements":"maxNumElements";const l=function(e,t,n){return new xe([],e,t,n)}(r,o,Object(c.d)(d,e,t,n));return n.addTensorList(l),[l.idTensor]}case"TensorListGather":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("indices",e,t,n),d=Object(c.d)("elementShape",e,t,n),l=Object(c.d)("elementDType",e,t,n);return[n.getTensorList(r.id).gather(o,l,d)]}case"TensorListStack":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("elementShape",e,t,n),d=Object(c.d)("elementDType",e,t,n),l=Object(c.d)("numElements",e,t,n);return[n.getTensorList(r.id).stack(o,d,l)]}case"TensorListFromTensor":{const o=function(e,t,n){const o=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);fe(e.shape.slice(1),t,"TensorList shape mismatch: ");const c=Object(r.Ud)(e);return new xe(c,t,o)}(Object(c.d)("tensor",e,t,n),Object(c.d)("elementShape",e,t,n),Object(c.d)("elementDType",e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListConcat":{const r=Object(c.d)("tensorListId",e,t,n),o=n.getTensorList(r.id),d=Object(c.d)("dtype",e,t,n),l=Object(c.d)("elementShape",e,t,n);return[o.concat(d,l)]}case"TensorListPushBack":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("tensor",e,t,n),d=n.getTensorList(r.id);return d.pushBack(o),[d.idTensor]}case"TensorListPopBack":{const r=Object(c.d)("tensorListId",e,t,n),o=Object(c.d)("elementShape",e,t,n),d=Object(c.d)("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(o,d)]}case"TensorListSplit":{const o=Object(c.d)("tensor",e,t,n),d=Object(c.d)("elementShape",e,t,n),l=function(e,t,n){let o=0;const c=t.map((e=>(o+=e,o)));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${o}, and tensor's shape is: ${e.shape}`);const d=ge(e.shape.slice(1),n),l=0===o?0:e.size/o,h=Object(r.Td)((()=>{const n=[];e=Object(r.Hd)(e,[1,o,l]);for(let i=0;i<t.length;++i){const o=[0,0===i?0:c[i-1],0],h=[1,t[i],l];n[i]=Object(r.Hd)(Object(r.Kd)(e,o,h),d)}return e.dispose(),n})),f=new xe([],n,e.dtype,t.length);for(let i=0;i<h.length;i++)f.setItem(i,h[i]);return f}(o,Object(c.d)("lengths",e,t,n),d);return n.addTensorList(l),[l.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};var Oe=n(489),we=n(360),ke=n(539),Ie=n(490),Ne=n(396),Se=n(491),Te=n(492),$e=n(493),je=n(494),Ce=n(495),Ee=n(496),Ae=n(497);function Re(e,t,n){const[r,o]=Object(c.d)("fusedOps",e,t,n),d="biasadd"===r,l=!d,h="prelu"===o,f="fusedbatchnorm"===r,m=Object(c.d)("numArgs",e,t,n);if(d){if(h&&2!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!h&&d&&1!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(f)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const y=Object(c.d)("strides",e,t,n),x=Object(c.c)(e,t,n),v=Object(c.d)("dataFormat",e,t,n).toUpperCase(),O=Object(c.d)("dilations",e,t,n);let[w,k]=Object(c.d)("args",e,t,n);l&&(k=w,w=void 0);return{stride:y,pad:x,dataFormat:v,dilations:O,biasArg:w,preluArg:k,activationFunc:o,leakyreluAlpha:Object(c.d)("leakyreluAlpha",e,t,n)}}var Fe=n(353),_e=n(498),De=n(499),Me=n(500),Pe=n(386),We=n(501),Le=n(502),Be=n(357),ze=n(505),Ve=n(331),Ue=n(350);var Ge=n(291),He=n(506),Ke=n(507);function qe(e,t,n){return{boxes:Object(c.d)("boxes",e,t,n),scores:Object(c.d)("scores",e,t,n),maxOutputSize:Object(c.d)("maxOutputSize",e,t,n),iouThreshold:Object(c.d)("iouThreshold",e,t,n),scoreThreshold:Object(c.d)("scoreThreshold",e,t,n),softNmsSigma:Object(c.d)("softNmsSigma",e,t,n)}}var Xe=n(508),Ye=n(509);var Ze=n(313),Qe=n(293);class Je{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Object(r.Id)(0),this.tensorMap=new Map,Object(r.Cd)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Qe.a(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Object(r.Td)((()=>{const e=Object(r.Ud)(t),o=n.length,c=e.length;r.Wd.assert(o===c,(()=>`The number of elements doesn't match, keys has ${o} elements, the values has ${c} elements.`));for(let i=0;i<o;i++){const t=n[i],o=e[i];Object(r.Cd)(o),this.tensorMap.set(t,o)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Object(r.Td)((()=>{const e=[];for(let i=0;i<n.length;i++){const r=n[i],o=this.findWithDefault(r,t);e.push(o)}return Object(r.Nd)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}var et=n(399),tt=n(387),nt=n(356),at=n(379),st=n(510),ot=n(355),it=n(378),ct=n(511),ut=n(512),lt=n(319);var pt=n(359),ht=n(513),ft=n(383);var mt=n(540),bt=n(514),gt=n(515),yt=n(516),xt=n(541);var vt=n(334),Ot=n(385),wt=n(380),kt=n(300),It=n(517),Nt=n(518),St=n(519),Tt=n(520),$t=n(521),jt=n(375),Ct=n(522);var Et=n(311),At=n(523),Rt=n(374),Ft=n(312),_t=n(524),Dt=n(372),Mt=n(281),Pt=n(330),Wt=n(346),Lt=n(354),Bt=n(332),zt=n(525),Vt=n(526);var Ut=n(347),Gt=n(348),Ht=n(349),Kt=n(373);var qt=n(370),Xt=n(527),Yt=n(528),Zt=n(529),Qt=n(530),Jt=n(531),en=n(377),tn=n(532);function nn(e,t,n,o){const fe=((e,t,n)=>{switch(e.category){case"arithmetic":return r.Td((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[h.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"AddN":return[f.a(Object(c.d)("tensors",e,t,n))];case"FloorMod":case"Mod":return[m.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Mul":return[y.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"RealDiv":case"Div":return[div.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"DivNoNan":return[x.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"FloorDiv":return[v.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Sub":return[sub.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Minimum":return[O.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Maximum":return[w.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Pow":return[k.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"SquaredDifference":return[I.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[N.a(Object(c.d)("x",e,t,n))];case"Acos":return[S.a(Object(c.d)("x",e,t,n))];case"Acosh":return[T.a(Object(c.d)("x",e,t,n))];case"Asin":return[$.a(Object(c.d)("x",e,t,n))];case"Asinh":return[j.a(Object(c.d)("x",e,t,n))];case"Atan":return[C.a(Object(c.d)("x",e,t,n))];case"Atan2":return[E.a(Object(c.d)("x",e,t,n),Object(c.d)("y",e,t,n))];case"Atanh":return[A.a(Object(c.d)("x",e,t,n))];case"Ceil":return[R.a(Object(c.d)("x",e,t,n))];case"Complex":return[F.a(Object(c.d)("real",e,t,n),Object(c.d)("imag",e,t,n))];case"Cos":return[_.a(Object(c.d)("x",e,t,n))];case"Cosh":return[D.a(Object(c.d)("x",e,t,n))];case"Elu":return[M.a(Object(c.d)("x",e,t,n))];case"Erf":return[P.a(Object(c.d)("x",e,t,n))];case"Exp":return[W.a(Object(c.d)("x",e,t,n))];case"Expm1":return[L.a(Object(c.d)("x",e,t,n))];case"Floor":return[B.a(Object(c.d)("x",e,t,n))];case"Log":return[z.a(Object(c.d)("x",e,t,n))];case"Log1p":return[V.a(Object(c.d)("x",e,t,n))];case"Imag":return[U.a(Object(c.d)("x",e,t,n))];case"Neg":return[G.a(Object(c.d)("x",e,t,n))];case"Reciprocal":return[H.a(Object(c.d)("x",e,t,n))];case"Real":return[K.a(Object(c.d)("x",e,t,n))];case"Relu":return[X.a(Object(c.d)("x",e,t,n))];case"Round":return[Y.a(Object(c.d)("x",e,t,n))];case"Selu":return[Z.a(Object(c.d)("x",e,t,n))];case"Sigmoid":return[Q.a(Object(c.d)("x",e,t,n))];case"Sin":return[J.a(Object(c.d)("x",e,t,n))];case"Sign":return[ee.a(Object(c.d)("x",e,t,n))];case"Sinh":return[te.a(Object(c.d)("x",e,t,n))];case"Softplus":return[ne.a(Object(c.d)("x",e,t,n))];case"Sqrt":return[re.a(Object(c.d)("x",e,t,n))];case"Square":return[ae.a(Object(c.d)("x",e,t,n))];case"Tanh":return[se.a(Object(c.d)("x",e,t,n))];case"Tan":return[oe.a(Object(c.d)("x",e,t,n))];case"ClipByValue":return[ie.a(Object(c.d)("x",e,t,n),Object(c.d)("clipValueMin",e,t,n),Object(c.d)("clipValueMax",e,t,n))];case"Relu6":return[ce.a(Object(c.d)("x",e,t,n))];case"Rsqrt":return[ue.a(Object(c.e)(e.inputNames[0],t,n))];case"Prod":return[de.a(Object(c.d)("x",e,t,n),Object(c.d)("axes",e,t,n))];case"LeakyRelu":return[le.a(Object(c.d)("x",e,t,n),Object(c.d)("alpha",e,t,n))];case"Prelu":return[pe.a(Object(c.d)("x",e,t,n),Object(c.d)("alpha",e,t,n))];case"IsNan":return[he.a(Object(c.e)(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return ve(e,t,n);case"convolution":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=Object(c.d)("stride",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("dataFormat",e,t,n).toUpperCase(),l=Object(c.d)("dilation",e,t,n);return[Oe.a(Object(c.d)("x",e,t,n),Object(c.d)("filter",e,t,n),r,o,d,l)]}case"Conv2D":{const r=Object(c.d)("strides",e,t,n),o=Object(c.c)(e,t,n),d=Object(c.d)("dataFormat",e,t,n).toUpperCase(),l=Object(c.d)("dilations",e,t,n);return[we.a(Object(c.d)("x",e,t,n),Object(c.d)("filter",e,t,n),[r[1],r[2]],o,d,[l[1],l[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:d,dilations:l,biasArg:h,preluArg:f,activationFunc:m,leakyreluAlpha:y}=Re(e,t,n);return[ke.i.conv2d({x:Object(c.d)("x",e,t,n),filter:Object(c.d)("filter",e,t,n),strides:[r[1],r[2]],pad:o,dataFormat:d,dilations:[l[1],l[2]],bias:h,activation:m,preluActivationWeights:f,leakyreluAlpha:y})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:d,dilations:l,biasArg:h,preluArg:f,activationFunc:m,leakyreluAlpha:y}=Re(e,t,n);return[ke.i.depthwiseConv2d({x:Object(c.d)("x",e,t,n),filter:Object(c.d)("filter",e,t,n),strides:[r[1],r[2]],pad:o,dataFormat:d,dilations:[l[1],l[2]],bias:h,activation:m,preluActivationWeights:f,leakyreluAlpha:y})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(c.d)("outputShape",e,t,n),o=Object(c.d)("strides",e,t,n),d=Object(c.c)(e,t,n);return[Ie.a(Object(c.d)("x",e,t,n),Object(c.d)("filter",e,t,n),r,[o[1],o[2]],d)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(c.d)("strides",e,t,n),o=Object(c.c)(e,t,n),d=Object(c.d)("dilations",e,t,n),l=Object(c.d)("dataFormat",e,t,n).toUpperCase();return[Ne.a(Object(c.d)("input",e,t,n),Object(c.d)("filter",e,t,n),[r[1],r[2]],o,l,[d[1],d[2]])]}case"Conv3D":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("dataFormat",e,t,n).toUpperCase(),l=Object(c.d)("dilations",e,t,n);return[Se.a(Object(c.d)("x",e,t,n),Object(c.d)("filter",e,t,n),[r[1],r[2],r[3]],o,d,[l[1],l[2],l[3]])]}case"AvgPool":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("kernelSize",e,t,n);return[Te.a(Object(c.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("kernelSize",e,t,n);return[$e.a(Object(c.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("kernelSize",e,t,n),l=Object(c.d)("includeBatchInIndex",e,t,n),{result:h,indexes:f}=je.a(Object(c.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],o,l);return[h,f]}case"AvgPool3D":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("kernelSize",e,t,n);return[Ce.a(Object(c.d)("x",e,t,n),[d[1],d[2],d[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("kernelSize",e,t,n);return[Ee.a(Object(c.d)("x",e,t,n),[d[1],d[2],d[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=Object(c.d)("strides",e,t,n),o=Object(c.d)("pad",e,t,n),d=Object(c.d)("dilations",e,t,n),l=r[1],h=r[2],f=d[1],m=d[2];return[Ae.a(Object(c.d)("x",e,t,n),Object(c.d)("filter",e,t,n),[l,h],o,[f,m],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=Object(c.d)("shape",e,t,n),o=Object(c.d)("dtype",e,t,n),d=Object(c.d)("value",e,t,n);return[Fe.a(r,d,o)]}case"LinSpace":{const r=Object(c.d)("start",e,t,n),o=Object(c.d)("stop",e,t,n),d=Object(c.d)("num",e,t,n);return[_e.a(r,o,d)]}case"Multinomial":{const r=Object(c.d)("logits",e,t,n),o=Object(c.d)("numSamples",e,t,n),d=Object(c.d)("seed",e,t,n);return[De.a(r,o,d)]}case"OneHot":{const r=Object(c.d)("indices",e,t,n),o=Object(c.d)("depth",e,t,n),d=Object(c.d)("onValue",e,t,n),l=Object(c.d)("offValue",e,t,n);return[Me.a(r,o,d,l)]}case"Ones":return[Pe.a(Object(c.d)("shape",e,t,n),Object(c.d)("dtype",e,t,n))];case"OnesLike":return[We.a(Object(c.d)("x",e,t,n))];case"RandomUniform":return[Le.a(Object(c.d)("shape",e,t,n),Object(c.d)("minval",e,t,n),Object(c.d)("maxval",e,t,n),Object(c.d)("dtype",e,t,n))];case"Range":{const r=Object(c.d)("start",e,t,n),o=Object(c.d)("stop",e,t,n),d=Object(c.d)("step",e,t,n);return[Be.a(r,o,d,Object(c.d)("dtype",e,t,n))]}case"TruncatedNormal":{const r=Object(c.d)("shape",e,t,n),o=Object(c.d)("mean",e,t,n),d=Object(c.d)("stdDev",e,t,n),l=Object(c.d)("seed",e,t,n);return[ze.a(r,o,d,Object(c.d)("dtype",e,t,n),l)]}case"Zeros":return[Ve.a(Object(c.d)("shape",e,t,n),Object(c.d)("dtype",e,t,n))];case"ZerosLike":return[Ue.a(Object(c.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:o,maxOutputSize:c,iouThreshold:d,scoreThreshold:l,softNmsSigma:h}=qe(e,t,n),f=await ke.j.nonMaxSuppressionWithScoreAsync(r,o,c,d,l,h);return[f.selectedIndices,f.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:o,maxOutputSize:d,iouThreshold:l,scoreThreshold:h}=qe(e,t,n),f=Object(c.d)("padToMaxOutputSize",e,t,n),m=await ke.j.nonMaxSuppressionPaddedAsync(r,o,d,l,h,f);return[m.selectedIndices,m.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:o,maxOutputSize:c,iouThreshold:d,scoreThreshold:l}=qe(e,t,n);return[await ke.j.nonMaxSuppressionAsync(r,o,c,d,l)]}case"Where":{const r=Ge.a(Object(c.d)("condition",e,t,n),"bool"),o=[await He.a(r)];return r.dispose(),o}case"ListDiff":return Ke.a(Object(c.d)("x",e,t,n),Object(c.d)("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r.Td((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=Object(c.d)("x",e,t,n),o=Object(c.d)("k",e,t,n),d=Object(c.d)("sorted",e,t,n),l=Xe.a(r,o,d);return[l.values,l.indices]}case"Unique":{const r=Object(c.d)("x",e,t,n),o=Ye.a(r);return[o.values,o.indices]}case"UniqueV2":{const r=Object(c.d)("x",e,t,n),o=Object(c.d)("axis",e,t,n),d=Ye.a(r,o);return[d.values,d.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r.Td((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=Object(c.d)("images",e,t,n),o=Object(c.d)("size",e,t,n),d=Object(c.d)("alignCorners",e,t,n),l=Object(c.d)("halfPixelCenters",e,t,n);return[ke.j.resizeBilinear(r,[o[0],o[1]],d,l)]}case"ResizeNearestNeighbor":{const r=Object(c.d)("images",e,t,n),o=Object(c.d)("size",e,t,n),d=Object(c.d)("alignCorners",e,t,n),l=Object(c.d)("halfPixelCenters",e,t,n);return[ke.j.resizeNearestNeighbor(r,[o[0],o[1]],d,l)]}case"CropAndResize":{const image=Object(c.d)("image",e,t,n),r=Object(c.d)("boxes",e,t,n),o=Object(c.d)("boxInd",e,t,n),d=Object(c.d)("cropSize",e,t,n),l=Object(c.d)("method",e,t,n),h=Object(c.d)("extrapolationValue",e,t,n);return[ke.j.cropAndResize(image,r,o,d,l,h)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=Object(c.d)("default",e,t,n);return[Object(c.e)(e.name,t,n)||r];case"Placeholder":return[Object(c.e)(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const data=Object(c.d)("x",e,t,n);return[Object(c.a)(data)]}case"IdentityN":return Object(c.d)("x",e,t,n).map((e=>Object(c.a)(e)));case"Snapshot":const o=Object(c.d)("x",e,t,n);return[Object(c.a)(o)];case"Shape":return[Ze.a(Object(c.d)("x",e,t,n).shape,"int32")];case"ShapeN":return Object(c.d)("x",e,t,n).map((e=>Ze.a(e.shape)));case"Size":return[Qe.a(Object(c.d)("x",e,t,n).size,"int32")];case"Rank":return[Qe.a(Object(c.d)("x",e,t,n).rank,"int32")];case"NoOp":return[Qe.a(1)];case"Print":const input=Object(c.d)("x",e,t,n),data=Object(c.d)("data",e,t,n),d=Object(c.d)("message",e,t,n),l=Object(c.d)("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(d);for(let i=0;i<data.length;i++)console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0,l));return[input];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Equal":return[et.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"NotEqual":return[tt.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Greater":return[nt.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"GreaterEqual":return[at.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Less":return[st.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"LessEqual":return[ot.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"LogicalAnd":return[it.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"LogicalNot":return[ct.a(Object(c.d)("a",e,t,n))];case"LogicalOr":return[ut.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];case"Select":case"SelectV2":return[lt.a(Object(c.d)("condition",e,t,n),Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r.Td((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[pt.a(Object(c.d)("a",e,t,n),Object(c.d)("b",e,t,n),Object(c.d)("transposeA",e,t,n),Object(c.d)("transposeB",e,t,n))];case"Einsum":return[ht.a(Object(c.d)("equation",e,t,n),...Object(c.d)("tensors",e,t,n))];case"Transpose":return[ft.a(Object(c.d)("x",e,t,n),Object(c.d)("perm",e,t,n))];case"_FusedMatMul":const[r,o]=Object(c.d)("fusedOps",e,t,n),d="biasadd"===r,l="prelu"===o,h=Object(c.d)("numArgs",e,t,n),f=Object(c.d)("leakyreluAlpha",e,t,n);if(d){if(l&&2!==h)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!l&&1!==h)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[m,y]=Object(c.d)("args",e,t,n);return[ke.i.matMul({a:Object(c.d)("a",e,t,n),b:Object(c.d)("b",e,t,n),transposeA:Object(c.d)("transposeA",e,t,n),transposeB:Object(c.d)("transposeB",e,t,n),bias:m,activation:o,preluActivationWeights:y,leakyreluAlpha:f})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r.Td((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[mt.a(Object(c.d)("x",e,t,n),Object(c.d)("mean",e,t,n),Object(c.d)("variance",e,t,n),Object(c.d)("offset",e,t,n),Object(c.d)("scale",e,t,n),Object(c.d)("epsilon",e,t,n))];case"LRN":return[bt.a(Object(c.d)("x",e,t,n),Object(c.d)("radius",e,t,n),Object(c.d)("bias",e,t,n),Object(c.d)("alpha",e,t,n),Object(c.d)("beta",e,t,n))];case"Softmax":return[gt.a(Object(c.d)("x",e,t,n))];case"LogSoftmax":return[yt.a(Object(c.d)("x",e,t,n))];case"SparseToDense":return[xt.a(Object(c.d)("sparseIndices",e,t,n),Object(c.d)("outputShape",e,t,n),Object(c.d)("sparseValues",e,t,n),Object(c.d)("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[vt.a(Object(c.d)("x",e,t,n),r,o)]}case"Mean":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[Ot.a(Object(c.d)("x",e,t,n),r,o)]}case"Min":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[wt.a(Object(c.d)("x",e,t,n),r,o)]}case"Sum":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[kt.a(Object(c.d)("x",e,t,n),r,o)]}case"All":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[It.a(Object(c.d)("x",e,t,n),r,o)]}case"Any":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[Nt.a(Object(c.d)("x",e,t,n),r,o)]}case"ArgMax":{const r=Object(c.d)("axis",e,t,n);return[St.a(Object(c.d)("x",e,t,n),r)]}case"ArgMin":{const r=Object(c.d)("axis",e,t,n);return[Tt.a(Object(c.d)("x",e,t,n),r)]}case"Prod":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("keepDims",e,t,n);return[de.a(Object(c.d)("x",e,t,n),r,o)]}case"Cumsum":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("exclusive",e,t,n),d=Object(c.d)("reverse",e,t,n);return[$t.a(Object(c.d)("x",e,t,n),r,o,d)]}case"Bincount":const r=Object(c.d)("x",e,t,n),o=Object(c.d)("weights",e,t,n),d=Object(c.d)("size",e,t,n);return[jt.a(r,o,d)];case"DenseBincount":{const r=Object(c.d)("x",e,t,n),o=Object(c.d)("weights",e,t,n),d=Object(c.d)("size",e,t,n),l=Object(c.d)("binaryOutput",e,t,n);return[Ct.a(r,o,d,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r.Td((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=Object(c.d)("n",e,t,n),o=Object(c.d)("axis",e,t,n);let d=Object(c.d)("tensors",e,t,n);return d=d.slice(0,r),[Et.a(d,o)]}case"Gather":{const input=Object(c.d)("x",e,t,n),r=Object(c.d)("indices",e,t,n);return[At.a(input,Ge.a(r,"int32"),0)]}case"GatherV2":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("batchDims",e,t,n),input=Object(c.d)("x",e,t,n),d=Object(c.d)("indices",e,t,n);return[At.a(input,Ge.a(d,"int32"),r,o)]}case"Reverse":{const r=Object(c.d)("dims",e,t,n),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const input=Object(c.d)("x",e,t,n);return[Rt.a(input,o)]}case"ReverseV2":{const r=Object(c.d)("axis",e,t,n),input=Object(c.d)("x",e,t,n);return[Rt.a(input,r)]}case"Slice":{const r=Object(c.d)("begin",e,t,n),o=Object(c.d)("size",e,t,n);return[Ft.a(Object(c.d)("x",e,t,n),r,o)]}case"StridedSlice":{const r=Object(c.d)("begin",e,t,n),o=Object(c.d)("end",e,t,n),d=Object(c.d)("strides",e,t,n),l=Object(c.d)("beginMask",e,t,n),h=Object(c.d)("endMask",e,t,n),f=Object(c.d)("ellipsisMask",e,t,n),m=Object(c.d)("newAxisMask",e,t,n),y=Object(c.d)("shrinkAxisMask",e,t,n),x=Object(c.d)("x",e,t,n);return[_t.a(x,r,o,d,l,h,f,m,y)]}case"Pack":return Object(r.Td)((()=>{const o=Object(c.d)("axis",e,t,n),d=Object(c.d)("tensors",e,t,n),l=d[0].shape,h=Dt.a(d[0]).shape,f=d.map((e=>{const t=r.Wd.arraysEqual(e.shape,l);if(!t&&!r.Wd.arraysEqual(Dt.a(e).shape,h))throw new Error("the input tensors shape does not match");return t?e:Mt.a(e,l)}));return[Pt.a(f,o)]}));case"Unpack":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("tensor",e,t,n);return Wt.a(o,r)}case"Tile":{const r=Object(c.d)("reps",e,t,n);return[Lt.a(Object(c.d)("x",e,t,n),r)]}case"Split":case"SplitV":{const r=Object(c.d)("axis",e,t,n),o=Object(c.d)("numOrSizeSplits",e,t,n),d=Object(c.d)("x",e,t,n);return Bt.a(d,o,r)}case"ScatterNd":{const r=Object(c.d)("indices",e,t,n),o=Object(c.d)("values",e,t,n),d=Object(c.d)("shape",e,t,n);return[zt.a(r,o,d)]}case"GatherNd":{const r=Object(c.d)("x",e,t,n),o=Object(c.d)("indices",e,t,n);return[Vt.a(r,o)]}case"SparseToDense":{const r=Object(c.d)("sparseIndices",e,t,n),o=Object(c.d)("outputShape",e,t,n),d=Object(c.d)("sparseValues",e,t,n),l=Object(c.d)("defaultValue",e,t,n);return[xt.a(r,d,o,d.dtype===l.dtype?l:Ge.a(l,d.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r.Td((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:d,reverseIndexMap:l}=ke.p.sparseFillEmptyRows(Object(c.d)("indices",e,t,n),Object(c.d)("values",e,t,n),Object(c.d)("denseShape",e,t,n),Object(c.d)("defaultValue",e,t,n));return[r,o,d,l]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=ke.p.sparseReshape(Object(c.d)("inputIndices",e,t,n),Object(c.d)("inputShape",e,t,n),Object(c.d)("newShape",e,t,n));return[r,o]}case"SparseSegmentMean":return[ke.p.sparseSegmentMean(Object(c.d)("data",e,t,n),Object(c.d)("indices",e,t,n),Object(c.d)("segmentIds",e,t,n))];case"SparseSegmentSum":return[ke.p.sparseSegmentSum(Object(c.d)("data",e,t,n),Object(c.d)("indices",e,t,n),Object(c.d)("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r.Td((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Ut.a(Object(c.d)("x",e,t,n))];case"IFFT":return[Gt.a(Object(c.d)("x",e,t,n))];case"RFFT":return[Ht.a(Object(c.d)("x",e,t,n))];case"IRFFT":return[Kt.a(Object(c.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r.Td((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=ke.s.stringNGrams(Object(c.d)("data",e,t,n),Object(c.d)("dataSplits",e,t,n),Object(c.d)("separator",e,t,n),Object(c.d)("nGramWidths",e,t,n),Object(c.d)("leftPad",e,t,n),Object(c.d)("rightPad",e,t,n),Object(c.d)("padWidth",e,t,n),Object(c.d)("preserveShortSequences",e,t,n));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:d}=ke.s.stringSplit(Object(c.d)("input",e,t,n),Object(c.d)("delimiter",e,t,n),Object(c.d)("skipEmpty",e,t,n));return[r,o,d]}case"StringToHashBucketFast":return[ke.s.stringToHashBucketFast(Object(c.d)("input",e,t,n),Object(c.d)("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r.Td((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Ge.a(Object(c.d)("x",e,t,n),Object(c.d)("dtype",e,t,n))];case"ExpandDims":{const r=Object(c.d)("axis",e,t,n);return[qt.a(Object(c.d)("x",e,t,n),r)]}case"Squeeze":{const r=Object(c.d)("axis",e,t,n);return[Dt.a(Object(c.d)("x",e,t,n),r)]}case"Reshape":return[Mt.a(Object(c.d)("x",e,t,n),Object(c.d)("shape",e,t,n))];case"MirrorPad":return[Xt.a(Object(c.d)("x",e,t,n),Object(c.d)("padding",e,t,n),Object(c.d)("mode",e,t,n))];case"PadV2":case"Pad":return[Yt.a(Object(c.d)("x",e,t,n),Object(c.d)("padding",e,t,n),Object(c.d)("constantValue",e,t,n))];case"SpaceToBatchND":{const r=Object(c.d)("blockShape",e,t,n),o=Object(c.d)("paddings",e,t,n);return[Zt.a(Object(c.d)("x",e,t,n),r,o)]}case"BatchToSpaceND":{const r=Object(c.d)("blockShape",e,t,n),o=Object(c.d)("crops",e,t,n);return[Qt.a(Object(c.d)("x",e,t,n),r,o)]}case"DepthToSpace":{const r=Object(c.d)("blockSize",e,t,n),o=Object(c.d)("dataFormat",e,t,n).toUpperCase();return[Jt.a(Object(c.d)("x",e,t,n),r,o)]}case"BroadcastTo":return[en.a(Object(c.d)("x",e,t,n),Object(c.d)("shape",e,t,n))];case"BroadcastArgs":return[tn.a(Object(c.d)("s0",e,t,n),Object(c.d)("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const o=Object(c.d)("keyDType",e,t,n),d=Object(c.d)("valueDType",e,t,n),l=new Je(o,d);return r.addHashTable(e.name,l),[l.handle]}case"LookupTableImport":case"LookupTableImportV2":{const o=Object(c.d)("tableHandle",e,t,n,r),d=Object(c.d)("keys",e,t,n),l=Object(c.d)("values",e,t,n),h=r.getHashTableById(o.id);return[await h.import(d,l)]}case"LookupTableFind":case"LookupTableFindV2":{const o=Object(c.d)("tableHandle",e,t,n,r),d=Object(c.d)("keys",e,t,n),l=Object(c.d)("defaultValue",e,t,n),h=r.getHashTableById(o.id);return[await h.find(d,l)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=Object(c.d)("tableHandle",e,t,n,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,o);case"custom":const fe=Object(l.a)(e.op);if(fe&&fe.customExecutor)return fe.customExecutor(new d(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return r.Wd.isPromise(fe)?fe.then((data=>[].concat(data))):[].concat(fe)}class rn{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let i=0;i<this.contexts.length-1;i++){const t=this.contexts.slice(0,this.contexts.length-i);e.push(this.contextIdforContexts(t))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function an(e,t,n,r){const o=new Set,d=[];let l=null,h=null;const f=new Set,m=Object.keys(e).map((e=>Object(c.g)(e)[0]));let y=[];null!=r&&(y=r.map((e=>Object(c.g)(e.name)[0])));const x=[...t];for(;x.length>0;){const e=x.pop();(un(e)||dn(e)||ln(e))&&null==l&&(l=e,h=l.children.map((e=>e.name)).filter((e=>o.has(e)))),o.add(e.name),null==n[e.name]&&(-1===m.indexOf(e.name)&&-1===y.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((input=>{f.has(input.name)||(f.add(input.name),x.push(input))})):d.push(e.name)))}return{inputs:e,outputs:t,usedNodes:o,missingInputs:d,dynamicNode:l,syncInputs:h}}const sn=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],on=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],cn=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function un(e){return sn.indexOf(e.op)>=0}function dn(e){return on.indexOf(e.op)>=0}function ln(e){return cn.indexOf(e.op)>=0}class pn{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new pn(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((map,e)=>(map[e]=this._functions[e].signature,map)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=an(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:d}=n;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${d}]`);if(r.length>0){const n=t.map((e=>e.name)),o=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${o}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:o}=n,d=[],l=Object.keys(o).map((e=>Object(c.g)(e)[0])).map((t=>e.nodes[t])),h=e.initNodes;l.forEach((input=>{r.has(input.name)&&d.push(input)})),e.weights.forEach((e=>{r.has(e.name)&&d.push(e)})),null!=h&&h.forEach((e=>{r.has(e.name)&&d.push(e)}));const f=new Set,m=[];for(;d.length>0;){const e=d.pop();f.add(e.name),t[e.name]||m.push(e),e.children.forEach((e=>{!f.has(e.name)&&r.has(e.name)&&e.inputs.every((input=>f.has(input.name)))&&d.push(e)}))}return m}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const o=n.map((e=>this.graph.nodes[Object(c.g)(e)[0]])),d=t.map((e=>Object(c.g)(e)[0]));let l=d.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const h=this.getCompilationKey(o,l);let f=this.compiledMap.get(h);null==f&&(f=this.compile(e,l),this.compiledMap.set(h,f));const m={},y={};return Object(r.Td)((()=>{const n=new rn(this.weightMap,m,y,this.functionExecutorMap),o=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Object(c.g)(t),d=[];d[r]=e[t],o[n]=d}));const l=this.getFrozenTensorIds(o),h={};for(let i=0;i<f.length;i++){const e=f[i];if(!o[e.name]){const t=nn(e,o,n,this._resourceManager);if(r.Wd.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);o[e.name]=t,this.checkTensorForDisposal(e.name,e,o,n,l,d,h)}}return null==this.parent&&n.dispose(l),t.map((e=>Object(c.e)(e,o,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,o,d,l){"control"!==t.category&&-1===d.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(l[e.id]=(l[e.id]||0)+t.children.length)})),t.inputs.forEach((input=>{if("control"!==input.category){const e=Object(c.f)(input.name,n,r);null!=e&&e.forEach((e=>{if(e&&!e.kept&&!o.has(e.id)){const t=l[e.id];1===t?(e.dispose(),delete l[e.id]):null!=t&&l[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},o={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const d=new rn(this.weightMap,r,o,this.functionExecutorMap),l=await this.executeWithControlFlow(e,d,t,n),h=t.map((e=>Object(c.e)(e,l,d))),f=h.map((e=>e.id)),m=Object.keys(e).map((t=>e[t].id)),y=new Set([...f,...m,...this.weightIds]);return Object.keys(l).forEach((e=>{l[e].forEach((e=>{!e||e.kept||e.isDisposed||y.has(e.id)||e.dispose()}))})),null==this.parent&&d.dispose(y),h}async executeFunctionAsync(e,t,n){const r=e.reduce(((map,e,t)=>(map[this.inputs[t].name]=e,map)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const o=Object.keys(e),d=o.map((e=>this.graph.nodes[Object(c.g)(e)[0]])),l=n.map((e=>Object(c.g)(e)[0]));let h=l.map((e=>this.graph.nodes[e]));0===h.length&&(h=this._outputs);const{usedNodes:f,missingInputs:m,dynamicNode:y,syncInputs:x}=an(e,h,this.weightMap,this._initNodes),v=[...d,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),O=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Object(c.g)(t),o=[];o[r]=e[t],O[n]=o}));const w={},k=this.getFrozenTensorIds(O),I={};for(;v.length>0;){const e=this.processStack(d,v,t,O,I,k,l,w,f);await Promise.all(e)}null!=y||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const N=h.filter((e=>!un(e)&&!Object(c.e)(e.name,O,t))).map((e=>e.name));if(N.length>0){let e="";throw null!=y&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${x}]`),new Error(`Cannot compute the outputs [${N}] from the provided inputs [${o}]. Consider providing the following inputs: [${m}]. ${e}`)}return O}processStack(e,t,n,o,d,l,h,f,m){const y=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let x="";if("Enter"===e.node.op&&Object(c.d)("isConstant",e.node,o,n)&&([x]=Object(c.b)(e.node.name,n)),null==o[e.node.name]){const v=nn(e.node,o,n,this._resourceManager);x||([x]=Object(c.b)(e.node.name,n));const O=n.currentContext;r.Wd.isPromise(v)?y.push(v.then((r=>(o[x]=r,n.currentContext=O,this.checkTensorForDisposal(x,e.node,o,n,l,h,f),this.processChildNodes(e.node,t,n,o,d,m),r)))):(o[x]=v,this.checkTensorForDisposal(x,e.node,o,n,l,h,f),this.processChildNodes(e.node,t,n,o,d,m))}else this.processChildNodes(e.node,t,n,o,d,m)}return y}processChildNodes(e,t,n,r,o,d){e.children.forEach((e=>{const[l]=Object(c.b)(e.name,n);!o[l]&&d.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Object(c.e)(e,r,n)))&&(o[l]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Object(c.e)(e,r,n)))&&(o[l]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const input=e[t],[n]=Object(c.g)(t),o=this.graph.nodes[n];if(o.attrParams.shape&&o.attrParams.shape.value){const e=o.attrParams.shape.value,t=e.length===input.shape.length&&input.shape.every(((t,n)=>-1===e[n]||e[n]===t));r.Wd.assert(t,(()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${e}], but was [${input.shape}]`))}o.attrParams.dtype&&o.attrParams.dtype.value&&r.Wd.assert(input.dtype===o.attrParams.dtype.value,(()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${input.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Object(c.g)(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=Object(c.g)(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class hn{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class fn{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new hn}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const path=this.modelUrl;if(null!=path.load)this.handler=path;else if(null!=this.loadOptions.requestInit)this.handler=r.Bd.browserHTTPRequest(path,this.loadOptions);else{const e=r.Bd.getLoadHandlers(path,this.loadOptions);if(0===e.length)e.push(r.Bd.browserHTTPRequest(path,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[path]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const c=r.Bd.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new pn(o.a.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(c),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=o.a.Instance.transformGraph(e.modelInitializer);this.initializer=new pn(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=r.Bd.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof r.bd||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((map,t,i)=>(map[t]=e[i],map)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(map){return Object.keys(map).reduce(((e,t)=>(e[t]=[map[t]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function mn(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new fn(e,t);return await n.load(),n}var bn=function(){return(bn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function gn(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function yn(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function xn(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function vn(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}var On=function(e){return{startEndTensor:e,startPoint:Object(r.Kd)(e,[0,0],[-1,2]),endPoint:Object(r.Kd)(e,[0,2],[-1,2])}},wn={strides:[8,16],anchors:[2,6]};function kn(e,t){var i,u,n;if(e.topLeft instanceof r.bd&&e.bottomRight instanceof r.bd){var o=Object(r.Td)((function(){return[Object(r.sd)([Object(r.Kd)(Object(r.Od)(t-1,e.topLeft),0,1),Object(r.Kd)(e.topLeft,1,1)]),Object(r.sd)([Object(r.Od)(t-1,Object(r.Kd)(e.bottomRight,0,1)),Object(r.Kd)(e.bottomRight,1,1)])]}));i=o[0],u=o[1],null!=e.landmarks&&(n=Object(r.Td)((function(){var n=Object(r.Od)(Object(r.Rd)([t-1,0]),e.landmarks),o=Object(r.Rd)([1,-1]);return Object(r.Ed)(n,o)})))}else{var c=e.topLeft,d=c[0],p=c[1],l=e.bottomRight,b=l[0],h=l[1];i=[t-1-d,p],u=[t-1-b,h],null!=e.landmarks&&(n=e.landmarks.map((function(e){return[t-1-e[0],e[1]]})))}var g={topLeft:i,bottomRight:u};return null!=n&&(g.landmarks=n),null!=e.probability&&(g.probability=e.probability instanceof r.bd?e.probability.clone():e.probability),g}function In(e,t){return Object(r.Td)((function(){var n;return n=e.hasOwnProperty("box")?e.box:e,Object(r.Md)(function(e,t){var n=Object(r.Ed)(e.startPoint,t),o=Object(r.Ed)(e.endPoint,t),c=Object(r.td)([n,o],1);return On(c)}(n,t).startEndTensor)}))}var Nn=function(){function e(e,t,n,i,s,a){this.blazeFaceModel=e,this.width=t,this.height=n,this.maxFaces=i,this.anchorsData=function(e,t,n){for(var r=[],o=0;o<n.strides.length;o++)for(var i=n.strides[o],s=Math.floor((t+i-1)/i),a=Math.floor((e+i-1)/i),u=n.anchors[o],c=0;c<s;c++)for(var d=i*(c+.5),l=0;l<a;l++)for(var h=i*(l+.5),f=0;f<u;f++)r.push([h,d]);return r}(t,n,wn),this.anchors=Object(r.Sd)(this.anchorsData),this.inputSizeData=[t,n],this.inputSize=Object(r.Rd)([t,n]),this.iouThreshold=s,this.scoreThreshold=a}return e.prototype.getBoundingBoxes=function(e,t,p){return void 0===p&&(p=!0),xn(this,void 0,void 0,(function(){var n,o,c,g,d,l,h,f,m,y,x,v,O,w,k=this;return vn(this,(function(I){switch(I.label){case 0:return n=Object(r.Td)((function(){var t=r.Ad.resizeBilinear(e,[k.width,k.height]),n=Object(r.Ed)(Object(r.Od)(Object(r.vd)(t,255),.5),2),o=k.blazeFaceModel.predict(n),c=Object(r.Md)(o),p=function(e,t,n){var i=Object(r.Kd)(e,[0,1],[-1,2]),u=Object(r.md)(i,t),o=Object(r.Kd)(e,[0,3],[-1,2]),c=Object(r.vd)(o,n),d=Object(r.vd)(u,n),p=Object(r.vd)(c,2),l=Object(r.Od)(d,p),h=Object(r.md)(d,p),b=Object(r.Ed)(l,n),f=Object(r.Ed)(h,n);return Object(r.td)([b,f],1)}(c,k.anchors,k.inputSize),d=Object(r.Kd)(c,[0,0],[-1,1]);return[c,p,Object(r.Md)(Object(r.Jd)(d))]})),o=n[0],c=n[1],g=n[2],d=console.warn,console.warn=function(){},l=r.Ad.nonMaxSuppression(c,g,this.maxFaces,this.iouThreshold,this.scoreThreshold),console.warn=d,[4,l.array()];case 1:return h=I.sent(),l.dispose(),f=h.map((function(e){return Object(r.Kd)(c,[e,0],[1,-1])})),t?[3,3]:[4,Promise.all(f.map((function(e){return xn(k,void 0,void 0,(function(){var t;return vn(this,(function(n){switch(n.label){case 0:return[4,e.array()];case 1:return t=n.sent(),e.dispose(),[2,t]}}))}))})))];case 2:f=I.sent(),I.label=3;case 3:for(m=e.shape[1],y=e.shape[2],x=t?Object(r.vd)([y,m],this.inputSize):[y/this.inputSizeData[0],m/this.inputSizeData[1]],v=[],O=function(e){var n=f[e],i=Object(r.Td)((function(){var c=On(n instanceof r.bd?n:Object(r.Sd)(n));if(!p)return c;var i,s=h[e];return i=t?Object(r.Kd)(k.anchors,[s,0],[1,2]):k.anchorsData[s],{box:c,landmarks:Object(r.Hd)(Object(r.Md)(Object(r.Kd)(o,[s,5],[1,-1])),[6,-1]),probability:Object(r.Kd)(g,[s],[1]),anchor:i}}));v.push(i)},w=0;w<f.length;w++)O(w);return c.dispose(),g.dispose(),o.dispose(),[2,{boxes:v,scaleFactor:x}]}}))}))},e.prototype.estimateFaces=function(e,t,n,i){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===i&&(i=!0),xn(this,void 0,void 0,(function(){var a,u,o,c,d,b,l=this;return vn(this,(function(g){switch(g.label){case 0:return a=function(e){return e instanceof r.bd?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),u=a[1],o=Object(r.Td)((function(){return e instanceof r.bd||(e=r.od.fromPixels(e)),Object(r.yd)(Object(r.qd)(e,"float32"),0)})),[4,this.getBoundingBoxes(o,t,i)];case 1:return c=g.sent(),d=c.boxes,b=c.scaleFactor,o.dispose(),t?[2,d.map((function(e){var t=In(e,b),o={topLeft:Object(r.Kd)(t,[0],[2]),bottomRight:Object(r.Kd)(t,[2],[2])};if(i){var a=e,c=a.landmarks,d=a.probability,l=a.anchor,h=Object(r.Ed)(Object(r.md)(c,l),b);o.landmarks=h,o.probability=d}return n&&(o=kn(o,u)),o}))]:[2,Promise.all(d.map((function(e){return xn(l,void 0,void 0,(function(){var t,r,o,s,a,c,d,l,h,f,p,m=this;return vn(this,(function(y){switch(y.label){case 0:return t=In(e,b),i?[3,2]:[4,t.array()];case 1:return a=y.sent(),r={topLeft:a.slice(0,2),bottomRight:a.slice(2)},[3,4];case 2:return[4,Promise.all([e.landmarks,t,e.probability].map((function(e){return xn(m,void 0,void 0,(function(){return vn(this,(function(t){return[2,e.array()]}))}))})))];case 3:o=y.sent(),s=o[0],a=o[1],c=o[2],d=e.anchor,h=(l=b)[0],f=l[1],p=s.map((function(e){return[(e[0]+d[0])*h,(e[1]+d[1])*f]})),r={topLeft:a.slice(0,2),bottomRight:a.slice(2),landmarks:p,probability:c},function(e){e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose()}(e.box),e.landmarks.dispose(),e.probability.dispose(),y.label=4;case 4:return t.dispose(),n&&(r=kn(r,u)),[2,r]}}))}))})))]}}))}))},e}();function Sn(e){var t=void 0===e?{}:e,n=t.maxFaces,r=void 0===n?10:n,o=t.inputWidth,i=void 0===o?128:o,s=t.inputHeight,a=void 0===s?128:s,u=t.iouThreshold,c=void 0===u?.3:u,d=t.scoreThreshold,l=void 0===d?.75:d,h=t.modelUrl;return xn(this,void 0,void 0,(function(){var e;return vn(this,(function(t){switch(t.label){case 0:return null==h?[3,2]:[4,mn(h)];case 1:return e=t.sent(),[3,4];case 2:return[4,mn("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1",{fromTFHub:!0})];case 3:e=t.sent(),t.label=4;case 4:return[2,new Nn(e,i,a,r,c,l)]}}))}))}var Tn={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function $n(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function jn(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function Cn(e,t){void 0===t&&(t=1.5);var n=jn(e),r=$n(e),o=[t*r[0]/2,t*r[1]/2];return{startPoint:[n[0]-o[0],n[1]-o[1]],endPoint:[n[0]+o[0],n[1]+o[1]],landmarks:e.landmarks}}function En(e){var t=jn(e),n=$n(e),r=Math.max.apply(Math,n)/2;return{startPoint:[t[0]-r,t[1]-r],endPoint:[t[0]+r,t[1]+r],landmarks:e.landmarks}}var An=[[1,0,0],[0,1,0],[0,0,1]];function Rn(e,t){return[[1,0,e],[0,1,t],[0,0,1]]}function Fn(e,t){for(var n=0,r=0;r<e.length;r++)n+=e[r]*t[r];return n}function _n(e,t){for(var n=[],r=0;r<e.length;r++)n.push(e[r][t]);return n}function Dn(e,t){for(var n=[],r=e.length,o=0;o<r;o++){n.push([]);for(var i=0;i<r;i++)n[o].push(Fn(e[o],_n(t,i)))}return n}function Mn(e,t){var n=Math.cos(e),r=Math.sin(e),o=[[n,-r,0],[r,n,0],[0,0,1]],i=Dn(Rn(t[0],t[1]),o);return Dn(i,Rn(-t[0],-t[1]))}var Pn=[13,Tn.midwayBetweenEyes[0]],Wn=[3,2],Ln=Tn.leftEyeLower0,q=[Ln[0],Ln[Ln.length-1]],Bn=Tn.rightEyeLower0,zn=[Bn[0],Bn[Bn.length-1]],Vn=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function Un(e,t,n,r){for(var o=0;o<Vn.length;o++){var i=Vn[o],s=i.key,a=i.indices,u=Tn[""+n+s];if(null==r||r.includes(s))for(var c=0;c<a.length;c++){var d=a[c];e[u[c]]=[t[d][0],t[d][1],(t[d][2]+e[u[c]][2])/2]}}}var Gn=function(){function e(e,t,n,r,o,i,s){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=e,this.meshDetector=t,this.irisModel=s,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=o,this.maxFaces=i}return e.prototype.transformRawCoords=function(e,t,n,r){var o,i,s,a,u=this,c=$n({startPoint:t.startPoint,endPoint:t.endPoint}),d=[c[0]/this.meshWidth,c[1]/this.meshHeight],l=e.map((function(e){return[d[0]*(e[0]-u.meshWidth/2),d[1]*(e[1]-u.meshHeight/2),e[2]]})),h=Mn(n,[0,0]),f=l.map((function(e){return function(e,t){return[Fn(e,t[0]),Fn(e,t[1])]}(e,h).concat([e[2]])})),p=(i=[[(o=r)[0][0],o[1][0]],[o[0][1],o[1][1]]],s=[o[0][2],o[1][2]],a=[-Fn(i[0],s),-Fn(i[1],s)],[i[0].concat(a[0]),i[1].concat(a[1]),[0,0,1]]),m=jn({startPoint:t.startPoint,endPoint:t.endPoint}).concat([1]),y=[Fn(m,p[0]),Fn(m,p[1])];return f.map((function(e){return[e[0]+y[0],e[1]+y[1],e[2]]}))},e.prototype.getLeftToRightEyeDepthDifference=function(e){return e[q[0]][2]-e[zn[0]][2]},e.prototype.getEyeBox=function(e,t,n,o,c){void 0===c&&(c=!1);var s=En(Cn(this.calculateLandmarksBoundingBox([e[n],e[o]]),2.3)),a=$n(s),u=r.Ad.cropAndResize(t,[[s.startPoint[1]/this.meshHeight,s.startPoint[0]/this.meshWidth,s.endPoint[1]/this.meshHeight,s.endPoint[0]/this.meshWidth]],[0],[64,64]);return c&&(u=r.Ad.flipLeftRight(u)),{box:s,boxSize:a,crop:u}},e.prototype.getEyeCoords=function(e,t,n,r){void 0===r&&(r=!1);for(var o=[],i=0;i<76;i++){var s=e[3*i],a=e[3*i+1],u=e[3*i+2];o.push([(r?1-s/64:s/64)*n[0]+t.startPoint[0],a/64*n[1]+t.startPoint[1],u])}return{rawCoords:o,iris:o.slice(71)}},e.prototype.getAdjustedIrisCoords=function(e,t,n){var r=e[Tn[n+"EyeUpper0"][3]][2],o=e[Tn[n+"EyeLower0"][4]][2],i=(r+o)/2;return t.map((function(e,t){var n=i;return 2===t?n=r:4===t&&(n=o),[e[0],e[1],n]}))},e.prototype.predict=function(e,t){return gn(this,void 0,void 0,(function(){var s,a,n,o,c=this;return yn(this,(function(d){switch(d.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(e,!1,!0)]:[3,2];case 1:return s=d.sent(),a=s.boxes,n=s.scaleFactor,0===a.length?(this.regionsOfInterest=[],[2,null]):(o=a.map((function(e){var t,o,c={startPoint:Object(r.Md)(e.box.startPoint).arraySync(),endPoint:Object(r.Md)(e.box.endPoint).arraySync()},d=En(Cn((o=n,{startPoint:[(t=c).startPoint[0]*o[0],t.startPoint[1]*o[1]],endPoint:[t.endPoint[0]*o[0],t.endPoint[1]*o[1]]})));return bn({},d,{landmarks:e.landmarks.arraySync()})})),a.forEach((function(e){null!=e&&null!=e.startPoint&&(e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose())})),this.updateRegionsOfInterest(o),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,d.label=3;case 3:return[2,Object(r.Td)((function(){return c.regionsOfInterest.map((function(n,s){var a,o=n.landmarks.length>=468,d=Pn[0],l=Pn[1];!1===o&&(d=Wn[0],l=Wn[1]),a=function(e,t){var n;return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(n.landmarks[d],n.landmarks[l]);var h=jn({startPoint:n.startPoint,endPoint:n.endPoint}),p=[h[0]/e.shape[2],h[1]/e.shape[1]],f=e,m=An;0!==a&&(f=r.Ad.rotateWithOffset(e,a,0,p),m=Mn(-a,h));var g={startPoint:n.startPoint,endPoint:n.endPoint},y=Object(r.vd)(function(e,t,n){var o=t.shape[1],c=t.shape[2],s=[[e.startPoint[1]/o,e.startPoint[0]/c,e.endPoint[1]/o,e.endPoint[0]/c]];return r.Ad.cropAndResize(t,s,[0],n,"bilinear",0)}(g,f,[c.meshHeight,c.meshWidth]),255),x=c.meshDetector.predict(y),v=x[1],O=x[2],w=Object(r.Hd)(O,[-1,3]).arraySync();if(t){var k=c.getEyeBox(w,y,q[0],q[1],!0),I=k.box,N=k.boxSize,S=k.crop,T=c.getEyeBox(w,y,zn[0],zn[1]),$=T.box,j=T.boxSize,C=T.crop,E=c.irisModel.predict(Object(r.sd)([S,C])).dataSync(),A=E.slice(0,228),R=c.getEyeCoords(A,I,N,!0),F=R.rawCoords,_=R.iris,D=E.slice(228),M=c.getEyeCoords(D,$,j),P=M.rawCoords,W=M.iris,L=c.getLeftToRightEyeDepthDifference(w);Math.abs(L)<30?(Un(w,F,"left"),Un(w,P,"right")):L<1?Un(w,F,"left",["EyeUpper0","EyeLower0"]):Un(w,P,"right",["EyeUpper0","EyeLower0"]);var B=c.getAdjustedIrisCoords(w,_,"left"),z=c.getAdjustedIrisCoords(w,W,"right");w=w.concat(B).concat(z)}var rt=c.transformRawCoords(w,n,a,m),V=Object(r.Sd)(rt),U=Cn(c.calculateLandmarksBoundingBox(rt)),G=En(U);return c.regionsOfInterest[s]=bn({},G,{landmarks:V.arraySync()}),{coords:Object(r.Sd)(w,[w.length,3]),scaledCoords:V,box:U,flag:Object(r.Md)(v)}}))}))]}}))}))},e.prototype.updateRegionsOfInterest=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=this.regionsOfInterest[t],o=0;if(r&&r.startPoint){var i=n.startPoint,s=i[0],a=i[1],u=n.endPoint,c=u[0],d=u[1],l=r.startPoint,h=l[0],f=l[1],p=r.endPoint,m=p[0],y=p[1],b=Math.max(s,h),x=Math.max(a,f),g=(Math.min(c,m)-b)*(Math.min(d,y)-x);o=g/((c-s)*(d-a)+(m-h)*(y-a)-g)}o<.25&&(this.regionsOfInterest[t]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,e.length)},e.prototype.clearRegionOfInterest=function(e){null!=this.regionsOfInterest[e]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,e).concat(this.regionsOfInterest.slice(e+1)))},e.prototype.shouldUpdateRegionsOfInterest=function(){var e=this.regionsOfInterest.length,t=0===e;return 1===this.maxFaces||t?t:e!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},e.prototype.calculateLandmarksBoundingBox=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{startPoint:[Math.min.apply(Math,t),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,t),Math.max.apply(Math,n)]}},e}(),Hn=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function Kn(e){return gn(this,void 0,void 0,(function(){var t,n,r,o,i,s,a,u,c,d,l,h,f,p,m,y;return yn(this,(function(b){switch(b.label){case 0:return t=e.maxContinuousChecks,n=void 0===t?5:t,r=e.detectionConfidence,o=void 0===r?.9:r,i=e.maxFaces,s=void 0===i?10:i,a=e.iouThreshold,u=void 0===a?.3:a,c=e.scoreThreshold,d=void 0===c?.75:c,l=e.shouldLoadIrisModel,h=void 0===l||l,f=e.modelUrl,p=e.detectorModelUrl,m=e.irisModelUrl,h?[4,Promise.all([qn(p,s,u,d),Xn(f),Yn(m)])]:[3,2];case 1:return y=b.sent(),[3,4];case 2:return[4,Promise.all([qn(p,s,u,d),Xn(f)])];case 3:y=b.sent(),b.label=4;case 4:return[2,new Jn(y[0],y[1],n,o,s,h?y[2]:null)]}}))}))}function qn(e,t,n,r){return gn(this,void 0,void 0,(function(){return yn(this,(function(o){return[2,Sn({modelUrl:e,maxFaces:t,iouThreshold:n,scoreThreshold:r})]}))}))}function Xn(e){return gn(this,void 0,void 0,(function(){return yn(this,(function(t){return null!=e?[2,mn(e)]:[2,mn("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function Yn(e){return gn(this,void 0,void 0,(function(){return yn(this,(function(t){return null!=e?[2,mn(e)]:[2,mn("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2",{fromTFHub:!0})]}))}))}function Zn(e,t){if(e.mesh instanceof r.bd){var i=Object(r.Td)((function(){var i=Object(r.Rd)([t-1,0,0]),u=Object(r.Rd)([1,-1,1]);return Object(r.Td)((function(){return[Object(r.sd)([Object(r.Od)(t-1,Object(r.Kd)(e.boundingBox.topLeft,0,1)),Object(r.Kd)(e.boundingBox.topLeft,1,1)]),Object(r.sd)([Object(r.Od)(t-1,Object(r.Kd)(e.boundingBox.bottomRight,0,1)),Object(r.Kd)(e.boundingBox.bottomRight,1,1)]),Object(r.Ed)(Object(r.Od)(i,e.mesh),u),Object(r.Ed)(Object(r.Od)(i,e.scaledMesh),u)]}))})),u=i[0],n=i[1],o=i[2],c=i[3];return Object.assign({},e,{boundingBox:{topLeft:u,bottomRight:n},mesh:o,scaledMesh:c})}return Object.assign({},e,{boundingBox:{topLeft:[t-1-e.boundingBox.topLeft[0],e.boundingBox.topLeft[1]],bottomRight:[t-1-e.boundingBox.bottomRight[0],e.boundingBox.bottomRight[1]]},mesh:e.mesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n})),scaledMesh:e.scaledMesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n}))})}var Qn,Jn=function(){function e(e,t,n,r,o,i){this.kind="MediaPipeFaceMesh",this.pipeline=new Gn(e,t,192,192,n,o,i),this.detectionConfidence=r}return e.getAnnotations=function(){return Tn},e.getUVCoords=function(){return Hn},e.prototype.estimateFaces=function(e){return gn(this,void 0,void 0,(function(){var t,n,i,s,a,u,o,c,d,l,b,h,f=this;return yn(this,(function(m){switch(m.label){case 0:if(t=e.returnTensors,n=void 0!==t&&t,i=e.flipHorizontal,s=void 0!==i&&i,a=e.predictIrises,u=void 0===a||a,o=e.input,u&&null==this.pipeline.irisModel)throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");return c=function(e){return e instanceof r.bd?[e.shape[0],e.shape[1]]:[e.height,e.width]}(o),d=c[1],l=Object(r.Td)((function(){return o instanceof r.bd||(o=r.od.fromPixels(o)),Object(r.yd)(Object(r.qd)(o,"float32"),0)})),"webgl"!==Object(r.zd)()?[3,2]:(h=Object(r.xd)().get("WEBGL_PACK_DEPTHWISECONV"),Object(r.xd)().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(l,u)]);case 1:return b=m.sent(),Object(r.xd)().set("WEBGL_PACK_DEPTHWISECONV",h),[3,4];case 2:return[4,this.pipeline.predict(l,u)];case 3:b=m.sent(),m.label=4;case 4:return l.dispose(),null!=b&&b.length>0?[2,Promise.all(b.map((function(e,t){return gn(f,void 0,void 0,(function(){var o,i,a,c,l,h,f,p,m,y,b,x,g,v,O=this;return yn(this,(function(w){switch(w.label){case 0:return o=e.coords,i=e.scaledCoords,a=e.box,c=e.flag,l=[c],n||(l=l.concat([o,i])),[4,Promise.all(l.map((function(e){return gn(O,void 0,void 0,(function(){return yn(this,(function(t){return[2,e.array()]}))}))})))];case 1:if(h=w.sent(),f=h[0],c.dispose(),f<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(t),n)return p={kind:"MediaPipePredictionTensors",faceInViewConfidence:f,mesh:o,scaledMesh:i,boundingBox:{topLeft:Object(r.Rd)(a.startPoint),bottomRight:Object(r.Rd)(a.endPoint)}},s?[2,Zn(p,d)]:[2,p];for(v in m=h.slice(1),y=m[0],b=m[1],i.dispose(),o.dispose(),x={kind:"MediaPipePredictionValues",faceInViewConfidence:f,boundingBox:{topLeft:a.startPoint,bottomRight:a.endPoint},mesh:y,scaledMesh:b},s&&(x=Zn(x,d)),g={},Tn)(u||!1===v.includes("Iris"))&&(g[v]=Tn[v].map((function(e){return x.scaledMesh[e]})));return x.annotations=g,[2,x]}}))}))})))]:[2,[]]}}))}))},e}();function er(e,t){return void 0===e&&(e=Qn.mediapipeFacemesh),void 0===t&&(t={}),gn(this,void 0,void 0,(function(){return yn(this,(function(n){if(e===Qn.mediapipeFacemesh)return[2,Kn(t)];throw new Error(e+" is not a valid package name.")}))}))}(Qn||(Qn={})).mediapipeFacemesh="mediapipe-facemesh"}])]);