(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{280:function(e,n,t){"use strict";t.r(n);t(28),t(39),t(26),t(75),t(76),t(50),t(27);var r=t(32),o=(t(29),t(7)),c=t(205);function l(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}function v(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?l(Object(source),!0).forEach((function(n){Object(r.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):l(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}var f={animate:!0,context:"webgl",duration:5,fps:36,playbackRate:"throttle",attributes:{antialias:!0}},d={name:"page-1",data:function(){return{sketchManager:null}},mounted:function(){var e=this;this.$nextTick(Object(o.a)(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,e.$sketch(v({},f,{canvas:e.$refs.canvas}),e.sketch);case 3:e.sketchManager=n.sent,n.next=9;break;case 6:n.prev=6,n.t0=n.catch(0),console.error(n.t0);case 9:case"end":return n.stop()}}),n,null,[[0,6]])}))))},beforeDestroy:function(){this.sketchManager&&this.sketchManager.unload()},methods:{sketch:function(e){var n=e.context,t=new c.A({context:n});t.setClearColor("#000",1);var r=new c.l(45,1,.01,100);r.position.set(0,0,-4.5),r.lookAt(new c.x);var o=new c.q,l=new c.k(new c.s(1,64,64),new c.r({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},fragmentShader:"#define GLSLIFY 1\nvarying vec2 vUv;\nuniform float playhead;\n\nvec3 hsl2rgb( vec3 c ) {\n\n    vec3 rgb = clamp( abs( mod( c.x * 6.0 + vec3( 0.0, 4.0, 2.0 ), 6.0 ) - 3.0 ) - 1.0, 0.0, 1.0 );\n\n    return c.z + c.y * ( rgb - 0.5 ) * ( 1.0 - abs( 2.0 * c.z - 1.0 ) );\n\n}\n\nvoid main () {\n\n    // number of horizontal bands\n    float bands = 1000.;\n\n    // offset texture by loop time\n    float offset = playhead;\n\n    // get a 0..1 value from this\n    float y = mod( offset + vUv.y, 1.0 );\n\n    // get N discrete steps of hue\n    float hue = floor( y * bands ) / vUv.y;\n\n    // now get a color\n    float sat = .72;\n    float light = .56;\n\n    vec3 color = hsl2rgb(\n        vec3(\n            hue,\n            sat,\n            light\n        )\n    );\n\n    gl_FragColor = vec4( color, 1.0 );\n\n}\n",vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main () {\n\n    vUv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position.xyz, 1.0 );\n\n}\n",uniforms:{playhead:{value:0}}}));return o.add(l),{resize:function(e){var n=e.pixelRatio,o=e.viewportWidth,c=e.viewportHeight;t.setPixelRatio(n),t.setSize(o,c),r.aspect=o/c,r.updateProjectionMatrix()},render:function(e){var n=e.playhead;l.material.uniforms.playhead.value=n,t.render(o,r)},unload:function(){t.dispose()}}}}},h=t(31),component=Object(h.a)(d,(function(){var e=this.$createElement,n=this._self._c||e;return n("main",{staticClass:"container canvas-container"},[n("canvas",{ref:"canvas"})])}),[],!1,null,null,null);n.default=component.exports}}]);