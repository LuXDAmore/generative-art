/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[31],Array(176).concat([function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return c})),n.d(e,"d",(function(){return l})),n.d(e,"e",(function(){return d})),n.d(e,"f",(function(){return h})),n.d(e,"g",(function(){return f})),n.d(e,"h",(function(){return m})),n.d(e,"i",(function(){return y})),n.d(e,"j",(function(){return O})),n.d(e,"k",(function(){return x})),n.d(e,"l",(function(){return v})),n.d(e,"n",(function(){return j})),n.d(e,"m",(function(){return w})),n.d(e,"o",(function(){return I})),n.d(e,"r",(function(){return k})),n.d(e,"p",(function(){return N})),n.d(e,"q",(function(){return T})),n.d(e,"s",(function(){return C})),n.d(e,"t",(function(){return $})),n.d(e,"u",(function(){return S})),n.d(e,"v",(function(){return E})),n.d(e,"w",(function(){return R})),n.d(e,"x",(function(){return A})),n.d(e,"y",(function(){return F})),n.d(e,"z",(function(){return D})),n.d(e,"A",(function(){return _})),n.d(e,"B",(function(){return M})),n.d(e,"C",(function(){return P})),n.d(e,"D",(function(){return B})),n.d(e,"E",(function(){return L})),n.d(e,"F",(function(){return z})),n.d(e,"G",(function(){return V})),n.d(e,"H",(function(){return W})),n.d(e,"J",(function(){return H})),n.d(e,"I",(function(){return U})),n.d(e,"K",(function(){return G})),n.d(e,"L",(function(){return K})),n.d(e,"M",(function(){return X})),n.d(e,"N",(function(){return Y})),n.d(e,"O",(function(){return Q})),n.d(e,"Q",(function(){return J})),n.d(e,"P",(function(){return Z})),n.d(e,"R",(function(){return tt})),n.d(e,"S",(function(){return et})),n.d(e,"T",(function(){return nt})),n.d(e,"V",(function(){return at})),n.d(e,"U",(function(){return ot})),n.d(e,"W",(function(){return st})),n.d(e,"X",(function(){return it})),n.d(e,"Y",(function(){return ct})),n.d(e,"Z",(function(){return ut})),n.d(e,"ab",(function(){return lt})),n.d(e,"bb",(function(){return pt})),n.d(e,"cb",(function(){return ht})),n.d(e,"eb",(function(){return ft})),n.d(e,"ib",(function(){return mt})),n.d(e,"hb",(function(){return bt})),n.d(e,"jb",(function(){return gt})),n.d(e,"kb",(function(){return yt})),n.d(e,"mb",(function(){return Ot})),n.d(e,"lb",(function(){return xt})),n.d(e,"nb",(function(){return vt})),n.d(e,"ob",(function(){return jt})),n.d(e,"pb",(function(){return wt})),n.d(e,"qb",(function(){return It})),n.d(e,"tb",(function(){return kt})),n.d(e,"ub",(function(){return Nt})),n.d(e,"vb",(function(){return Tt})),n.d(e,"wb",(function(){return Ct})),n.d(e,"xb",(function(){return $t})),n.d(e,"zb",(function(){return St})),n.d(e,"Ab",(function(){return Et})),n.d(e,"Bb",(function(){return Rt})),n.d(e,"yb",(function(){return At})),n.d(e,"rb",(function(){return Ft})),n.d(e,"sb",(function(){return Dt})),n.d(e,"Cb",(function(){return _t})),n.d(e,"Ib",(function(){return Mt})),n.d(e,"Db",(function(){return Pt})),n.d(e,"Gb",(function(){return Bt})),n.d(e,"Eb",(function(){return Lt})),n.d(e,"Fb",(function(){return zt})),n.d(e,"Hb",(function(){return Vt})),n.d(e,"Jb",(function(){return Wt})),n.d(e,"Kb",(function(){return Ht})),n.d(e,"Lb",(function(){return Ut})),n.d(e,"Mb",(function(){return Gt})),n.d(e,"Nb",(function(){return qt})),n.d(e,"Ob",(function(){return Kt})),n.d(e,"Pb",(function(){return Xt})),n.d(e,"Tb",(function(){return Yt})),n.d(e,"Qb",(function(){return Qt})),n.d(e,"Rb",(function(){return Jt})),n.d(e,"Sb",(function(){return Zt})),n.d(e,"Vb",(function(){return te})),n.d(e,"Ub",(function(){return ee})),n.d(e,"Wb",(function(){return ne})),n.d(e,"Xb",(function(){return re})),n.d(e,"Yb",(function(){return ae})),n.d(e,"Zb",(function(){return oe})),n.d(e,"ac",(function(){return se})),n.d(e,"bc",(function(){return ie})),n.d(e,"cc",(function(){return ce})),n.d(e,"dc",(function(){return ue})),n.d(e,"fc",(function(){return le})),n.d(e,"ic",(function(){return de})),n.d(e,"jc",(function(){return pe})),n.d(e,"gc",(function(){return he})),n.d(e,"hc",(function(){return fe})),n.d(e,"ec",(function(){return me})),n.d(e,"kc",(function(){return be})),n.d(e,"mc",(function(){return ge})),n.d(e,"nc",(function(){return ye})),n.d(e,"oc",(function(){return Oe})),n.d(e,"pc",(function(){return xe})),n.d(e,"qc",(function(){return ve})),n.d(e,"vc",(function(){return je})),n.d(e,"tc",(function(){return we})),n.d(e,"uc",(function(){return Ie})),n.d(e,"sc",(function(){return ke})),n.d(e,"rc",(function(){return Ne})),n.d(e,"xc",(function(){return Te})),n.d(e,"Bc",(function(){return Ce})),n.d(e,"Hc",(function(){return $e})),n.d(e,"yc",(function(){return Se})),n.d(e,"Ac",(function(){return Ee})),n.d(e,"wc",(function(){return Re})),n.d(e,"Dc",(function(){return Ae})),n.d(e,"Cc",(function(){return Fe})),n.d(e,"Gc",(function(){return De})),n.d(e,"zc",(function(){return _e})),n.d(e,"Fc",(function(){return Me})),n.d(e,"Ic",(function(){return Pe})),n.d(e,"Jc",(function(){return Be})),n.d(e,"Kc",(function(){return Le})),n.d(e,"Lc",(function(){return ze})),n.d(e,"Mc",(function(){return Ve})),n.d(e,"Nc",(function(){return We})),n.d(e,"Oc",(function(){return He})),n.d(e,"Pc",(function(){return Ue})),n.d(e,"Qc",(function(){return Ge})),n.d(e,"Ec",(function(){return qe})),n.d(e,"db",(function(){return Ke})),n.d(e,"lc",(function(){return Xe})),n.d(e,"Rc",(function(){return Ye})),n.d(e,"fb",(function(){return Qe})),n.d(e,"gb",(function(){return Je}));const r="Abs",o="Acos",c="Acosh",l="Add",d="AddN",h="All",f="Any",m="ArgMax",y="ArgMin",O="Asin",x="Asinh",v="Atan",j="Atanh",w="Atan2",I="AvgPool",k="AvgPoolBackprop",N="AvgPool3D",T="AvgPool3DBackprop",C="BatchMatMul",$="BatchToSpaceND",S="BroadcastTo",E="Cast",R="Ceil",A="ClipByValue",F="Complex",D="Concat",_="Conv2D",M="Conv2DBackpropFilter",P="Conv2DBackpropInput",B="Conv3D",L="Conv3DBackpropFilterV2",z="Conv3DBackpropInputV2",V="Cos",W="Cosh",H="Cumsum",U="CropAndResize",G="DepthToSpace",K="DepthwiseConv2dNative",X="DepthwiseConv2dNativeBackpropFilter",Y="DepthwiseConv2dNativeBackpropInput",Q="Dilation2D",J="Dilation2DBackpropInput",Z="Dilation2DBackpropFilter",tt="Div",et="Elu",nt="EluGrad",at="Erf",ot="Equal",st="Exp",it="Expm1",ct="FFT",ut="Fill",lt="FlipLeftRight",pt="Floor",ht="FloorDiv",ft="FusedBatchNorm",mt="GatherV2",bt="GatherNd",gt="Greater",yt="GreaterEqual",Ot="Identity",xt="IFFT",vt="Imag",jt="IsFinite",wt="IsInf",It="IsNan",kt="Less",Nt="LessEqual",Tt="LinSpace",Ct="Log",$t="Log1p",St="LogicalAnd",Et="LogicalNot",Rt="LogicalOr",At="LogSoftmax",Ft="LRN",Dt="LRNBackprop",_t="Max",Mt="Maximum",Pt="MaxPool",Bt="MaxPoolBackprop",Lt="MaxPool3D",zt="MaxPool3DBackprop",Vt="MaxPoolWithArgmax",Wt="Mean",Ht="Min",Ut="Minimum",Gt="MirrorPad",qt="Mod",Kt="Multiply",Xt="Negate",Yt="NotEqual",Qt="NonMaxSuppressionV3",Jt="NonMaxSuppressionV4",Zt="NonMaxSuppressionV5",te="OnesLike",ee="OneHot",ne="PadV2",re="Pow",ae="Prelu",oe="Prod",se="Range",ie="Real",ce="Reciprocal",ue="Relu",le="Reshape",de="ResizeNearestNeighbor",pe="ResizeNearestNeighborGrad",he="ResizeBilinear",fe="ResizeBilinearGrad",me="Relu6",be="Reverse",ge="Round",ye="Rsqrt",Oe="ScatterNd",xe="SelectV2",ve="Selu",je="Slice",we="Sin",Ie="Sinh",ke="Sign",Ne="Sigmoid",Te="Softplus",Ce="Sqrt",$e="Sum",Se="SpaceToBatchND",Ee="SplitV",Re="Softmax",Ae="SquaredDifference",Fe="Square",De="Sub",_e="SparseToDense",Me="StridedSlice",Pe="Tan",Be="Tanh",Le="Tile",ze="TopK",Ve="Transpose",We="Unique",He="Unpack",Ue="UnsortedSegmentSum",Ge="ZerosLike",qe="Step",Ke="FromPixels",Xe="RotateWithOffset",Ye="_FusedMatMul",Qe="FusedConv2D",Je="FusedDepthwiseConv2D"},function(t,e,n){"use strict";n.d(e,"Nb",(function(){return J.a})),n.d(e,"Ob",(function(){return J.b})),n.d(e,"yc",(function(){return St.a})),n.d(e,"Gc",(function(){return St.b})),n.d(e,"Sb",(function(){return Et.a})),n.d(e,"Vb",(function(){return Et.b})),n.d(e,"Wb",(function(){return Et.c})),n.d(e,"Xb",(function(){return Et.d})),n.d(e,"Yb",(function(){return Et.e})),n.d(e,"ac",(function(){return Et.f})),n.d(e,"dc",(function(){return Et.g})),n.d(e,"ec",(function(){return Et.h})),n.d(e,"fc",(function(){return Et.i})),n.d(e,"lc",(function(){return Et.l})),n.d(e,"mc",(function(){return Et.m})),n.d(e,"nc",(function(){return Et.n})),n.d(e,"qc",(function(){return Et.o})),n.d(e,"rc",(function(){return Et.p})),n.d(e,"sc",(function(){return Et.q})),n.d(e,"tc",(function(){return Et.r})),n.d(e,"vc",(function(){return Et.s})),n.d(e,"wc",(function(){return Et.t})),n.d(e,"xc",(function(){return Et.u})),n.d(e,"zc",(function(){return Et.v})),n.d(e,"Ac",(function(){return Et.w})),n.d(e,"Bc",(function(){return Et.x})),n.d(e,"Cc",(function(){return Et.y})),n.d(e,"Fc",(function(){return Et.A})),n.d(e,"Ic",(function(){return Et.B})),n.d(e,"Ec",(function(){return Et.z})),n.d(e,"hc",(function(){return Et.k})),n.d(e,"bc",(function(){return Rt.c})),n.d(e,"Dc",(function(){return Rt.g})),n.d(e,"jc",(function(){return Rt.e})),n.d(e,"gc",(function(){return Rt.d})),n.d(e,"oc",(function(){return Rt.f})),n.d(e,"pc",(function(){return vt.e})),n.d(e,"cc",(function(){return h.b})),n.d(e,"Ub",(function(){return o})),n.d(e,"ic",(function(){return r})),n.d(e,"Hc",(function(){return $t})),n.d(e,"Tb",(function(){return c})),n.d(e,"uc",(function(){return Ct})),n.d(e,"Zb",(function(){return Oe})),n.d(e,"kc",(function(){return l})),n.d(e,"Z",(function(){return Te.b})),n.d(e,"z",(function(){return Te.a})),n.d(e,"a",(function(){return xt.a})),n.d(e,"b",(function(){return xt.b})),n.d(e,"c",(function(){return xt.c})),n.d(e,"d",(function(){return xt.d})),n.d(e,"e",(function(){return xt.j})),n.d(e,"f",(function(){return xt.k})),n.d(e,"g",(function(){return xt.l})),n.d(e,"i",(function(){return xt.n})),n.d(e,"h",(function(){return xt.m})),n.d(e,"j",(function(){return xt.o})),n.d(e,"k",(function(){return xt.r})),n.d(e,"l",(function(){return xt.s})),n.d(e,"m",(function(){return xt.v})),n.d(e,"n",(function(){return xt.w})),n.d(e,"o",(function(){return xt.x})),n.d(e,"p",(function(){return xt.y})),n.d(e,"q",(function(){return xt.z})),n.d(e,"r",(function(){return xt.A})),n.d(e,"s",(function(){return xt.B})),n.d(e,"t",(function(){return xt.C})),n.d(e,"u",(function(){return xt.D})),n.d(e,"v",(function(){return xt.E})),n.d(e,"w",(function(){return xt.F})),n.d(e,"x",(function(){return xt.G})),n.d(e,"y",(function(){return xt.H})),n.d(e,"A",(function(){return xt.L})),n.d(e,"B",(function(){return xt.M})),n.d(e,"C",(function(){return xt.N})),n.d(e,"D",(function(){return xt.O})),n.d(e,"F",(function(){return xt.Q})),n.d(e,"E",(function(){return xt.P})),n.d(e,"G",(function(){return xt.R})),n.d(e,"H",(function(){return xt.S})),n.d(e,"I",(function(){return xt.V})),n.d(e,"J",(function(){return xt.W})),n.d(e,"K",(function(){return xt.X})),n.d(e,"L",(function(){return xt.Y})),n.d(e,"M",(function(){return xt.Z})),n.d(e,"N",(function(){return xt.ab})),n.d(e,"O",(function(){return xt.bb})),n.d(e,"Q",(function(){return xt.eb})),n.d(e,"U",(function(){return xt.mb})),n.d(e,"T",(function(){return xt.lb})),n.d(e,"V",(function(){return xt.nb})),n.d(e,"W",(function(){return xt.ob})),n.d(e,"X",(function(){return xt.pb})),n.d(e,"Y",(function(){return xt.qb})),n.d(e,"ab",(function(){return xt.wb})),n.d(e,"bb",(function(){return xt.xb})),n.d(e,"cb",(function(){return xt.Ab})),n.d(e,"db",(function(){return xt.Cb})),n.d(e,"eb",(function(){return xt.Db})),n.d(e,"fb",(function(){return xt.Gb})),n.d(e,"gb",(function(){return xt.Hb})),n.d(e,"hb",(function(){return xt.Jb})),n.d(e,"ib",(function(){return xt.Mb})),n.d(e,"jb",(function(){return xt.Ob})),n.d(e,"nb",(function(){return xt.Tb})),n.d(e,"kb",(function(){return xt.Qb})),n.d(e,"lb",(function(){return xt.Rb})),n.d(e,"mb",(function(){return xt.Sb})),n.d(e,"ob",(function(){return xt.Wb})),n.d(e,"pb",(function(){return xt.Yb})),n.d(e,"qb",(function(){return xt.bc})),n.d(e,"rb",(function(){return xt.cc})),n.d(e,"sb",(function(){return xt.dc})),n.d(e,"ub",(function(){return xt.fc})),n.d(e,"tb",(function(){return xt.ec})),n.d(e,"wb",(function(){return xt.mc})),n.d(e,"xb",(function(){return xt.nc})),n.d(e,"yb",(function(){return xt.qc})),n.d(e,"Db",(function(){return xt.vc})),n.d(e,"Bb",(function(){return xt.tc})),n.d(e,"Cb",(function(){return xt.uc})),n.d(e,"Ab",(function(){return xt.sc})),n.d(e,"zb",(function(){return xt.rc})),n.d(e,"Eb",(function(){return xt.xc})),n.d(e,"Gb",(function(){return xt.Bc})),n.d(e,"Fb",(function(){return xt.yc})),n.d(e,"Ib",(function(){return xt.Dc})),n.d(e,"Hb",(function(){return xt.Cc})),n.d(e,"Kb",(function(){return xt.Gc})),n.d(e,"Lb",(function(){return xt.Ic})),n.d(e,"Mb",(function(){return xt.Jc})),n.d(e,"Pb",(function(){return xt.Mc})),n.d(e,"Qb",(function(){return xt.Nc})),n.d(e,"Jb",(function(){return xt.Ec})),n.d(e,"P",(function(){return xt.db})),n.d(e,"vb",(function(){return xt.lc})),n.d(e,"Rb",(function(){return xt.Rc})),n.d(e,"R",(function(){return xt.fb})),n.d(e,"S",(function(){return xt.gb}));var r={};n.r(r),n.d(r,"copyModel",(function(){return H})),n.d(r,"listModels",(function(){return V})),n.d(r,"moveModel",(function(){return U})),n.d(r,"removeModel",(function(){return W})),n.d(r,"browserFiles",(function(){return at})),n.d(r,"browserHTTPRequest",(function(){return mt})),n.d(r,"concatenateArrayBuffers",(function(){return f.d})),n.d(r,"decodeWeights",(function(){return f.e})),n.d(r,"encodeWeights",(function(){return f.f})),n.d(r,"fromMemory",(function(){return yt})),n.d(r,"getLoadHandlers",(function(){return v})),n.d(r,"getModelArtifactsInfoForJSON",(function(){return f.g})),n.d(r,"getSaveHandlers",(function(){return x})),n.d(r,"http",(function(){return ft})),n.d(r,"isHTTPScheme",(function(){return pt})),n.d(r,"loadWeights",(function(){return ct})),n.d(r,"registerLoadRouter",(function(){return O})),n.d(r,"registerSaveRouter",(function(){return y})),n.d(r,"weightsLoaderFactory",(function(){return ut})),n.d(r,"withSaveHandler",(function(){return Ot}));var o={};n.r(o),n.d(o,"toPixels",(function(){return Nt})),n.d(o,"fromPixels",(function(){return Tt}));var c={};n.r(c),n.d(c,"axesAreInnerMostDims",(function(){return _t.b})),n.d(c,"combineLocations",(function(){return _t.c})),n.d(c,"computeOutAndReduceShapes",(function(){return _t.d})),n.d(c,"expandShapeToKeepDim",(function(){return _t.e})),n.d(c,"assertAxesAreInnerMostDims",(function(){return _t.a})),n.d(c,"getAxesPermutation",(function(){return _t.f})),n.d(c,"getUndoAxesPermutation",(function(){return _t.h})),n.d(c,"getInnerMostAxes",(function(){return _t.g})),n.d(c,"getBroadcastDims",(function(){return Mt.b})),n.d(c,"getReductionAxes",(function(){return Mt.c})),n.d(c,"assertAndGetBroadcastShape",(function(){return Mt.a})),n.d(c,"assertParamsConsistent",(function(){return Pt.a})),n.d(c,"computeOutShape",(function(){return Pt.b})),n.d(c,"computeDilation2DInfo",(function(){return Bt.d})),n.d(c,"computePool2DInfo",(function(){return Bt.e})),n.d(c,"computePool3DInfo",(function(){return Bt.f})),n.d(c,"computeConv2DInfo",(function(){return Bt.a})),n.d(c,"computeConv3DInfo",(function(){return Bt.b})),n.d(c,"computeDefaultPad",(function(){return Bt.c})),n.d(c,"tupleValuesAreOne",(function(){return Bt.i})),n.d(c,"eitherStridesOrDilationsAreOne",(function(){return Bt.h})),n.d(c,"convertConv2DDataFormat",(function(){return Bt.g})),n.d(c,"getFusedDyActivation",(function(){return Lt.c})),n.d(c,"getFusedBiasGradient",(function(){return Lt.b})),n.d(c,"applyActivation",(function(){return Lt.a})),n.d(c,"shouldFuse",(function(){return Lt.d})),n.d(c,"PARALLELIZE_THRESHOLD",(function(){return zt.a})),n.d(c,"computeOptimalWindowSize",(function(){return zt.b})),n.d(c,"slice_util",(function(){return Ct})),n.d(c,"upcastType",(function(){return St.b})),n.d(c,"getImageCenter",(function(){return Vt})),n.d(c,"getReshaped",(function(){return Wt})),n.d(c,"getPermuted",(function(){return Ht})),n.d(c,"getReshapedPermuted",(function(){return Ut})),n.d(c,"getSliceBeginCoords",(function(){return Gt})),n.d(c,"getSliceSize",(function(){return qt})),n.d(c,"prepareAndValidate",(function(){return Kt})),n.d(c,"validateUpdateShape",(function(){return Xt.c})),n.d(c,"validateInput",(function(){return Xt.b})),n.d(c,"calculateShapes",(function(){return Xt.a})),n.d(c,"SELU_SCALEALPHA",(function(){return Yt})),n.d(c,"SELU_SCALE",(function(){return Qt})),n.d(c,"ERF_P",(function(){return Jt})),n.d(c,"ERF_A1",(function(){return Zt})),n.d(c,"ERF_A2",(function(){return te})),n.d(c,"ERF_A3",(function(){return ee})),n.d(c,"ERF_A4",(function(){return ne})),n.d(c,"ERF_A5",(function(){return re})),n.d(c,"warn",(function(){return ae})),n.d(c,"log",(function(){return oe})),n.d(c,"mergeRealAndImagArrays",(function(){return se})),n.d(c,"splitRealAndImagArrays",(function(){return ie})),n.d(c,"complexWithEvenIndex",(function(){return ce})),n.d(c,"complexWithOddIndex",(function(){return ue})),n.d(c,"getComplexWithIndex",(function(){return le})),n.d(c,"assignToTypedArray",(function(){return de})),n.d(c,"exponents",(function(){return pe})),n.d(c,"exponent",(function(){return he})),n.d(c,"prepareSplitSize",(function(){return fe.a})),n.d(c,"segment_util",(function(){return me})),n.d(c,"castTensor",(function(){return be})),n.d(c,"reshapeTensor",(function(){return ge})),n.d(c,"linspaceImpl",(function(){return ye}));var l={};n.r(l),n.d(l,"nonMaxSuppressionV3Impl",(function(){return xe.a})),n.d(l,"nonMaxSuppressionV4Impl",(function(){return xe.b})),n.d(l,"nonMaxSuppressionV5Impl",(function(){return xe.c})),n.d(l,"split",(function(){return je})),n.d(l,"tile",(function(){return we})),n.d(l,"topkImpl",(function(){return ke})),n.d(l,"whereImpl",(function(){return Ne.a}));var d=n(181),h=(n(253),n(199)),f=n(212);class m{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==m.instance&&(m.instance=new m),m.instance}static registerSaveRouter(t){m.getInstance().saveRouters.push(t)}static registerLoadRouter(t){m.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return m.getHandlers(t,"save")}static getLoadHandlers(t,e){return m.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?m.getInstance().loadRouters:m.getInstance().saveRouters).forEach(e=>{const o=e(t,n);null!==o&&r.push(o)}),r}}const y=t=>m.registerSaveRouter(t),O=t=>m.registerLoadRouter(t),x=t=>m.getSaveHandlers(t),v=(t,e)=>m.getLoadHandlers(t,e);function j(){if(!Object(h.b)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function w(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class I{constructor(t){if(this.indexedDB=j(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>w(r),r.onsuccess=()=>{const o=r.result;if(null==e){const e=o.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return o.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(o.close(),n(r.error)),e.oncomplete=()=>o.close()}else{const r=Object(f.g)(e),c=o.transaction("model_info_store","readwrite");let l=c.objectStore("model_info_store");const d=l.put({modelPath:this.modelPath,modelArtifactsInfo:r});let h;d.onsuccess=()=>{h=o.transaction("models_store","readwrite");const d=h.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});d.onsuccess=()=>t({modelArtifactsInfo:r}),d.onerror=t=>{l=c.objectStore("model_info_store");const e=l.delete(this.modelPath);e.onsuccess=()=>(o.close(),n(d.error)),e.onerror=t=>(o.close(),n(d.error))}},d.onerror=t=>(o.close(),n(d.error)),c.oncomplete=()=>{null==h?o.close():h.oncomplete=()=>o.close()}}},r.onerror=t=>n(r.error)})}}I.URL_SCHEME="indexeddb://";const k=t=>{return Object(h.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(I.URL_SCHEME)?(e=t.slice(I.URL_SCHEME.length),new I(e)):null;var e};m.registerSaveRouter(k),m.registerLoadRouter(k);class N{constructor(){this.indexedDB=j()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>w(n),n.onsuccess=()=>{const r=n.result,o=r.transaction("model_info_store","readonly"),c=o.objectStore("model_info_store").getAll();c.onsuccess=()=>{const e={};for(const t of c.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},c.onerror=t=>(r.close(),e(c.error)),o.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(path){var t;return path=(t=path).startsWith(I.URL_SCHEME)?t.slice(I.URL_SCHEME.length):t,new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>w(n),n.onsuccess=()=>{const r=n.result,o=r.transaction("model_info_store","readwrite"),c=o.objectStore("model_info_store"),l=c.get(path);let d;l.onsuccess=()=>{if(null==l.result)return r.close(),e(new Error(`Cannot find model with path '${path}' in IndexedDB.`));{const n=c.delete(path),o=()=>{d=r.transaction("models_store","readwrite");const n=d.objectStore("models_store").delete(path);n.onsuccess=()=>t(l.result.modelArtifactsInfo),n.onerror=t=>e(l.error)};n.onsuccess=o,n.onerror=t=>(o(),r.close(),e(l.error))}},l.onerror=t=>(r.close(),e(l.error)),o.oncomplete=()=>{null==d?r.close():d.oncomplete=()=>r.close()}},n.onerror=t=>e(n.error)})}}var T=n(271);const C="tensorflowjs_models",$="info",S="model_topology",E="weight_specs",R="weight_data",A="model_metadata";function F(path){return{info:[C,path,$].join("/"),topology:[C,path,S].join("/"),weightSpecs:[C,path,E].join("/"),weightData:[C,path,R].join("/"),modelMetadata:[C,path,A].join("/")}}function D(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class _{constructor(t){if(!Object(h.b)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=F(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Object(f.g)(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(f.a)(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const o=this.LS.getItem(this.keys.modelMetadata);if(null!=o){const t=JSON.parse(o);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const c=this.LS.getItem(this.keys.weightData);if(null==c)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=Object(f.b)(c),e}}_.URL_SCHEME="localstorage://";const M=t=>{return Object(h.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(_.URL_SCHEME)?(e=t.slice(_.URL_SCHEME.length),new _(e)):null;var e};m.registerSaveRouter(M),m.registerLoadRouter(M);class P{constructor(){Object(T.b)(Object(h.b)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Object(T.b)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=C+"/",n="/"+$;for(let i=0;i<this.LS.length;++i){const r=this.LS.key(i);if(r.startsWith(e)&&r.endsWith(n)){t[D(r)]=JSON.parse(this.LS.getItem(r))}}return t}async removeModel(path){var t;const e=F(path=(t=path).startsWith(_.URL_SCHEME)?t.slice(_.URL_SCHEME.length):t);if(null==this.LS.getItem(e.info))throw new Error(`Cannot find model at path '${path}'`);const n=JSON.parse(this.LS.getItem(e.info));return this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),n}}class B{constructor(){this.managers={}}static getInstance(){return null==B.instance&&(B.instance=new B),B.instance}static registerManager(t,e){Object(T.b)(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),Object(T.b)(t.length>0,()=>"scheme must not be an empty string.");const n=B.getInstance();Object(T.b)(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function L(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+B.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function z(t,e,n=!1){Object(T.b)(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=m.getLoadHandlers(t);Object(T.b)(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),Object(T.b)(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const o=r[0],c=m.getSaveHandlers(e);Object(T.b)(c.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),Object(T.b)(c.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const l=c[0],d=L(t).scheme,h=L(t).path,f=d===L(t).scheme,y=await o.load();n&&f&&await B.getManager(d).removeModel(h);const O=await l.save(y);return n&&!f&&await B.getManager(d).removeModel(h),O.modelArtifactsInfo}async function V(){const t=B.getSchemes(),e={};for(const n of t){const t=await B.getManager(n).listModels();for(const path in t){e[n+"://"+path]=t[path]}}return e}async function W(t){const e=L(t);return B.getManager(e.scheme).removeModel(e.path)}async function H(t,e){return z(t,e,!1)}async function U(t,e){return z(t,e,!0)}class G{fetch(path,t){return fetch(path,t)}now(){return performance.now()}encode(text,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(text)}decode(t,e){return new TextDecoder(e).decode(t)}}if(Object(h.b)().get("IS_BROWSER")){Object(h.b)().setPlatform("browser",new G);try{B.registerManager(_.URL_SCHEME,new P)}catch(t){}try{B.registerManager(I.URL_SCHEME,new N)}catch(t){}}n(480);var K=n(216),X=n(186),Y=n(234),Q=n(303),J=n(180);Object(d.b)();const Z={buffer:K.a,cast:X.a,clone:Y.a,print:Q.a};Object(J.e)(Z);function tt(t){return new Promise(t=>setTimeout(t)).then(t)}class et{constructor(t){if(!Object(h.b)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(et.URL_SCHEME)&&(t=t.slice(et.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),c=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(c.download=this.modelTopologyFileName,c.href=o,await tt(()=>c.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await tt(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Object(f.g)(t)}}}}et.URL_SCHEME="downloads://";class nt{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const o=new FileReader;o.onload=o=>{const c=JSON.parse(o.target.result),l=c.modelTopology;if(null==l)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:l});const d=c.weightsManifest;if(null==d)return void r(new Error("weightManifest field is missing from file "+t.name));let h;try{h=this.checkManifestAndWeightFiles(d,e)}catch(t){return void r(t)}const m=[],y=[],O=[];d.forEach(t=>{t.paths.forEach(path=>{y.push(path),O.push(null)}),m.push(...t.weights)}),d.forEach(t=>{t.paths.forEach(path=>{const t=new FileReader;t.onload=t=>{const e=t.target.result,r=y.indexOf(path);O[r]=e,-1===O.indexOf(null)&&n({modelTopology:l,weightSpecs:m,weightData:Object(f.d)(O),format:c.format,generatedBy:c.generatedBy,convertedBy:c.convertedBy,userDefinedMetadata:c.userDefinedMetadata})},t.onerror=t=>r(`Failed to weights data from file of path '${path}'.`),t.readAsArrayBuffer(h[path])})})},o.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Object(f.c)(t.name)),o={};for(const c of t)c.paths.forEach(path=>{const t=Object(f.c)(path);if(-1!==n.indexOf(t))throw new Error(`Duplicate file basename found in weights manifest: '${t}'`);if(n.push(t),-1===r.indexOf(t))throw new Error(`Weight file with basename '${t}' is not provided.`);o[path]=e[r.indexOf(t)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return o}}function at(t){return new nt(t)}function ot(t,e,n,r){!function(t){Object(T.b)(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){Object(T.b)(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),Object(T.b)(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),Object(T.b)(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let o=0;return Promise.all(t.map(c=>(c.then(c=>{const l=n+ ++o/t.length*(r-n);return e(l),c}),c)))}m.registerSaveRouter(t=>Object(h.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(et.URL_SCHEME)?function(t="model"){return new et(t)}(t.slice(et.URL_SCHEME.length)):null);var st=n(372);async function it(t,e){null==e&&(e={});const n=null==e.fetchFunc?Object(h.b)().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),o=(null==e.onProgress?await Promise.all(r):await ot(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(o):await ot(o,e.onProgress,.5,1)}async function ct(t,e="",n,r){return ut(t=>it(t,{requestInit:r}))(t,e,n)}function ut(t){return async(e,n="",r)=>{const o=e.map(()=>!1),c={},l=null!=r?r.map(()=>!1):[],d=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const h="quantization"in t?t.quantization.dtype:t.dtype,f=st.a[h]*T.N(t.shape),m=()=>{o[e]=!0,null==c[e]&&(c[e]=[]),c[e].push({manifestEntry:t,groupOffset:n,sizeBytes:f})};null!=r?r.forEach((e,n)=>{e===t.name&&(m(),l[n]=!0)}):m(),d.push(t.name),n+=f})}),!l.every(t=>t)){const t=r.filter((t,i)=>!l[i]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+d.join(", ")+".")}const h=o.reduce((t,e,i)=>(e&&t.push(i),t),[]),m=[];h.forEach(i=>{e[i].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;m.push(e)})});const y=await t(m),O={};let x=0;return h.forEach(i=>{const t=e[i].paths.length;let n=0;for(let i=0;i<t;i++)n+=y[x+i].byteLength;const r=new ArrayBuffer(n),o=new Uint8Array(r);let l=0;for(let i=0;i<t;i++){const t=new Uint8Array(y[x+i]);o.set(t,l),l+=t.byteLength}c[i].forEach(t=>{const e=r.slice(t.groupOffset,t.groupOffset+t.sizeBytes),n=Object(f.e)(e,[t.manifestEntry]);for(const t in n)O[t]=n[t]}),x+=t}),O}}class lt{constructor(path,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Object(T.b)("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=Object(h.b)().platform.fetch,Object(T.b)(null!=path&&path.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(path)&&Object(T.b)(2===path.length,()=>`URL paths for http must have a length of 2, (actual length is ${path.length}).`),this.path=path,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const o=await this.fetch(this.path,e);if(o.ok)return{modelArtifactsInfo:Object(f.g)(t),responses:[o]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,o=e.generatedBy,c=e.convertedBy,l=e.format,d=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let h,f;if(null!=r){const t=await this.loadWeights(r);[h,f]=t}const m={modelTopology:n,weightSpecs:h,weightData:f,userDefinedMetadata:d,generatedBy:o,convertedBy:c,format:l},y=e.modelInitializer;return y&&(m.modelInitializer=y),m}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),o=n>e?t.substring(n):"";return[r+"/",o]}(e),o=this.weightPathPrefix||n,c=[];for(const e of t)c.push(...e.weights);const l=[],d=[];for(const e of t)for(const path of e.paths)null!=this.weightUrlConverter?d.push(this.weightUrlConverter(path)):l.push(o+path+r);this.weightUrlConverter&&l.push(...await Promise.all(d));const h=await it(l,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[c,Object(f.d)(h)]}}function pt(t){return null!=t.match(lt.URL_SCHEME_REGEX)}lt.URL_SCHEME_REGEX=/^https?:\/\//;const ht=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>pt(t)):pt(t),n)return ft(t,e)}return null};function ft(path,t){return new lt(path,t)}function mt(path,t){return ft(path,t)}m.registerSaveRouter(ht),m.registerLoadRouter(ht);class bt{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class gt{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function yt(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new bt(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new bt({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new bt({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})}function Ot(t){return new gt(t)}var xt=n(176),vt=n(252),jt=n(179),wt=n(178),It=n(312);let kt;async function Nt(img,canvas){let t=Object(jt.a)(img,"img","toPixels");if(!(img instanceof J.a)){const e=t;t=Object(X.a)(e,"int32"),e.dispose()}if(2!==t.rank&&3!==t.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t.rank}.`);const[e,n]=t.shape.slice(0,2),r=2===t.rank?1:t.shape[2];if(r>4||2===r)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+r);if("float32"!==t.dtype&&"int32"!==t.dtype)throw new Error(`Unsupported type for toPixels: ${t.dtype}. Please use float32 or int32 tensors.`);const data=await t.data(),o="float32"===t.dtype?255:1,c=new Uint8ClampedArray(n*e*4);for(let i=0;i<e*n;++i){const e=[0,0,0,255];for(let n=0;n<r;n++){const c=data[i*r+n];if("float32"===t.dtype){if(c<0||c>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${c}.`)}else if("int32"===t.dtype&&(c<0||c>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${c}.`);1===r?(e[0]=c*o,e[1]=c*o,e[2]=c*o):e[n]=c*o}const n=4*i;c[n+0]=Math.round(e[0]),c[n+1]=Math.round(e[1]),c[n+2]=Math.round(e[2]),c[n+3]=Math.round(e[3])}if(null!=canvas){canvas.width=n,canvas.height=e;const t=canvas.getContext("2d"),r=new ImageData(c,n,e);t.putImageData(r,0,0)}return t!==img&&t.dispose(),c}const Tt=Object(wt.a)({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,o=!1,c=!1,l=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)c=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);l=!0}if(o){const e=2;if(o&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Object(vt.b)(xt.db,d.a.backendName)){const n={pixels:t},r={numChannels:e};return d.a.runKernel(xt.db,n,r)}const[h,f]=o?[t.videoWidth,t.videoHeight]:[t.width,t.height];let m,y;if(l?m=t.getContext("2d").getImageData(0,0,h,f).data:r||n?m=t.data:(c||o)&&(null==kt&&(kt=document.createElement("canvas").getContext("2d")),kt.canvas.width=h,kt.canvas.height=f,kt.drawImage(t,0,0,h,f),m=kt.getImageData(0,0,h,f).data),4===e)y=new Int32Array(m);else{const t=h*f;y=new Int32Array(t*e);for(let i=0;i<t;i++)for(let t=0;t<e;++t)y[i*e+t]=m[4*i+t]}const O=[f,h,e];return Object(It.a)(y,O,"int32")}});var Ct=n(224),$t=n(182),St=n(223),Et=n(184),Rt=n(221),At=n(190),Ft=n(237),Dt=n(217),_t=n(198),Mt=n(189),Pt=n(304),Bt=n(192),Lt=n(229),zt=n(313);function Vt(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Wt(t,e,n,r=!0){let o=[];if(r)o=o.concat(e.slice(0)),o.push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);const n=e.length;for(let i=0;i<n;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(n+1))}return o}function Ht(t,e,n=!0){const r=[];if(n){r.push(e);for(let i=e+1;i<t;++i)i<=2*e?(r.push(i),r.push(i-(e+1))):r.push(i)}else{const n=[],o=[];for(let i=1;i<t;++i)i>=2*e+1||i%2==1?o.push(i):n.push(i);r.push(...n),r.push(0),r.push(...o)}return r}function Ut(t,e,n,r=!0){const o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(let i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function Gt(t,e){const n=[0];for(let i=0;i<e;++i)n.push(t[i][0]);return n}function qt(t,e,n){const r=t.slice(0,1);for(let i=0;i<n;++i)r.push(t[i+1]-e[i][0]-e[i][1]);return r}function Kt(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let o=1;for(let i=0;i<n.length-1;++i)o*=n[i];const c=t.shape,l=n.slice();l.pop();let d=1;for(let i=r;i<t.rank;++i)d*=c[i],l.push(c[i]);const h=[...Object(T.j)(t.shape).map(t=>t/d),1].slice(0,r);return[l,o,d,h]}var Xt=n(263);const Yt=1.7580993408473768,Qt=1.0507009873554805,Jt=.3275911,Zt=.254829592,te=-.284496736,ee=1.421413741,ne=-1.453152027,re=1.061405429;function ae(...t){Object(h.b)().getBool("IS_TEST")||console.warn(...t)}function oe(...t){Object(h.b)().getBool("IS_TEST")||console.log(...t)}function se(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let i=0;i<n.length;i+=2)n[i]=t[i/2],n[i+1]=e[i/2];return n}function ie(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let i=0;i<t.length;i+=2)e[i/2]=t[i],n[i/2]=t[i+1];return{real:e,imag:n}}function ce(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let i=0;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}function ue(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let i=2;i<t.length;i+=4)n[Math.floor(i/4)]=t[i],r[Math.floor(i/4)]=t[i+1];return{real:n,imag:r}}function le(t,e){return{real:t[2*e],imag:t[2*e+1]}}function de(data,t,e,n){data[2*n]=t,data[2*n+1]=e}function pe(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let i=0;i<Math.ceil(t/2);i++){const o=(e?2:-2)*Math.PI*(i/t);n[i]=Math.cos(o),r[i]=Math.sin(o)}return{real:n,imag:r}}function he(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}var fe=n(307),me=n(314);function be(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=Object(Dt.a)(t.shape),r=Object(X.a)(t,"float32"),o=n.complex(r,e);return e.dispose(),r.dispose(),o}if(!Object(T.p)(t.dtype,e))return d.a.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),o=Object(X.a)(r,e);return r.dispose(),o}if("int32"===e)return n.int(t);if("bool"===e){const e=Object(At.a)(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function ge(t,e){return d.a.makeTensorFromDataId(t.dataId,e,t.dtype)}function ye(t,e,n){const r=(e-t)/(n-1),o=Object(T.F)(n,"float32");o[0]=t;for(let i=1;i<o.length;i++)o[i]=o[i-1]+r;return Object(Ft.a)(o,"float32")}var Oe=n(302),xe=n(232),ve=n(206);function je(t,e,n){const r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map(s=>{const e=[...o];e[n]=s;const c=Object(ve.a)(t,r,e);return r[n]+=s,c})}function we(t,e){const n=new Array(t.rank);for(let i=0;i<n.length;i++)n[i]=t.shape[i]*e[i];const r=Object(K.a)(n,t.dtype);for(let i=0;i<r.values.length;++i){const e=r.indexToLoc(i),n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=e[r]%t.shape[r];const o=t.locToIndex(n);r.values[i]=t.values[o]}return r.toTensor()}var Ie=n(254);function ke(t,e,n,r,o){const c=e[e.length-1],[l,d]=[t.length/c,c],h=Object(T.o)(n,l*r),f=Object(T.o)("int32",l*r);for(let b=0;b<l;b++){const e=b*d,n=t.subarray(e,e+d),o=[];for(let i=0;i<n.length;i++)o.push({value:n[i],index:i});o.sort((a,b)=>b.value-a.value);const c=b*r,l=h.subarray(c,c+r),m=f.subarray(c,c+r);for(let i=0;i<r;i++)l[i]=o[i].value,m[i]=o[i].index}const m=e.slice();return m[m.length-1]=r,[Object(Ie.a)(h,m,n),Object(Ie.a)(f,m,"int32")]}var Ne=n(315),Te=n(272),Ce=n(185),$e=n(244);const Se={kernelName:xt.a,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object($e.a)(Object(X.a)(n,"float32"),-1))}}};var div=n(194),Ee=n(201),Re=n(220),Ae=n(202),sub=n(191);const Fe={kernelName:xt.b,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const a=Object(Ae.a)(Object(X.a)(n,"float32")),b=Object(Re.a)(Object(sub.a)(Object(At.a)(1),a));return Object(Ee.a)(Object(div.a)(t,b))}}}},De={kernelName:xt.c,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const a=Object(Re.a)(Object(sub.a)(Object(Ae.a)(Object(X.a)(n,"float32")),1));return Object(div.a)(t,a)}}}};var _e=n(183),Me=n(195);const Pe={kernelName:xt.d,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Mt.a(a.shape,b.shape);return{a:()=>{let e=t;const r=Mt.c(a.shape,n);return r.length>0&&(e=Object(Me.a)(e,r)),Object(_e.a)(e,a.shape)},b:()=>{let e=t;const r=Mt.c(b.shape,n);return r.length>0&&(e=Object(Me.a)(e,r)),Object(_e.a)(e,b.shape)}}}},Be={kernelName:xt.e,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,i)=>{n[i]=()=>t.clone()}),n}};var Le=n(196);const ze={kernelName:xt.h,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Le.a)(n)}}},Ve={kernelName:xt.i,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Le.a)(n)}}},We={kernelName:xt.j,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(Re.a)(Object(sub.a)(Object(At.a)(1),Object(Ae.a)(Object(X.a)(n,"float32")))))}}};var He=n(200);const Ue={kernelName:xt.k,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const a=Object(Re.a)(Object(He.a)(Object(At.a)(1),Object(Ae.a)(Object(X.a)(n,"float32"))));return Object(div.a)(t,a)}}}},Ge={kernelName:xt.m,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Object(Mt.a)(a.shape,b.shape);return{a:()=>{const e=Object(He.a)(Object(Ae.a)(a),Object(Ae.a)(b));let r=Object(Ce.a)(t,Object(div.a)(b,e));const o=Object(Mt.c)(a.shape,n);return o.length>0&&(r=Object(Me.a)(r,o)),Object(_e.a)(r,a.shape)},b:()=>{const e=Object(He.a)(Object(Ae.a)(a),Object(Ae.a)(b));let r=Object(Ee.a)(Object(Ce.a)(t,Object(div.a)(a,e)));const o=Object(Mt.c)(b.shape,n);return o.length>0&&(r=Object(Me.a)(r,o)),Object(_e.a)(r,b.shape)}}}},qe={kernelName:xt.l,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(He.a)(Object(Ae.a)(Object(X.a)(n,"float32")),1))}}},Ke={kernelName:xt.n,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(sub.a)(Object(At.a)(1),Object(Ae.a)(Object(X.a)(n,"float32"))))}}};const Xe=Object(wt.a)({avgPool3dBackprop_:function(t,input,e,n,r=[1,1,1],o,c){const l=Object(jt.a)(t,"dy","avgPool3dBackprop"),h=Object(jt.a)(input,"input","avgPool3dBackprop");let f=l,m=h,y=!1;4===h.rank&&(y=!0,f=Object(_e.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=Object(_e.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),T.b(5===f.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+f.rank+"."),T.b(5===m.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+m.rank+"."),T.b(Bt.h(n,r),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`),null!=c&&T.b(T.v(o),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${c} but got pad ${o}.`);const O={dy:f,input:m},x={filterSize:e,strides:n,dilations:r,pad:o,dimRoundingMode:c},v=d.a.runKernelFunc(t=>{const l=Bt.f(m.shape,e,n,r,o,c);return t.avgPool3dBackprop(f,m,l)},O,null,xt.q,x);return y?Object(_e.a)(v,[v.shape[1],v.shape[2],v.shape[3],v.shape[4]]):v}}),Ye={kernelName:xt.p,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:o,strides:c,dilations:l,pad:d,dimRoundingMode:h}=n,f=null==l?[1,1,1]:l;return{x:()=>Xe(t,r,o,c,f,d,h)}}};const Qe=Object(wt.a)({avgPoolBackprop_:function(t,input,e,n,r){const o=Object(jt.a)(t,"dy","avgPoolBackprop"),c=Object(jt.a)(input,"input","avgPoolBackprop");T.b(c.rank===o.rank,()=>`Rank of input (${c.rank}) does not match rank of dy (${o.rank})`);let l=c,h=o,f=!1;3===c.rank&&(f=!0,l=Object(_e.a)(c,[1,c.shape[0],c.shape[1],c.shape[2]]),h=Object(_e.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]])),T.b(4===h.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+h.rank+"."),T.b(4===l.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+l.rank+".");const m={dy:h,input:l},y={filterSize:e,strides:n,pad:r},O=d.a.runKernelFunc(t=>{const o=Bt.e(l.shape,e,n,1,r);return t.avgPoolBackprop(h,l,o)},m,null,xt.r,y);return f?Object(_e.a)(O,[O.shape[1],O.shape[2],O.shape[3]]):O}}),Je={kernelName:xt.o,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:o,strides:c,pad:l}=n;return{x:()=>Qe(t,r,o,c,l)}}};var Ze=n(228);const tn={kernelName:xt.s,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[a,b]=e,{transposeA:r,transposeB:o}=n;return r||o?!r&&o?{a:()=>Object(Ze.a)(t,b,!1,!1),b:()=>Object(Ze.a)(t,a,!0,!1)}:r&&!o?{a:()=>Object(Ze.a)(b,t,!1,!0),b:()=>Object(Ze.a)(a,t,!1,!1)}:{a:()=>Object(Ze.a)(b,t,!0,!0),b:()=>Object(Ze.a)(t,a,!0,!0)}:{a:()=>Object(Ze.a)(t,b,!1,!0),b:()=>Object(Ze.a)(a,t,!0,!1)}}};var en=n(264);const nn={kernelName:xt.t,gradFunc:(t,e,n)=>{const{blockShape:r,crops:o}=n;return{x:()=>Object(en.a)(t,r,o)}}},rn={kernelName:xt.u,gradFunc:(t,e,n)=>{const r=n,o=r.inputShape,c=r.shape,l=Array.from(c);for(let i=o.length-1;i>=0;i--)if(o[i]===c[i])l[i]=1;else if(1!==o[i])throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${c}].`);const d=[];for(let i=0;i<l.length;i++)l[i]>1&&d.push(i);return{x:()=>Object(Me.a)(t,d,!0)}}},an={kernelName:xt.v,gradFunc:t=>({x:()=>t.clone()})},on={kernelName:xt.w,gradFunc:t=>({x:()=>Object(Le.a)(t)})};var sn=n(219),cn=n(218),un=n(226),ln=n(210);const dn={kernelName:xt.x,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:o,clipValueMax:c}=n;return{x:()=>Object(ln.a)(Object(un.a)(Object(sn.a)(r,o),Object(cn.a)(r,c)),t,Object(Le.a)(t))}}};var pn=n(239);const hn={kernelName:xt.z,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:o}=n,c=Object(T.I)(o,e[0].shape)[0],l=r.map(s=>s[c]);return Object(pn.a)(t,l,c).map(t=>()=>t)}};var fn=n(311),mn=n(310);const bn={kernelName:xt.A,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,o]=e,{dilations:c,strides:l,pad:d,dataFormat:h}=n;return T.b(Bt.i(c),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${c}'`),{x:()=>Object(mn.a)(r.shape,t,o,l,d,h),filter:()=>Object(fn.a)(r,t,o.shape,l,d,h)}}};var gn=n(230);const yn={kernelName:xt.C,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,filter]=e,{strides:o,pad:c,dataFormat:l,dimRoundingMode:d}=n;return{dy:()=>Object(gn.a)(t,filter,o,c,l,1,d),filter:()=>Object(fn.a)(t,r,filter.shape,o,c,l,d)}}};const On=Object(wt.a)({conv3DBackpropFilter_:function(t,e,n,r,o){let c=t;4===t.rank&&(c=Object(_e.a)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let l=e;4===l.rank&&(l=Object(_e.a)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),T.b(5===c.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+c.shape+"."),T.b(5===l.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+l.shape+"."),T.b(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),T.b(c.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${c.shape[4]}) must match input depth in filter (${n[3]}.`),T.b(l.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${l.shape[4]}) must match output depth for filter (${n[4]}).`);const h={x:c,dy:l},f={strides:r,pad:o,filterShape:n};return d.a.runKernelFunc(t=>{const e=Bt.b(c.shape,n,r,1,o);return t.conv3dDerFilter(c,l,e)},h,null,xt.E,f)}});const xn=Object(wt.a)({conv3DBackpropInput_:function(t,e,filter,n,r){T.b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,c=e,l=!1;4===e.rank&&(l=!0,c=Object(_e.a)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),o=[1,t[0],t[1],t[2],t[3]]);const h=o[4],f=c.shape[4];T.b(5===o.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+o.length+"."),T.b(5===c.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+c.rank),T.b(5===filter.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+filter.rank),T.b(h===filter.shape[3],()=>`Error in conv3dDerInput: depth of input (${h}) must match input depth for filter ${filter.shape[3]}.`),T.b(f===filter.shape[4],()=>`Error in conv3dDerInput: depth of output (${f}) must match output depth for filter ${filter.shape[4]}.`);const m={dy:c,filter:filter},y={pad:r,strides:n,inputShape:o},O=d.a.runKernelFunc(t=>{const e=Bt.b(o,filter.shape,n,1,r);return t.conv3dDerInput(c,filter,e)},m,null,xt.F,y);return l?Object(_e.a)(O,[O.shape[1],O.shape[2],O.shape[3],O.shape[4]]):O}}),vn={kernelName:xt.D,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:o,pad:c}=n;T.b(Object(Bt.i)(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[l,d]=e;return{x:()=>xn(l.shape,t,d,o,c),filter:()=>On(l,t,d.shape,o,c)}}};var jn=n(316);const wn={kernelName:xt.G,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(Object(Ee.a)(Object(jn.a)(Object(X.a)(n,"float32"))),t)}}};var In=n(317);const kn={kernelName:xt.H,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(Object(In.a)(Object(X.a)(n,"float32")),t)}}};var Nn=n(287),Tn=n(203);const Cn={kernelName:xt.J,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:o,exclusive:c,reverse:l}=n;return{x:()=>{const e=Object(_t.f)([o],r.rank);let n=Object(Nn.a)(t,o,c,!l);return null!=e&&(n=Object(Tn.a)(n,e)),n}}}};var $n=n(377),Sn=n(376);const En={kernelName:xt.L,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:o,pad:c,dimRoundingMode:l}=n,d=null==r?[1,1]:r;T.b(Bt.i(d),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${d}'`);const[h,filter]=e;return T.b(4===h.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${h.rank}.`),T.b(4===filter.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${filter.rank}.`),T.b(h.shape[3]===filter.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${filter.shape[2]}.`),T.b(Bt.h(o,d),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${d}'.`),null!=l&&T.b(T.v(c),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${l} but got pad ${c}.`),{x:()=>Object(Sn.a)(h.shape,t,filter,o,c,r,l),filter:()=>Object($n.a)(h,t,filter.shape,o,c,r,l)}}},Rn={kernelName:xt.O,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,filter]=e,o={x:r,filter:filter,dy:t},c={x:r,filter:filter,dy:t};return{x:()=>d.a.runKernel(xt.Q,o,n),filter:()=>d.a.runKernel(xt.P,c,n)}}},An={kernelName:xt.R,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Mt.a(a.shape,b.shape);return{a:()=>{const e=Object(div.a)(t,Object(X.a)(b,"float32")),r=Mt.c(a.shape,n);return r.length>0?Object(_e.a)(Object(Me.a)(e,r),a.shape):e},b:()=>{let e=Object(Ce.a)(t,Object(X.a)(a,"float32"));const r=Mt.c(b.shape,n);r.length>0&&(e=Object(_e.a)(Object(Me.a)(e,r),b.shape));const o=Object(Ae.a)(b);return Object(Ee.a)(Object(div.a)(e,Object(X.a)(o,"float32")))}}}},Fn={kernelName:xt.S,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),o={dy:t,y:n};return{x:()=>d.a.runKernelFunc(r,o,null,xt.T)}}};var Dn=n(213);const _n={kernelName:xt.V,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,a=Object(Ce.a)(Object(Dn.a)(Object(Ee.a)(Object(Ae.a)(n))),2/Math.sqrt(Math.PI));return{x:()=>Object(Ce.a)(t,a)}}},Mn={kernelName:xt.W,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,n)}}},Pn={kernelName:xt.X,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object(Dn.a)(n))}}},Bn={kernelName:xt.bb,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Ln={kernelName:xt.cb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Object(Mt.a)(a.shape,b.shape);return{a:()=>{const e=Object(div.a)(t,Object(X.a)(b,"float32")),r=Object(Mt.c)(a.shape,n);return r.length>0?Object(_e.a)(Object(Me.a)(e,r),a.shape):e},b:()=>{let e=Object(Ce.a)(t,Object(X.a)(a,"float32"));const r=Object(Mt.c)(b.shape,n);r.length>0&&(e=Object(_e.a)(Object(Me.a)(e,r),b.shape));const o=Object(Ae.a)(b);return Object(Ee.a)(Object(div.a)(e,Object(X.a)(o,"float32")))}}}};var zn=n(318),Vn=n(259);const Wn={kernelName:xt.eb,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[o,c,l,d]=e,h=null==d?Object(At.a)(1):d,f=Object(Mt.c)(c.shape,o.shape),m=[];if(1===c.rank){for(let i=0;i<o.shape.length-1;++i)m.push(o.shape[i]);m.push(1)}const y=Object(sub.a)(o,c),O=Object(Ce.a)(t,h),x=Object(zn.a)(Object(He.a)(l,Object(At.a)(r))),v=Object(Ce.a)(Object(Ce.a)(Object(Ce.a)(x,x),x),Object(At.a)(-.5));return{x:()=>1===c.rank?Object(_e.a)(Object(Ce.a)(Object(Ce.a)(t,Object(Vn.a)(Object(_e.a)(x,[1,1,1,c.shape[0]]),m)),h),o.shape):Object(_e.a)(Object(Ce.a)(Object(Ce.a)(t,x),h),o.shape),mean:()=>{let t=Object(Ce.a)(Object(Ce.a)(x,Object(At.a)(-1)),O);return 1===c.rank&&(t=Object(Me.a)(t,f)),Object(_e.a)(t,c.shape)},variance:()=>{let t=Object(Ce.a)(Object(Ce.a)(v,y),O);return 1===c.rank&&(t=Object(Me.a)(t,f)),Object(_e.a)(t,c.shape)},scale:()=>{const e=Object(Ce.a)(y,x);let n=Object(Ce.a)(t,e);return 1===c.rank&&(n=Object(Me.a)(n,f)),Object(_e.a)(n,c.shape)},offset:()=>{let e=t;return 1===c.rank&&(e=Object(Me.a)(e,f)),Object(_e.a)(e,c.shape)}}}};var Hn=n(288);const Un={kernelName:xt.ib,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,o]=e,{axis:c}=n,l=Object(T.I)(c,r.shape)[0];return{x:()=>{const e=r.shape,n=o.size,d=e.slice(0,l),h=d.length,f=e.slice(c,e.length).slice(1),m=f.length,y=Gn(0,h),O=Gn(h+1,h+1+m),x=qn([d,[n],f]),v=Object(_e.a)(t,x),j=Object(_e.a)(o,[n]),w=qn([[h],y,O]),I=Object(Tn.a)(v,w);let k=Object(Hn.a)(I,j,r.shape[l]);const N=Object(_t.h)(w);return k=Object(Tn.a)(k,N),k},indices:()=>o}}};function Gn(t,e){const n=[];for(let i=t;i<e;++i)n.push(i);return n}function qn(t){const e=[];for(let i=0;i<t.length;++i)for(let n=0;n<t[i].length;++n)e.push(t[i][n]);return e}const Kn={kernelName:xt.kb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e;return{a:()=>Object(Le.a)(a),b:()=>Object(Le.a)(b)}}},Xn={kernelName:xt.mb,gradFunc:t=>({x:()=>Object(X.a)(t,"float32")})},Yn={kernelName:xt.ob,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Qn={kernelName:xt.pb,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Jn={kernelName:xt.qb,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Zn={kernelName:xt.xb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(He.a)(n,1))}}},er={kernelName:xt.wb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(X.a)(n,"float32"))}}},nr={kernelName:xt.yb,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:o}=n;return{logits:()=>{const e=Object(Dn.a)(r);return Object(sub.a)(t,Object(Ce.a)(Object(Me.a)(t,o,!0),e))}}}};const rr=Object(wt.a)({localResponseNormalizationBackprop_:function(t,e,n,r=5,o=1,c=1,l=.5){const h={x:t,y:e,dy:n},f={depthRadius:r,bias:o,alpha:c,beta:l};return d.a.runKernelFunc(d=>d.LRNGrad(n,t,e,r,o,c,l),h,null,xt.sb,f)}}),ar={kernelName:xt.rb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,o]=e,{depthRadius:c,bias:l,alpha:d,beta:h}=n;return{x:()=>rr(r,o,t,c,l,d,h)}}};var or=n(235);function sr(t,e,n,r){return e.rank<n.rank&&(e=Object(_e.a)(e,_t.e(e.shape,r))),t.rank<n.rank&&(t=Object(_e.a)(t,_t.e(t.shape,r))),{x:()=>Object(Ce.a)(t,Object(X.a)(Object(or.a)(n,e),t.dtype))}}const ir={kernelName:xt.Cb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:o}=r,c=e[0],l=sr(t,e[1],c,T.I(o,c.shape));return{x:()=>l.x()}}};var cr=n(265);const ur={kernelName:xt.Ib,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e;return{a:()=>Object(Ce.a)(t,Object(X.a)(Object(sn.a)(a,b),"float32")),b:()=>Object(Ce.a)(t,Object(X.a)(Object(cr.a)(a,b),"float32"))}}};const lr=Object(wt.a)({maxPool3dBackprop_:function(t,input,output,e,n,r=[1,1,1],o,c){const l=Object(jt.a)(t,"dy","maxPool3dBackprop"),h=Object(jt.a)(input,"input","maxPool3dBackprop"),f=Object(jt.a)(output,"output","maxPool3dBackprop");let m=l,y=h,O=f,x=!1;4===h.rank&&(x=!0,m=Object(_e.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),y=Object(_e.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]]),O=Object(_e.a)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),T.b(5===m.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+m.rank+"."),T.b(5===y.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+y.rank+"."),T.b(5===O.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+O.rank+"."),T.b(Bt.h(n,r),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`),null!=c&&T.b(T.v(o),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${c} but got pad ${o}.`);const v={dy:m,input:y,output:O},j={filterSize:e,strides:n,dilations:r,pad:o,dimRoundingMode:c},w=d.a.runKernelFunc(t=>{const l=Bt.f(y.shape,e,n,r,o,c);return t.maxPool3dBackprop(m,y,O,l)},v,null,xt.Fb,j);return x?Object(_e.a)(w,[w.shape[1],w.shape[2],w.shape[3],w.shape[4]]):w}}),dr={kernelName:xt.Eb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,o]=e,{filterSize:c,strides:l,dilations:d,pad:h,dimRoundingMode:f}=n,m=null==d?[1,1,1]:d;return{x:()=>lr(t,r,o,c,l,m,h,f)}}};const pr=Object(wt.a)({maxPoolBackprop_:function(t,input,output,e,n,r,o){const c=Object(jt.a)(t,"dy","maxPoolBackprop"),l=Object(jt.a)(input,"input","maxPoolBackprop"),h=Object(jt.a)(output,"output","maxPoolBackprop");T.b(l.rank===c.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${c.rank})`),T.b(4===c.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."),T.b(4===l.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."),null!=o&&T.b(T.v(r),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const f={dy:c,input:l,output:h},m={filterSize:e,strides:n,pad:r,dimRoundingMode:o};return d.a.runKernelFunc(t=>{const d=Bt.e(l.shape,e,n,1,r,o);return t.maxPoolBackprop(c,l,h,d)},f,null,xt.Gb,m)}}),fr={kernelName:xt.Db,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,o]=e,{filterSize:c,strides:l,pad:d}=n;return{x:()=>pr(t,r,o,c,l,d)}}},mr={kernelName:xt.Kb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:o}=r,[c,l]=e,d=sr(t,l,c,T.I(o,c.shape));return{x:()=>d.x()}}};var gr=n(214);const yr={kernelName:xt.Lb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e;return{a:()=>Object(Ce.a)(t,Object(X.a)(Object(cn.a)(a,b),"float32")),b:()=>Object(Ce.a)(t,Object(X.a)(Object(gr.a)(a,b),"float32"))}}},Or={kernelName:xt.Mb,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:o}=n,c=o.map(p=>p[0]);return{x:()=>Object(ve.a)(t,c,r.shape)}}};var xr=n(319);const vr={kernelName:xt.Nb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Object(Mt.a)(a.shape,b.shape);return{a:()=>{const e=Object(Mt.c)(a.shape,n);return e.length>0?Object(_e.a)(Object(Me.a)(t,e),a.shape):t},b:()=>{const e=Object(Ce.a)(t,Object(Ee.a)(Object(xr.a)(Object(div.a)(a,b)))),r=Object(Mt.c)(b.shape,n);return r.length>0?Object(_e.a)(Object(Me.a)(e,r),b.shape):e}}}},jr={kernelName:xt.Ob,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Object(Mt.a)(a.shape,b.shape);return{a:()=>{const e=Object(Ce.a)(t,Object(X.a)(b,"float32")),r=Object(Mt.c)(a.shape,n);return r.length>0?Object(_e.a)(Object(Me.a)(e,r),a.shape):e},b:()=>{const e=Object(Ce.a)(t,Object(X.a)(a,"float32")),r=Object(Mt.c)(b.shape,n);return r.length>0?Object(_e.a)(Object(Me.a)(e,r),b.shape):e}}}},wr={kernelName:xt.Pb,gradFunc:t=>({x:()=>Object(Ee.a)(t)})},Ir={kernelName:xt.Ub,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Object(Dt.a)(n.shape,"float32")}}},kr={kernelName:xt.Vb,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Nr={kernelName:xt.Wb,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:o}=n,c=o.map(p=>p[0]);return{x:()=>Object(ve.a)(t,c,r.shape)}}};var Tr=n(243),Cr=n(227);const $r={kernelName:xt.Xb,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[a,b,n]=e,base=a,r=b,o=Mt.a(base.shape,r.shape);return{a:()=>{const e=Object(X.a)(r,"float32");let n=Object(Ce.a)(t,Object(Ce.a)(e,Object(Cr.a)(base,Object(sub.a)(e,Object(At.a)(1)))));const c=Mt.c(base.shape,o);return c.length>0&&(n=Object(Me.a)(n,c)),Object(_e.a)(n,base.shape)},b:()=>{const e=Object(gr.a)(base,0),c=Object(ln.a)(e,Object(Tr.a)(base),Object(Le.a)(base));let l=Object(Ce.a)(t,Object(Ce.a)(n,c));const d=Mt.c(r.shape,o);return d.length>0&&(l=Object(Me.a)(l,d)),Object(_e.a)(l,r.shape)}}}},Sr={kernelName:xt.Yb,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,mask=Object(gr.a)(n,0);return{x:()=>Object(ln.a)(mask,t,Object(Ce.a)(t,r)),alpha:()=>{let e=Object(ln.a)(mask,Object(Le.a)(t),Object(Ce.a)(t,n));const o=Object(Mt.c)(r.shape,t.shape);return o.length>0&&(e=Object(Me.a)(e,o)),Object(_e.a)(e,r.shape)}}}},Er={kernelName:xt.cc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(Ee.a)(Object(Ae.a)(n)))}}},Rr={kernelName:xt.ec,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,mask=Object(Ce.a)(Object(cn.a)(n,6),Object($e.a)(n));return{x:()=>Object(Ce.a)(t,Object(X.a)(mask,"float32"))}}},Ar={kernelName:xt.dc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object(X.a)(Object($e.a)(n),"float32"))}}},Fr={kernelName:xt.fc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(_e.a)(t,n.shape)}}},Dr={kernelName:xt.gc,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,o=e=>{const{alignCorners:o}=n;return e.resizeBilinearBackprop(t,r,o)},c={images:r};return{images:()=>d.a.runKernelFunc(o,c,null,xt.hc,n)}}},_r={kernelName:xt.ic,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,o=e=>{const{alignCorners:o}=n;return e.resizeNearestNeighborBackprop(t,r,o)},c={images:r};return{images:()=>d.a.runKernelFunc(o,c,null,xt.jc,n)}}};var Mr=n(258);const Pr={kernelName:xt.kc,gradFunc:(t,e,n)=>{const{dims:r}=n,o=Object(T.I)(r,t.shape);return{x:()=>Object(Mr.a)(t,o)}}},Br={kernelName:xt.mc,gradFunc:t=>({x:()=>Object(Le.a)(t)})},Lr={kernelName:xt.nc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ee.a)(Object(div.a)(t,Object(Ce.a)(Object(Cr.a)(n,1.5),2)))}}};var zr=n(266);const Vr={kernelName:xt.pc,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Object(X.a)(Object(Le.a)(n),"float32"),t:()=>Object(Ce.a)(t,Object(X.a)(n,t.dtype)),e:()=>Object(Ce.a)(t,Object(X.a)(Object(zr.a)(n),t.dtype))}}},Wr={kernelName:xt.qc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const mask=Object(gr.a)(n,Object(At.a)(0)),e=Object(At.a)(Yt),r=Object(At.a)(Qt),o=Object(Ce.a)(t,r),c=Object(Ce.a)(Object(Ce.a)(t,e),Object(Dn.a)(Object(X.a)(n,"float32")));return Object(ln.a)(mask,o,c)}}}},Hr={kernelName:xt.rc,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object(Ce.a)(n,Object(sub.a)(Object(At.a)(1),n)))}}},Ur={kernelName:xt.sc,gradFunc:t=>({x:()=>Object(Le.a)(t)})};var Gr=n(289);const qr={kernelName:xt.tc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(Object(Gr.a)(Object(X.a)(n,"float32")),t)}}};var Kr=n(320);const Xr={kernelName:xt.uc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(Object(Kr.a)(Object(X.a)(n,"float32")),t)}}};var Yr=n(290);const Qr={kernelName:xt.vc,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:o,size:c}=n,l=r.shape,[d,h]=Object(Ct.parseSliceParams)(r,o,c),f=[];for(let i=0;i<t.rank;i++)f.push([d[i],l[i]-d[i]-h[i]]);return{x:()=>Object(Yr.a)(t,f)}}},Jr={kernelName:xt.wc,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:o}=n,c=Object(Ce.a)(t,r);return{logits:()=>Object(sub.a)(c,Object(Ce.a)(Object(Me.a)(c,[o],!0),r))}}};var Zr=n(274);const ta={kernelName:xt.xc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object(Zr.a)(n))}}};var ea=n(267);const na={kernelName:xt.yc,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:o}=n;return{x:()=>Object(ea.a)(t,r,o)}}};var ra=n(209);const aa={kernelName:xt.Ac,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>Object(ra.a)(t,r)}}},oa={kernelName:xt.Bc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(Ce.a)(Object(Re.a)(Object(X.a)(n,"float32")),2))}}},sa={kernelName:xt.Cc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(t,Object(Ce.a)(Object(X.a)(n,"float32"),2))}}},ia={kernelName:xt.Dc,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Object(At.a)(2);return{a:()=>Object(Ce.a)(t,Object(Ce.a)(n,Object(sub.a)(a,b))),b:()=>Object(Ce.a)(t,Object(Ce.a)(n,Object(sub.a)(b,a)))}}},ca={kernelName:xt.Ec,gradFunc:t=>({x:()=>Object(Le.a)(t)})},ua={kernelName:xt.Gc,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[a,b]=e,n=Mt.a(a.shape,b.shape);return{a:()=>{let e=t;const r=Mt.c(a.shape,n);return r.length>0&&(e=Object(Me.a)(e,r)),Object(_e.a)(e,a.shape)},b:()=>{let e=t;const r=Mt.c(b.shape,n);return r.length>0&&(e=Object(Me.a)(e,r)),Object(_e.a)(Object(Ee.a)(e),b.shape)}}}};var la=n(241);const da={kernelName:xt.Hc,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,o=r.shape.slice(),{axis:c}=n;Object(T.I)(c,r.shape).forEach(t=>{o[t]=1});const l=Object(_e.a)(t,o),d=Object(Ce.a)(l,Object(la.a)(r.shape,"float32"));return{x:()=>d}}},pa={kernelName:xt.Ic,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(div.a)(t,Object(Ae.a)(Object(Gr.a)(n)))}}},ha={kernelName:xt.Jc,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Object(Ce.a)(Object(sub.a)(Object(At.a)(1),Object(Ae.a)(n)),t)}}},fa={kernelName:xt.Kc,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:o}=n;return{x:()=>{let e=Object(Le.a)(r);if(1===r.rank)for(let i=0;i<o[0];++i)e=Object(He.a)(e,Object(ve.a)(t,[i*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)e=Object(He.a)(e,Object(ve.a)(t,[i*r.shape[0],n*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)for(let c=0;c<o[2];++c)e=Object(He.a)(e,Object(ve.a)(t,[i*r.shape[0],n*r.shape[1],c*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)for(let c=0;c<o[2];++c)for(let l=0;l<o[3];++l)e=Object(He.a)(e,Object(ve.a)(t,[i*r.shape[0],n*r.shape[1],c*r.shape[2],l*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},ma={kernelName:xt.Mc,gradFunc:(t,e,n)=>{const r=n,{perm:o}=r,c=_t.h(o);return{x:()=>Object(Tn.a)(t,c)}}};var ba=n(225);const ga={kernelName:xt.Oc,gradFunc:(t,e,n)=>{const r=n,{axis:o}=r;return{value:()=>Object(ba.a)(t,o)}}};var ya=n(238),Oa=n(291),xa=n(246);const va=[Se,Fe,De,Pe,Be,ze,Ve,We,Ue,Ge,qe,Ke,Ye,Je,tn,nn,rn,an,on,dn,hn,yn,bn,vn,wn,kn,Cn,En,Rn,An,Fn,_n,Mn,Pn,Ln,Bn,Wn,Un,Kn,Xn,Yn,Qn,Jn,Zn,er,nr,ar,ir,ir,ur,dr,fr,mr,yr,Or,vr,jr,wr,Ir,kr,Nr,Nr,$r,Sr,Er,Rr,Ar,Fr,Dr,_r,Pr,Br,Lr,Vr,Wr,Hr,Ur,qr,Xr,Qr,Jr,ta,na,na,aa,aa,oa,ia,sa,ca,ua,da,pa,ha,fa,ma,ga,{kernelName:xt.Pc,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Object(xa.a)(e,Object(Le.a)(e)),r=Object(Oa.a)(t,n);let o=Object(sn.a)(e,Object(At.a)(0,"int32"));const c=r.rank-o.rank;for(let i=0;i<c;++i)o=Object(ya.a)(o,i+1);o=Object(un.a)(o,Object(la.a)(r.shape,"bool"));const l=Object(Le.a)(r);return Object(ln.a)(o,r,l)}(t,n)}}},{kernelName:xt.Qc,gradFunc:t=>({x:()=>Object(Le.a)(t)})}];for(const t of va)Object(vt.d)(t);var ja=n(240);J.a.prototype.abs=function(){return this.throwIfDisposed(),Object(ja.a)(this)};var wa=n(378);J.a.prototype.acos=function(){return this.throwIfDisposed(),Object(wa.a)(this)};var Ia=n(379);J.a.prototype.acosh=function(){return this.throwIfDisposed(),Object(Ia.a)(this)};var ka=n(380);J.a.prototype.addStrict=function(t){return this.throwIfDisposed(),Object(ka.a)(this,t)},J.a.prototype.add=function(b){return this.throwIfDisposed(),Object(He.a)(this,b)};var Na=n(321);J.a.prototype.all=function(t,e){return this.throwIfDisposed(),Object(Na.a)(this,t,e)};var Ta=n(322);J.a.prototype.any=function(t,e){return this.throwIfDisposed(),Object(Ta.a)(this,t,e)};var Ca=n(323);J.a.prototype.argMax=function(t){return this.throwIfDisposed(),Object(Ca.a)(this,t)};var $a=n(324);J.a.prototype.argMin=function(t){return this.throwIfDisposed(),Object($a.a)(this,t)},J.a.prototype.asScalar=function(){return this.throwIfDisposed(),Object(T.b)(1===this.size,()=>"The array must have only 1 element."),Object(_e.a)(this,[])},J.a.prototype.asType=function(t){return this.throwIfDisposed(),Object(X.a)(this,t)},J.a.prototype.as1D=function(){return this.throwIfDisposed(),Object(_e.a)(this,[this.size])},J.a.prototype.as2D=function(t,e){return this.throwIfDisposed(),Object(_e.a)(this,[t,e])},J.a.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),Object(_e.a)(this,[t,e,n])},J.a.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),Object(_e.a)(this,[t,e,n,r])},J.a.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),Object(_e.a)(this,[t,e,n,r,o])};var Sa=n(381);J.a.prototype.asin=function(){return this.throwIfDisposed(),Object(Sa.a)(this)};var Ea=n(382);J.a.prototype.asinh=function(){return this.throwIfDisposed(),Object(Ea.a)(this)};var Ra=n(383);J.a.prototype.atan=function(){return this.throwIfDisposed(),Object(Ra.a)(this)};var Aa=n(325);J.a.prototype.atan2=function(b){return this.throwIfDisposed(),Object(Aa.a)(this,b)};var Fa=n(384);J.a.prototype.atanh=function(){return this.throwIfDisposed(),Object(Fa.a)(this)};var Da=n(293);J.a.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Object(Da.a)(this,t,e,n,r)},J.a.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Object(ea.a)(this,t,e)};var _a=n(370);J.a.prototype.batchNorm=function(t,e,n,r,o){return this.throwIfDisposed(),Object(_a.a)(this,t,e,n,r,o)};var Ma=n(278);J.a.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Object(Ma.a)(this,t)},J.a.prototype.cast=function(t){return this.throwIfDisposed(),Object(X.a)(this,t)};var Pa=n(385);J.a.prototype.ceil=function(){return this.throwIfDisposed(),Object(Pa.a)(this)};var Ba=n(386);J.a.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Object(Ba.a)(this,t,e)},J.a.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof J.a&&(t=[t]),Object(ra.a)([this,...t],e)};var La=n(326);J.a.prototype.conv1d=function(filter,t,e,n,r,o){return this.throwIfDisposed(),Object(La.a)(this,filter,t,e,n,r,o)};var za=n(327);J.a.prototype.conv2dTranspose=function(filter,t,e,n,r){return this.throwIfDisposed(),Object(za.a)(this,filter,t,e,n,r)},J.a.prototype.conv2d=function(filter,t,e,n,r,o){return this.throwIfDisposed(),Object(gn.a)(this,filter,t,e,n,r,o)},J.a.prototype.cos=function(){return this.throwIfDisposed(),Object(Gr.a)(this)},J.a.prototype.cosh=function(){return this.throwIfDisposed(),Object(Kr.a)(this)},J.a.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Object(Nn.a)(this,t,e,n)};var Va=n(328);J.a.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Object(Va.a)(this,t,e)};var Wa=n(245);J.a.prototype.depthwiseConv2D=function(filter,t,e,n,r,o){return Object(Rt.a)("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Object(Wa.a)(this,filter,t,e,n,r,o)},J.a.prototype.depthwiseConv2d=function(filter,t,e,n,r,o){return this.throwIfDisposed(),Object(Wa.a)(this,filter,t,e,n,r,o)};var Ha=n(329);J.a.prototype.dilation2d=function(filter,t,e,n,r){return this.throwIfDisposed(),Object(Ha.a)(this,filter,t,e,n,r)};var Ua=n(330);J.a.prototype.divNoNan=function(b){return this.throwIfDisposed(),Object(Ua.a)(this,b)},J.a.prototype.divStrict=function(t){return this.throwIfDisposed(),Object(ka.b)(this,t)},J.a.prototype.div=function(b){return this.throwIfDisposed(),Object(div.a)(this,b)};var Ga=n(331);J.a.prototype.dot=function(b){return this.throwIfDisposed(),Object(Ga.a)(this,b)};var qa=n(284);J.a.prototype.elu=function(){return this.throwIfDisposed(),Object(qa.a)(this)};var Ka=n(387);J.a.prototype.equalStrict=function(t){return this.throwIfDisposed(),Object(Ka.a)(this,t)},J.a.prototype.equal=function(b){return this.throwIfDisposed(),Object(or.a)(this,b)};var Xa=n(388);J.a.prototype.erf=function(){return this.throwIfDisposed(),Object(Xa.a)(this)},J.a.prototype.exp=function(){return this.throwIfDisposed(),Object(Dn.a)(this)},J.a.prototype.expandDims=function(t){return this.throwIfDisposed(),Object(ya.a)(this,t)};var Ya=n(389);J.a.prototype.expm1=function(){return this.throwIfDisposed(),Object(Ya.a)(this)};var Qa=n(275);J.a.prototype.fft=function(){return this.throwIfDisposed(),Object(Qa.a)(this)},J.a.prototype.flatten=function(){return this.throwIfDisposed(),Object(_e.a)(this,[this.size])},J.a.prototype.floor=function(){return this.throwIfDisposed(),Object(xr.a)(this)};var Ja=n(273);J.a.prototype.floorDiv=function(b){return this.throwIfDisposed(),Object(Ja.a)(this,b)},J.a.prototype.gather=function(t,e){return this.throwIfDisposed(),Object(Oa.a)(this,t,e)},J.a.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),Object(Ka.b)(this,t)},J.a.prototype.greaterEqual=function(b){return this.throwIfDisposed(),Object(sn.a)(this,b)},J.a.prototype.greaterStrict=function(t){return this.throwIfDisposed(),Object(Ka.c)(this,t)},J.a.prototype.greater=function(b){return this.throwIfDisposed(),Object(gr.a)(this,b)};var Za=n(276);J.a.prototype.ifft=function(){return this.throwIfDisposed(),Object(Za.a)(this)};var to=n(308);J.a.prototype.irfft=function(){return this.throwIfDisposed(),Object(to.a)(this)};var eo=n(390);J.a.prototype.isFinite=function(){return this.throwIfDisposed(),Object(eo.a)(this)};var no=n(391);J.a.prototype.isInf=function(){return this.throwIfDisposed(),Object(no.a)(this)};var ro=n(392);J.a.prototype.isNaN=function(){return this.throwIfDisposed(),Object(ro.a)(this)};var ao=n(332);J.a.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Object(ao.a)(this,t)},J.a.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),Object(Ka.d)(this,t)},J.a.prototype.lessEqual=function(b){return this.throwIfDisposed(),Object(cn.a)(this,b)},J.a.prototype.lessStrict=function(t){return this.throwIfDisposed(),Object(Ka.e)(this,t)},J.a.prototype.less=function(b){return this.throwIfDisposed(),Object(cr.a)(this,b)};var oo=n(333);J.a.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),Object(oo.a)(this,t,e,n,r)};var so=n(393);J.a.prototype.logSigmoid=function(){return this.throwIfDisposed(),Object(so.a)(this)};var io=n(394);J.a.prototype.logSoftmax=function(t){return this.throwIfDisposed(),Object(io.a)(this,t)};var co=n(283);J.a.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Object(co.a)(this,t,e)},J.a.prototype.log=function(){return this.throwIfDisposed(),Object(Tr.a)(this)};var uo=n(309);J.a.prototype.log1p=function(){return this.throwIfDisposed(),Object(uo.a)(this)},J.a.prototype.logicalAnd=function(b){return this.throwIfDisposed(),Object(un.a)(this,b)},J.a.prototype.logicalNot=function(){return this.throwIfDisposed(),Object(zr.a)(this)};var lo=n(294);J.a.prototype.logicalOr=function(b){return this.throwIfDisposed(),Object(lo.a)(this,b)};var po=n(335);J.a.prototype.logicalXor=function(b){return this.throwIfDisposed(),Object(po.a)(this,b)},J.a.prototype.matMul=function(b,t,e){return this.throwIfDisposed(),Object(Ze.a)(this,b,t,e)};var ho=n(295);J.a.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Object(ho.a)(this,t,e,n,r)};var fo=n(236);J.a.prototype.max=function(t,e){return this.throwIfDisposed(),Object(fo.a)(this,t,e)},J.a.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Object(ka.c)(this,t)},J.a.prototype.maximum=function(b){return this.throwIfDisposed(),Object(xa.a)(this,b)};var mo=n(282);J.a.prototype.mean=function(t,e){return this.throwIfDisposed(),Object(mo.a)(this,t,e)};var bo=n(281);J.a.prototype.min=function(t,e){return this.throwIfDisposed(),Object(bo.a)(this,t,e)},J.a.prototype.minimumStrict=function(t){return this.throwIfDisposed(),Object(ka.d)(this,t)};var go=n(261);J.a.prototype.minimum=function(b){return this.throwIfDisposed(),Object(go.a)(this,b)};var yo=n(336);J.a.prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),Object(yo.a)(this,t,e)},J.a.prototype.modStrict=function(t){return this.throwIfDisposed(),Object(ka.e)(this,t)};var Oo=n(292);J.a.prototype.mod=function(b){return this.throwIfDisposed(),Object(Oo.a)(this,b)},J.a.prototype.mulStrict=function(t){return this.throwIfDisposed(),Object(ka.f)(this,t)},J.a.prototype.mul=function(b){return this.throwIfDisposed(),Object(Ce.a)(this,b)},J.a.prototype.neg=function(){return this.throwIfDisposed(),Object(Ee.a)(this)};var xo=n(280);J.a.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Object(xo.a)(this,t,e,n)},J.a.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Object(Ka.f)(this,t)};var vo=n(260);J.a.prototype.notEqual=function(b){return this.throwIfDisposed(),Object(vo.a)(this,b)};var jo=n(337);J.a.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Object(jo.a)(this,t,e,n)};var wo=n(395);J.a.prototype.onesLike=function(){return this.throwIfDisposed(),Object(wo.a)(this)},J.a.prototype.pad=function(t,e){return this.throwIfDisposed(),Object(Yr.a)(this,t,e)};var Io=n(338);J.a.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),Object(Io.a)(this,t,e,n,r,o)},J.a.prototype.powStrict=function(t){return this.throwIfDisposed(),Object(ka.g)(this,t)},J.a.prototype.pow=function(t){return this.throwIfDisposed(),Object(Cr.a)(this,t)};var ko=n(286);J.a.prototype.prelu=function(t){return this.throwIfDisposed(),Object(ko.a)(this,t)};var No=n(339);J.a.prototype.prod=function(t,e){return this.throwIfDisposed(),Object(No.a)(this,t,e)};var To=n(396);J.a.prototype.reciprocal=function(){return this.throwIfDisposed(),Object(To.a)(this)};var Co=n(242);J.a.prototype.relu=function(){return this.throwIfDisposed(),Object(Co.a)(this)};var $o=n(285);J.a.prototype.relu6=function(){return this.throwIfDisposed(),Object($o.a)(this)},J.a.prototype.reshapeAs=function(t){return this.throwIfDisposed(),Object(_e.a)(this,t.shape)},J.a.prototype.reshape=function(t){return this.throwIfDisposed(),Object(_e.a)(this,t)};var So=n(375);J.a.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),Object(So.a)(this,t,e)};var Eo=n(374);J.a.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Object(Eo.a)(this,t,e)},J.a.prototype.reverse=function(t){return this.throwIfDisposed(),Object(Mr.a)(this,t)};var Ro=n(277);J.a.prototype.rfft=function(){return this.throwIfDisposed(),Object(Ro.a)(this)};var Ao=n(397);J.a.prototype.round=function(){return this.throwIfDisposed(),Object(Ao.a)(this)},J.a.prototype.rsqrt=function(){return this.throwIfDisposed(),Object(zn.a)(this)};var Fo=n(340);J.a.prototype.selu=function(){return this.throwIfDisposed(),Object(Fo.a)(this)};var Do=n(341);J.a.prototype.separableConv2d=function(t,e,n,r,o,c){return this.throwIfDisposed(),Object(Do.a)(this,t,e,n,r,o,c)},J.a.prototype.sigmoid=function(){return this.throwIfDisposed(),Object(Zr.a)(this)};var _o=n(398);J.a.prototype.sign=function(){return this.throwIfDisposed(),Object(_o.a)(this)},J.a.prototype.sin=function(){return this.throwIfDisposed(),Object(jn.a)(this)},J.a.prototype.sinh=function(){return this.throwIfDisposed(),Object(In.a)(this)},J.a.prototype.slice=function(t,e){return this.throwIfDisposed(),Object(ve.a)(this,t,e)};var Mo=n(373);J.a.prototype.softmax=function(t){return this.throwIfDisposed(),Object(Mo.a)(this,t)};var Po=n(334);J.a.prototype.softplus=function(){return this.throwIfDisposed(),Object(Po.a)(this)},J.a.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Object(en.a)(this,t,e)},J.a.prototype.split=function(t,e){return this.throwIfDisposed(),Object(pn.a)(this,t,e)},J.a.prototype.sqrt=function(){return this.throwIfDisposed(),Object(Re.a)(this)},J.a.prototype.square=function(){return this.throwIfDisposed(),Object(Ae.a)(this)};var Bo=n(262);J.a.prototype.squaredDifference=function(b){return this.throwIfDisposed(),Object(Bo.a)(this,b)},J.a.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Object(ka.h)(this,t)};var Lo=n(279);J.a.prototype.squeeze=function(t){return this.throwIfDisposed(),Object(Lo.a)(this,t)},J.a.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof J.a?[this,t]:[this,...t];return Object(ba.a)(n,e)},J.a.prototype.step=function(t){return this.throwIfDisposed(),Object($e.a)(this,t)};var zo=n(399);J.a.prototype.stridedSlice=function(t,e,n,r,o,c,l,d){return this.throwIfDisposed(),Object(zo.a)(this,t,e,n,r,o,c,l,d)},J.a.prototype.subStrict=function(t){return this.throwIfDisposed(),Object(ka.i)(this,t)},J.a.prototype.sub=function(b){return this.throwIfDisposed(),Object(sub.a)(this,b)},J.a.prototype.sum=function(t,e){return this.throwIfDisposed(),Object(Me.a)(this,t,e)};var Vo=n(400);J.a.prototype.tan=function(){return this.throwIfDisposed(),Object(Vo.a)(this)};var Wo=n(401);J.a.prototype.tanh=function(){return this.throwIfDisposed(),Object(Wo.a)(this)},J.a.prototype.tile=function(t){return this.throwIfDisposed(),Object(Vn.a)(this,t)},J.a.prototype.toBool=function(){return this.throwIfDisposed(),Object(X.a)(this,"bool")},J.a.prototype.toFloat=function(){return this.throwIfDisposed(),Object(X.a)(this,"float32")},J.a.prototype.toInt=function(){return this.throwIfDisposed(),Object(X.a)(this,"int32")};var Ho=n(342);J.a.prototype.topk=function(t,e){return this.throwIfDisposed(),Object(Ho.a)(this,t,e)},J.a.prototype.transpose=function(t){return this.throwIfDisposed(),Object(Tn.a)(this,t)};var Uo=n(343);J.a.prototype.unique=function(t){return this.throwIfDisposed(),Object(Uo.a)(this,t)},J.a.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Object(Hn.a)(this,t,e)};var Go=n(255);J.a.prototype.unstack=function(t){return this.throwIfDisposed(),Object(Go.a)(this,t)},J.a.prototype.where=function(t,e){return this.throwIfDisposed(),Object(ln.a)(t,this,e)},J.a.prototype.zerosLike=function(){return this.throwIfDisposed(),Object(Le.a)(this)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(181),o=n(271);function c(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const c=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const l=(...t)=>{r.a.startScope(n);try{const e=c(...t);return Object(o.x)(e)&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(e),e}catch(t){throw r.a.endScope(null),t}};return Object.defineProperty(l,"name",{value:n,configurable:!0}),l}},function(t,e,n){"use strict";n.d(e,"c",(function(){return h})),n.d(e,"a",(function(){return m})),n.d(e,"b",(function(){return y}));var r=n(181),o=n(199),c=n(180),l=n(271),d=n(182);function h(t,e){let n=t;if(Object(l.A)(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Object(l.A)(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Object(o.b)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!Object(l.A)(e))return void Object(l.b)(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);Object(l.b)(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),Object(l.b)(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const o=n.slice(1);for(let i=0;i<e.length;++i)t(e[i],o,r.concat(i))}(t,r,[]),r}function f(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function m(t,e,n,o="numeric"){if(t instanceof c.a)return f(o,t.dtype,e,n),t;let m=Object(l.r)(t);if("string"!==m&&["bool","int32","float32"].indexOf(o)>=0&&(m=o),f(o,m,e,n),null==t||!Object(l.A)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const y=h(t,m);Object(l.A)(t)||Array.isArray(t)||(t=[t]);const O="string"!==m?Object(d.toTypedArray)(t,m):Object(l.m)(t,[],!0);return r.a.makeTensor(O,y,m)}function y(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,i)=>m(t,`${e}[${i}]`,n),r)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"f",(function(){return x})),n.d(e,"e",(function(){return v})),n.d(e,"d",(function(){return j})),n.d(e,"a",(function(){return w})),n.d(e,"c",(function(){return I}));var r=n(271);function o(t,e,n,o){const h=Object(r.j)(e),f=function(t,e,n,o){const l=Object(r.N)(e),h=o[o.length-1],f=new Array(h).fill(0),m=e.length,y="complex64"===n?d(t):t;if(m>1)for(let t=0;t<l/h;t++){const e=t*h;for(let t=0;t<h;t++)f[t]=Math.max(f[t],c(y[e+t],0,n).length)}return f}(t,e,n,h),m=e.length,y=function t(e,n,r,o,h,f=!0){const m="complex64"===r?2:1,y=n[0],O=n.length;if(0===O){if("complex64"===r){return[c(d(e)[0],0,r)]}return"bool"===r?[l(e[0])]:[e[0].toString()]}if(1===O){if(y>20){const t=3*m;let n=Array.from(e.slice(0,t)),o=Array.from(e.slice((y-3)*m,y*m));return"complex64"===r&&(n=d(n),o=d(o)),["["+n.map((t,i)=>c(t,h[i],r)).join(", ")+", ..., "+o.map((t,i)=>c(t,h[y-3+i],r)).join(", ")+"]"]}return["["+("complex64"===r?d(e):Array.from(e)).map((t,i)=>c(t,h[i],r)).join(", ")+"]"]}const x=n.slice(1),v=o.slice(1),j=o[0]*m,w=[];if(y>20){for(let i=0;i<3;i++){const n=i*j,o=n+j;w.push(...t(e.slice(n,o),x,r,v,h,!1))}w.push("...");for(let i=y-3;i<y;i++){const n=i*j,o=n+j;w.push(...t(e.slice(n,o),x,r,v,h,i===y-1))}}else for(let i=0;i<y;i++){const n=i*j,o=n+j;w.push(...t(e.slice(n,o),x,r,v,h,i===y-1))}const I=2===O?",":"";w[0]="["+w[0]+I;for(let i=1;i<w.length-1;i++)w[i]=" "+w[i]+I;let k=",\n";for(let i=2;i<O;i++)k+="\n";return w[w.length-1]=" "+w[w.length-1]+"]"+(f?"":k),w}(t,e,n,h,f),O=["Tensor"];return o&&(O.push("  dtype: "+n),O.push("  rank: "+m),O.push(`  shape: [${e}]`),O.push("  values:")),O.push(y.map(t=>"    "+t).join("\n")),O.join("\n")}function c(t,e,n){let o;return o=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Object(r.z)(t)?`'${t}'`:"bool"===n?l(t):parseFloat(t.toFixed(7)).toString(),Object(r.L)(o,e)}function l(t){return 0===t?"false":"true"}function d(t){const e=[];for(let i=0;i<t.length;i+=2)e.push([t[i],t[i+1]]);return e}var h=n(182);class f{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=r.N(t),null!=n){const t=n.length;r.b(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.n(e,this.size),this.strides=Object(r.j)(t)}set(t,...e){0===e.length&&(e=[0]),r.b(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let i=0;for(const e of t){if(e<0||e>=this.shape[i]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}i++}let e=t[t.length-1];for(let i=0;i<t.length-1;++i)e+=this.strides[i]*t[i];return this.values[e]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let i=0;i<t.length-1;++i)e+=this.strides[i]*t[i];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let i=0;i<e.length-1;++i)e[i]=Math.floor(t/this.strides[i]),t-=e[i]*this.strides[i];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return m().makeTensor(this.values,this.shape,this.dtype)}}let m=null,y=null,O=null;function x(t){m=t}function v(t){y=t}function j(t){O=t}class w{constructor(t,e,n,o){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=r.N(t),this.strides=Object(r.j)(t),this.dataId=n,this.id=o,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return y.buffer(this.shape,this.dtype,t)}bufferSync(){return y.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Object(r.S)(this.shape,t)}arraySync(){return Object(r.S)(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const data=m().read(this.dataId);if("string"===this.dtype){const t=await data;try{return t.map(b=>h.decodeString(b))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return data}dataSync(){this.throwIfDisposed();const data=m().readSync(this.dataId);if("string"===this.dtype)try{return data.map(b=>h.decodeString(b))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return data}async bytes(){this.throwIfDisposed();const data=await m().read(this.dataId);return"string"===this.dtype?data:new Uint8Array(data.buffer)}dispose(){this.isDisposed||(m().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return y.print(this,t)}clone(){return this.throwIfDisposed(),y.clone(this)}toString(t=!1){return o(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),y.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),m().makeVariable(this,t,e,n)}}Object.defineProperty(w,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class I extends w{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!r.a(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);m().disposeTensor(this),this.dataId=t.dataId,m().incRef(this,null)}dispose(){m().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(I,Symbol.hasInstance,{value:t=>t instanceof w&&null!=t.assign&&t.assign instanceof Function})},function(t,e,n){"use strict";n.d(e,"b",(function(){return I})),n.d(e,"a",(function(){return k}));var r=n(272),o=n(199),c=n(371),l=n(176),d=n(252),h=n(271);class f{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new y)}profileKernel(t,e,n){let r;const o=this.backendTimer.time(()=>{r=n()});for(let i=0;i<r.length;i++){const output=r[i];output.data().then(e=>{m(e,output.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:o.then(t=>t.kernelMs),extraInfo:o.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:o,extraInfo:c}=t;n.forEach(t=>{Promise.all([t.data(),r,c]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],o,n[2])})})}}function m(t,e,n){if("float32"!==e)return!1;for(let i=0;i<t.length;i++){const e=t[i];if(isNaN(e)||!isFinite(e))return console.warn(`Found ${e} in the result of '${n}'`),!0}return!1}class y{logKernelProfile(t,e,n,r,o,c){const time="number"==typeof r?h.L(r+"ms",9):r.error,l=h.L(t,25),d=e.rank,f=e.size,m=h.L(e.shape.toString(),14);let y="";for(const t in o){const input=o[t];if(null!=input){const n=input.shape||e.shape,r=n.length;y+=`${t}: ${r}D ${r>0?n:""} `}}console.log(`%c${l}\t%c${time}\t%c${d}D ${m}\t%c${f}\t%c${y}\t%c${c}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var O=n(180),x=n(193),v=n(182);class j{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class w{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new j}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let i=0;i<t.length;i++){const e=t[i];if(await this.initializeBackend(e).success)return void await this.setBackend(e)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new f(this.backendInstance),!0}setupRegisteredKernels(){Object(d.c)(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Object(d.c)(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof r.b||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((a,b)=>this.registryFactory[b].priority-this.registryFactory[a].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let i=0;i<t.length;i++){const e=t[i],{success:n,asyncInit:r}=this.initializeBackend(e);if(r||n)return{name:e,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return w.nextTensorId++}nextVariableId(){return w.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e={x:t},n={dtype:"float32"};return k.runKernelFunc(e=>e.cast(t,"float32"),e,null,l.v,n)}}),[],{}),e}runKernel(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let o=0;n.forEach(t=>{o+="complex64"===t.dtype?3:1});const c=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],l=r-e-o-c;if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,o,c,l){let h,f=[];const m=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const y=this.state.numBytes,O=this.state.numTensors;let x;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const v=Object(d.b)(r,this.backendName);let j,w;if(null!=v)x=()=>{const t=this.backend.numDataIds();j=v.kernelFunc({inputs:e,attrs:o,backend:this.backend});const n=Array.isArray(j)?j:[j];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const d=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(m){let t=this.getTensorsForGradient(r,e,d);if(null==t){null==l&&(l=[]);const e=d.filter((t,i)=>l[i]);t=(c||[]).slice().concat(e)}f=this.saveTensorsForBackwardMode(t)}return d};else{const e=t=>{m&&(f=t.map(t=>this.keep(this.clone(t))))};x=()=>{const n=this.backend.numDataIds();j=this.tidy(()=>t(this.backend,e));const o=Array.isArray(j)?j:[j];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,o),o}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(w=this.profiler.profileKernel(r,e,()=>x()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(w),h=w.outputs):h=x()}),m&&this.addTapeNode(r,e,h,n,f,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-y,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-O,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:h.map(t=>t.shape),kernelTimeMs:w.timeMs,extraInfo:w.extraInfo}),Array.isArray(j)?h:h[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=Object(d.a)(t);if(null!=r){const t=r.inputsToSave||[],o=r.outputsToSave||[];let c;r.saveAllInputs?(h.b(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),c=Object.keys(e).map(t=>e[t])):c=t.map(t=>e[t]);const l=n.filter((t,i)=>o[i]);return c.concat(l)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let o=t;"string"===n&&h.z(t[0])&&(o=t.map(t=>v.encodeString(t)));const c=r.write(o,e,n),l=new O.a(e,n,c,this.nextTensorId());if(this.incRef(l,r),"string"===n){const t=this.state.tensorInfo.get(c),e=Object(h.f)(o);this.state.numBytes+=e-t.bytes,t.bytes=e}return l}makeTensorFromDataId(t,e,n,r){n=n||"float32";const o=new O.a(e,n,t,this.nextTensorId());return this.incRef(o,r),o}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const o=new O.c(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}incRef(a,t){const e=this.state.tensorInfo.has(a.dataId)?this.state.tensorInfo.get(a.dataId).refCount:0;if(this.state.numTensors++,"string"===a.dtype&&this.state.numStringTensors++,0===e){this.state.numDataBuffers++;let e=0;"complex64"!==a.dtype&&"string"!==a.dtype&&(e=a.size*h.g(a.dtype)),this.state.tensorInfo.set(a.dataId,{backend:t||this.backend,dtype:a.dtype,shape:a.shape,bytes:e,refCount:0}),this.state.numBytes+=e}this.state.tensorInfo.get(a.dataId).refCount++,a instanceof O.c||this.track(a)}disposeTensor(a){if(!this.state.tensorInfo.has(a.dataId))return;this.state.numTensors--,"string"===a.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(a.dataId);t.refCount<=1?("complex64"!==a.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(a.dataId),this.state.tensorInfo.delete(a.dataId)):this.state.tensorInfo.get(a.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,o,c){const l={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},f=Object(d.a)(t);null!=f&&(r=f.gradFunc),null!=r&&(l.gradient=t=>(t=t.map((t,i)=>{if(null==t){const output=n[i],t=h.F(output.size,output.dtype);return this.makeTensor(t,output.shape,output.dtype)}return t}),r(t.length>1?t:t[0],o,c))),this.state.activeTape.push(l)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Object(x.a)(t),n=new Set(e.map(t=>t.id));for(let i=0;i<this.state.activeScope.track.length;i++){const t=this.state.activeScope.track[i];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(h.b(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));h.b(o instanceof O.a,()=>"The result y returned by f() must be a tensor.");const c=function(t,e,n){const r={},o={};for(let i=0;i<e.length;i++)r[e[i].id]=!0;for(let i=0;i<t.length;i++){const n=t[i],c=n.inputs;for(const t in c){const input=c[t];let l=!1;for(let t=0;t<e.length;t++)if(r[input.id]){n.outputs.forEach(output=>r[output.id]=!0),l=!0,o[n.id]=!0;break}if(l)break}}const c={};c[n.id]=!0;const l={};for(let i=t.length-1;i>=0;i--){const e=t[i],n=e.inputs;for(let t=0;t<e.outputs.length;t++)if(c[e.outputs[t].id]){for(const t in n)c[n[t].id]=!0,l[e.id]=!0;break}}const d=[];for(let i=0;i<t.length;i++){const e=t[i];if(o[e.id]&&l[e.id]){const t={};for(const n in e.inputs){const o=e.inputs[n];r[o.id]&&(t[n]=o)}const n=Object.assign({},e);n.inputs=t,n.outputs=e.outputs,d.push(n)}}return d}(this.state.activeTape,e,o);if(!r&&0===c.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[o.id]=null==n?function(t){const e=Object(h.D)(Object(h.N)(t),"float32");return k.makeTensor(e,t,"float32")}(o.shape):n,function(t,e,n,r){for(let i=e.length-1;i>=0;i--){const o=e[i],c=[];if(o.outputs.forEach(e=>{const n=t[e.id];null!=n?c.push(n):c.push(null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const l=o.gradient(c);for(const e in o.inputs){if(!(e in l))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(l)}.`);const c=n(()=>l[e]());if("float32"!==c.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${c.dtype}'`);const d=o.inputs[e];if(!h.a(c.shape,d.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${e}' has shape '${c.shape}', which does not match the shape of the input '${d.shape}'`);if(null==t[d.id])t[d.id]=c;else{const e=t[d.id];t[d.id]=r(e,c),e.dispose()}}}}(t,c,t=>this.tidy(t),N);const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:o,grads:r}})}customGrad(t){return h.b(h.u(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;h.b(e.every(t=>t instanceof O.a),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((input,i)=>{r[i]=input}),this.runKernelFunc((r,o)=>(n=t(...e,o),h.b(n.value instanceof O.a,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),h.b(h.u(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const o=n.gradFunc(t,r),c=Array.isArray(o)?o:[o];h.b(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),h.b(c.every(t=>t instanceof O.a),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const l={};return c.forEach((t,i)=>{l[i]=()=>t}),l})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Object(v.now)(),n=await this.backend.time(t);return n.wallMs=Object(v.now)()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new j;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function I(){const t=Object(c.b)();if(null==t._tfengine){const e=new o.a(t);t._tfengine=new w(e)}return Object(o.c)(t._tfengine.ENV),Object(O.f)(()=>t._tfengine),t._tfengine}w.nextTensorId=0,w.nextVariableId=0;const k=I();function N(a,b){const t={a:a,b:b};return k.runKernelFunc((t,e)=>{const n=t.add(a,b);return e([a,b]),n},t,null,l.d)}},function(t,e,n){"use strict";n.r(e),n.d(e,"createScalarValue",(function(){return c})),n.d(e,"toTypedArray",(function(){return l})),n.d(e,"now",(function(){return d})),n.d(e,"fetch",(function(){return h})),n.d(e,"encodeString",(function(){return f})),n.d(e,"decodeString",(function(){return m}));var r=n(199),o=n(271);function c(t,e){return"string"===e?f(t):l([t],e)}function l(a,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(a)&&(a=o.m(a)),Object(r.b)().getBool("DEBUG")&&o.h(a,t),function(a,t){return a instanceof Float32Array&&"float32"===t||a instanceof Int32Array&&"int32"===t||a instanceof Uint8Array&&"bool"===t}(a,t))return a;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(a);if("int32"===t)return new Int32Array(a);if("bool"===t){const t=new Uint8Array(a.length);for(let i=0;i<t.length;++i)0!==Math.round(a[i])&&(t[i]=1);return t}throw new Error("Unknown data type "+t)}function d(){return Object(r.b)().platform.now()}function h(path,t){return Object(r.b)().platform.fetch(path,t)}function f(s,t="utf-8"){return t=t||"utf-8",Object(r.b)().platform.encode(s,t)}function m(t,e="utf-8"){return e=e||"utf-8",Object(r.b)().platform.decode(t,e)}n.d(e,"shuffle",(function(){return o.M})),n.d(e,"clamp",(function(){return o.i})),n.d(e,"nearestLargerEven",(function(){return o.H})),n.d(e,"sum",(function(){return o.Q})),n.d(e,"randUniform",(function(){return o.J})),n.d(e,"distSquared",(function(){return o.l})),n.d(e,"assert",(function(){return o.b})),n.d(e,"assertShapesMatch",(function(){return o.e})),n.d(e,"assertNonNull",(function(){return o.d})),n.d(e,"flatten",(function(){return o.m})),n.d(e,"sizeFromShape",(function(){return o.N})),n.d(e,"isScalarShape",(function(){return o.y})),n.d(e,"arraysEqual",(function(){return o.a})),n.d(e,"isInt",(function(){return o.v})),n.d(e,"tanh",(function(){return o.R})),n.d(e,"sizeToSquarishShape",(function(){return o.O})),n.d(e,"createShuffledIndices",(function(){return o.k})),n.d(e,"rightPad",(function(){return o.L})),n.d(e,"repeatedTry",(function(){return o.K})),n.d(e,"inferFromImplicitShape",(function(){return o.s})),n.d(e,"parseAxisParam",(function(){return o.I})),n.d(e,"squeezeShape",(function(){return o.P})),n.d(e,"getTypedArrayFromDType",(function(){return o.o})),n.d(e,"getArrayFromDType",(function(){return o.n})),n.d(e,"checkConversionForErrors",(function(){return o.h})),n.d(e,"isValidDtype",(function(){return o.B})),n.d(e,"hasEncodingLoss",(function(){return o.p})),n.d(e,"isTypedArray",(function(){return o.A})),n.d(e,"bytesPerElement",(function(){return o.g})),n.d(e,"bytesFromStringArray",(function(){return o.f})),n.d(e,"isString",(function(){return o.z})),n.d(e,"isBoolean",(function(){return o.t})),n.d(e,"isNumber",(function(){return o.w})),n.d(e,"inferDtype",(function(){return o.r})),n.d(e,"isFunction",(function(){return o.u})),n.d(e,"nearestDivisor",(function(){return o.G})),n.d(e,"computeStrides",(function(){return o.j})),n.d(e,"toNestedArray",(function(){return o.S})),n.d(e,"makeOnesTypedArray",(function(){return o.D})),n.d(e,"makeZerosTypedArray",(function(){return o.F})),n.d(e,"makeZerosNestedTypedArray",(function(){return o.E})),n.d(e,"assertNonNegativeIntegerDimensions",(function(){return o.c})),n.d(e,"locToIndex",(function(){return o.C})),n.d(e,"indexToLoc",(function(){return o.q})),n.d(e,"isPromise",(function(){return o.x}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({reshape_:function(t,e){const n=Object(c.a)(t,"x","reshape",null),d={x:n},h={shape:e};return r.a.runKernelFunc((t,r)=>(e=l.s(e,n.size),l.b(n.size===l.N(e),()=>"new shape and old shape must have the same number of elements."),r([n]),t.reshape(n,e)),d,null,o.fc,h)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o.a})),n.d(e,"b",(function(){return c.a})),n.d(e,"c",(function(){return l.a})),n.d(e,"d",(function(){return d.a})),n.d(e,"e",(function(){return f})),n.d(e,"f",(function(){return div.a})),n.d(e,"g",(function(){return m.a})),n.d(e,"h",(function(){return y.a})),n.d(e,"i",(function(){return O.a})),n.d(e,"l",(function(){return x.a})),n.d(e,"m",(function(){return v.a})),n.d(e,"n",(function(){return j.a})),n.d(e,"o",(function(){return w.a})),n.d(e,"p",(function(){return I.a})),n.d(e,"q",(function(){return k.a})),n.d(e,"r",(function(){return N.a})),n.d(e,"s",(function(){return T.a})),n.d(e,"t",(function(){return C.a})),n.d(e,"u",(function(){return sub.a})),n.d(e,"v",(function(){return $.a})),n.d(e,"w",(function(){return S.a})),n.d(e,"x",(function(){return F})),n.d(e,"y",(function(){return D})),n.d(e,"A",(function(){return _.a})),n.d(e,"B",(function(){return M.a})),n.d(e,"z",(function(){return P.a})),n.d(e,"k",(function(){return ee})),n.d(e,"j",(function(){return r}));var r={};n.r(r),n.d(r,"conv2d",(function(){return tt})),n.d(r,"depthwiseConv2d",(function(){return ot})),n.d(r,"matMul",(function(){return it}));var o=n(200),c=n(216),l=n(234),d=n(209),h=n(178);const f=Object(h.a)({concat2d_:function(t,e){return Object(d.a)(t,e)}});var div=n(194),m=n(235),y=n(213),O=n(305),x=n(236),v=n(185),j=n(306),w=n(183),I=n(190),k=n(274),N=n(206),T=n(373),C=n(225),sub=n(191),$=n(254),S=n(237),E=n(179),R=n(271),A=n(233);function F(t,e,n){if(Object(R.d)(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(E.c)(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(A.a)(t,e,r,n)}function D(t,e,n){if(Object(R.d)(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(E.c)(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Object(A.a)(t,e,r,n)}var _=n(255),M=n(217),P=n(203),B=n(277),L=n(275),z=n(276),V=n(308),W=n(181),H=n(205),U=n(176),G=n(193),K=n(189),X=n(230),Y=n(311),Q=n(310),J=n(192),Z=n(229);const tt=Object(h.a)({fusedConv2d_:function({x:t,filter:filter,strides:e,pad:n,dataFormat:r="NHWC",dilations:c=[1,1],dimRoundingMode:l,bias:d,activation:h="linear",preluActivationWeights:f}){if(h=h||"linear",!1===Object(Z.d)(W.a.state.gradientDepth,h)){let m=Object(X.a)(t,filter,e,n,r,c,l);return null!=d&&(m=Object(o.a)(m,d)),Object(Z.a)(m,h,f)}const m=Object(E.a)(t,"x","conv2d"),y=Object(E.a)(filter,"filter","conv2d");let O=m,x=!1;3===m.rank&&(x=!0,O=Object(w.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),R.b(4===O.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+O.rank+"."),R.b(4===y.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+y.rank+"."),null!=l&&R.b(R.v(n),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${l} but got pad ${n}.`),R.b(O.shape[3]===y.shape[2],()=>`Error in conv2d: depth of input (${O.shape[3]}) must match input depth for filter ${y.shape[2]}.`),R.b(J.h(e,c),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${c}'`),R.b("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const v=J.a(O.shape,y.shape,e,c,n,l);let j,I;null!=d&&(j=Object(E.a)(d,"bias","fused conv2d"),[j]=Object(G.b)(j,m),K.a(v.outShape,j.shape)),null!=f&&(I=Object(E.a)(f,"prelu weights","fused conv2d"));const k=(t,r)=>{const[o,l,d,f]=r,m=Object(Z.c)(t,d,h);R.b(J.i(c),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${c}'`);const y=[Object(Q.a)(l.shape,m,o,e,n),Object(Y.a)(l,m,o.shape,e,n)];if(null!=f){const t=Object(Z.b)(f,m);y.push(t)}return y},N=t=>t.fusedConv2d({input:O,filter:y,convInfo:v,bias:j,activation:h,preluActivationWeights:I}),T={x:O,filter:y,bias:j,preluActivationWeights:I},C={strides:e,pad:n,dataFormat:r,dilations:c,dimRoundingMode:l,activation:h};if(null==d){return Object(H.a)((t,filter,e)=>{let n=W.a.runKernelFunc(N,T,null,U.fb,C);return e([filter,t,n]),x&&(n=Object(w.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:k}})(O,y)}return Object(H.a)((t,filter,e,n)=>{let r=W.a.runKernelFunc(N,T,null,U.fb,C);return n([filter,t,r,e]),x&&(r=Object(w.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}})(O,y,j)}});var et=n(245),nt=n(377),at=n(376);const ot=Object(h.a)({fusedDepthwiseConv2d_:function({x:t,filter:filter,strides:e,pad:n,dataFormat:r="NHWC",dilations:c=[1,1],dimRoundingMode:l,bias:d,activation:h="linear",preluActivationWeights:f}){if(!1===Object(Z.d)(W.a.state.gradientDepth,h)){let m=Object(et.a)(t,filter,e,n,r,c,l);return null!=d&&(m=Object(o.a)(m,d)),Object(Z.a)(m,h,f)}const m=Object(E.a)(t,"x","depthwiseConv2d"),y=Object(E.a)(filter,"filter","depthwiseConv2d");let O=m,x=!1;3===m.rank&&(x=!0,O=Object(w.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),R.b(4===O.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${O.rank}.`),R.b(4===y.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`),R.b(O.shape[3]===y.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${O.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`),null==c&&(c=[1,1]),R.b(J.h(e,c),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${c}'`),null!=l&&R.b(R.v(n),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${l} but got pad ${n}.`);const v=J.a(O.shape,y.shape,e,c,n,l,!0);let j,I;null!=d&&(j=Object(E.a)(d,"bias","fused conv2d"),[j]=Object(G.b)(j,m),K.a(v.outShape,j.shape)),null!=f&&(I=Object(E.a)(f,"prelu weights","fused depthwiseConv2d"));const k=(t,r)=>{R.b(J.i(c),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${c}'`);const[o,d,f,m]=r,y=Object(Z.c)(t,f,h),O=Object(at.a)(d.shape,y,o,e,n,c,l),x=Object(nt.a)(d,y,o.shape,e,n,c,l);if(null!=m){return[O,x,Object(Z.b)(j,y)]}return[O,x]},N=t=>t.fusedDepthwiseConv2D({input:O,filter:y,convInfo:v,bias:j,activation:h,preluActivationWeights:I}),T={x:O,filter:y,bias:j,preluActivationWeights:I},C={strides:e,pad:n,dataFormat:r,dilations:c,dimRoundingMode:l,activation:h};if(null==d){return Object(H.a)((t,filter,e)=>{let n=W.a.runKernelFunc(N,T,null,U.gb,C);return e([filter,t,n]),x&&(n=Object(w.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:k}})(O,y)}return Object(H.a)((t,filter,e,n)=>{let r=W.a.runKernelFunc(N,T,null,U.gb,C);return n([filter,t,r,e]),x&&(r=Object(w.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}})(O,y,j)}});var st=n(228);const it=Object(h.a)({fusedMatMul_:function({a:a,b:b,transposeA:t=!1,transposeB:e=!1,bias:n,activation:r="linear",preluActivationWeights:c}){if(!1===Object(Z.d)(W.a.state.gradientDepth,r)){let l=Object(st.a)(a,b,t,e);return null!=n&&(l=Object(o.a)(l,n)),Object(Z.a)(l,r,c)}let l=Object(E.a)(a,"a","fused matMul"),d=Object(E.a)(b,"b","fused matMul");[l,d]=Object(G.b)(l,d);const h=t?l.shape[l.rank-2]:l.shape[l.rank-1],f=e?d.shape[d.rank-1]:d.shape[d.rank-2],m=t?l.shape[l.rank-1]:l.shape[l.rank-2],y=e?d.shape[d.rank-2]:d.shape[d.rank-1],O=l.shape.slice(0,-2),x=d.shape.slice(0,-2),v=R.N(O),j=R.N(x);R.b(l.rank>=2&&d.rank>=2&&l.rank===d.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${d.rank}.`),R.b(R.a(O,x),()=>`Error in fused matMul: outer dimensions (${O}) and (${x}) of Tensors with shapes ${l.shape} and `+d.shape+" must match."),R.b(h===f,()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${l.shape} and ${d.shape} and transposeA=${t} and transposeB=${e} must match.`);const I=l.shape.slice(0,-2).concat([m,y]),k=t?Object(w.a)(l,[v,h,m]):Object(w.a)(l,[v,m,h]),N=e?Object(w.a)(d,[j,y,f]):Object(w.a)(d,[j,f,y]);let T,C;null!=n&&(T=Object(E.a)(n,"bias","fused matMul"),[T]=Object(G.b)(T,l),K.a(I,T.shape)),null!=c&&(C=Object(E.a)(c,"prelu weights","fused matMul"));const $=(o,c)=>{const[l,d,h,f]=c,m=Object(Z.c)(Object(w.a)(o,h.shape),h,r);let y,O;if(t||e?!t&&e?(y=Object(st.a)(m,d,!1,!1),O=Object(st.a)(m,l,!0,!1)):t&&!e?(y=Object(st.a)(d,m,!1,!0),O=Object(st.a)(l,m,!1,!1)):(y=Object(st.a)(d,m,!0,!0),O=Object(st.a)(m,l,!0,!0)):(y=Object(st.a)(m,d,!1,!0),O=Object(st.a)(l,m,!0,!1)),null!=n){return[y,O,Object(Z.b)(f,m)]}return[y,O]},S=n=>n.fusedBatchMatMul({a:k,b:N,transposeA:t,transposeB:e,bias:T,activation:r,preluActivationWeights:C}),A={a:k,b:N,bias:T,preluActivationWeights:C},F={transposeA:t,transposeB:e,activation:r};if(null==n){return Object(H.a)((t,e,n)=>{const r=W.a.runKernelFunc(S,A,null,U.Rc,F);return n([t,e,r]),{value:Object(w.a)(r,I),gradFunc:$}})(k,N)}return Object(H.a)((t,e,n,r)=>{const o=W.a.runKernelFunc(S,A,null,U.Rc,F);return r([t,e,o,n]),{value:Object(w.a)(o,I),gradFunc:$}})(k,N,T)}});function ct(t,a,b){const e=1-t%2,n=new Float32Array(t);for(let i=0;i<t;++i){const r=2*Math.PI*i/(t+e-1);n[i]=a-b*Math.cos(r)}return Object(S.a)(n,"float32")}Object(h.a)({hammingWindow_:function(t){return ct(t,.54,.46)}});const ut=Object(h.a)({hannWindow_:function(t){return ct(t,.5,.5)}});const lt=Object(h.a)({frame_:function(t,e,n,r=!1,o=0){let c=0;const output=[];for(;c+e<=t.size;)output.push(Object(N.a)(t,c,e)),c+=n;if(r)for(;c<t.size;){const r=c+e-t.size,l=Object(d.a)([Object(N.a)(t,c,e-r),Object(O.a)([r],o)]);output.push(l),c+=n}return 0===output.length?F([],[0,e]):Object(w.a)(Object(d.a)(output),[output.length,e])}});Object(h.a)({stft_:function(t,e,n,r,o=ut){var c;null==r&&(c=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(c)/Math.log(2)))));const l=lt(t,e,n),h=Object(v.a)(l,o(e)),output=[];for(let i=0;i<l.shape[0];i++)output.push(Object(B.a)(Object(N.a)(h,[i,0],[1,e]),r));return Object(d.a)(output)}});const pt=Object(h.a)({cropAndResize_:function(image,t,e,n,r,o){const c=Object(E.a)(image,"image","cropAndResize"),l=Object(E.a)(t,"boxes","cropAndResize","float32"),d=Object(E.a)(e,"boxInd","cropAndResize","int32");r=r||"bilinear",o=o||0;const h=l.shape[0];R.b(4===c.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${c.rank}.`),R.b(2===l.rank&&4===l.shape[1],()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${l.shape}.`),R.b(1===d.rank&&d.shape[0]===h,()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${l.shape}.`),R.b(2===n.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`),R.b(n[0]>=1&&n[1]>=1,()=>"cropSize must be atleast [1,1], but was "+n),R.b("bilinear"===r||"nearest"===r,()=>"method must be bilinear or nearest, but was "+r);const f={image:c,boxes:l,boxInd:d},m={method:r,extrapolationValue:o,cropSize:n};return W.a.runKernelFunc(t=>t.cropAndResize(c,l,d,n,r,o),f,null,U.I,m)}});const ht=Object(h.a)({flipLeftRight_:function(image){const t=Object(E.a)(image,"image","flipLeftRight","float32");R.b(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const e={image:t};return W.a.runKernel(U.ab,e,{})}});const ft=Object(h.a)({rotateWithOffset_:function(image,t,e=0,n=.5){const r=Object(E.a)(image,"image","rotateWithOffset","float32");R.b(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);const o={image:r},c={radians:t,fillValue:e,center:n};return W.a.runKernel(U.lc,o,c)}});function mt(t,e,n,r,o,c){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==c&&(c=0);const l=t.shape[0];return n=Math.min(n,l),R.b(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),R.b(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),R.b(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),R.b(1===e.rank,()=>"scores must be a 1D tensor"),R.b(e.shape[0]===l,()=>`scores has incompatible shape with boxes. Expected ${l}, but was `+e.shape[0]),R.b(0<=c&&c<=1,()=>`softNmsSigma must be in [0, 1], but was '${c}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:c}}const bt=Object(h.a)({nonMaxSuppression_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object(E.a)(t,"boxes","nonMaxSuppression"),l=Object(E.a)(e,"scores","nonMaxSuppression"),d=mt(c,l,n,r,o);n=d.maxOutputSize,r=d.iouThreshold,o=d.scoreThreshold;const h={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return W.a.runKernelFunc(b=>b.nonMaxSuppression(c,l,n,r,o),{boxes:c,scores:l},null,U.Qb,h)}});var gt=n(232);const yt=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object(E.a)(t,"boxes","nonMaxSuppressionAsync"),l=Object(E.a)(e,"scores","nonMaxSuppressionAsync"),d=mt(c,l,n,r,o);n=d.maxOutputSize,r=d.iouThreshold,o=d.scoreThreshold;const h=await Promise.all([c.data(),l.data()]),f=h[0],m=h[1],y=Object(gt.a)(f,m,n,r,o);return c!==t&&c.dispose(),l!==e&&l.dispose(),y};const Ot=Object(h.a)({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const l=Object(E.a)(t,"boxes","nonMaxSuppression"),d=Object(E.a)(e,"scores","nonMaxSuppression"),h=mt(l,d,n,r,o,c),f={boxes:l,scores:d},m={maxOutputSize:n=h.maxOutputSize,iouThreshold:r=h.iouThreshold,scoreThreshold:o=h.scoreThreshold,softNmsSigma:c=h.softNmsSigma},y=W.a.runKernel(U.Sb,f,m);return{selectedIndices:y[0],selectedScores:y[1]}}});const xt=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const l=Object(E.a)(t,"boxes","nonMaxSuppressionAsync"),d=Object(E.a)(e,"scores","nonMaxSuppressionAsync"),h=mt(l,d,n,r,o,c);n=h.maxOutputSize,r=h.iouThreshold,o=h.scoreThreshold,c=h.softNmsSigma;const f=await Promise.all([l.data(),d.data()]),m=f[0],y=f[1],O=Object(gt.c)(m,y,n,r,o,c);return l!==t&&l.dispose(),d!==e&&d.dispose(),O};const vt=Object(h.a)({nonMaxSuppressionPadded_:function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const l=Object(E.a)(t,"boxes","nonMaxSuppression"),d=Object(E.a)(e,"scores","nonMaxSuppression"),h=mt(l,d,n,r,o,null),f={boxes:l,scores:d},m={maxOutputSize:h.maxOutputSize,iouThreshold:h.iouThreshold,scoreThreshold:h.scoreThreshold,padToMaxOutputSize:c},y=W.a.runKernel(U.Rb,f,m);return{selectedIndices:y[0],validOutputs:y[1]}}});const jt=async function(t,e,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const l=Object(E.a)(t,"boxes","nonMaxSuppressionAsync"),d=Object(E.a)(e,"scores","nonMaxSuppressionAsync"),h=mt(l,d,n,r,o,null),f=h.maxOutputSize,m=h.iouThreshold,y=h.scoreThreshold,[O,x]=await Promise.all([l.data(),d.data()]),v=Object(gt.b)(O,x,f,m,y,c);return l!==t&&l.dispose(),d!==e&&d.dispose(),v};var wt=n(375),It=n(374),kt=n(219),Nt=n(218),Tt=n(226),Ct=n(210);Object(h.a)({bandPart_:function(a,t,e){Object(R.b)(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),Object(R.b)(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);const n=Object(E.a)(a,"a","bandPart");Object(R.b)(n.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${n.rank}.`);const r=n.shape,[o,c]=n.shape.slice(-2);if(!(t<=o))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`);if(!(e<=c))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${c}).`);t<0&&(t=o),e<0&&(e=c);const i=Object(w.a)(Object(j.a)(0,o,1,"int32"),[-1,1]),l=Object(j.a)(0,c,1,"int32"),d=Object(sub.a)(i,l),h=Object(Tt.a)(Object(Nt.a)(d,Object(I.a)(+t,"int32")),Object(kt.a)(d,Object(I.a)(-e,"int32"))),f=Object(M.a)([o,c],n.dtype);return Object(w.a)(Object(C.a)(Object(_.a)(Object(w.a)(n,[-1,o,c])).map(t=>Object(Ct.a)(h,t,f))),r)}});var $t=n(280),St=n(239),Et=n(279),Rt=n(195);Object(h.a)({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Object(R.b)(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let i=1;i<t.length;++i)Object(R.b)(t[i].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[i].shape[0]} vs. ${n})`)}else e=!0,t=Object(St.a)(t,t.shape[0],0).map(t=>Object(Et.a)(t,[0]));Object(R.b)(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let i=0;i<t.length;++i)n.push(W.a.tidy(()=>{let t=r[i];if(i>0)for(let e=0;e<i;++e){const r=Object(v.a)(Object(Rt.a)(Object(v.a)(n[e],t)),n[e]);t=Object(sub.a)(t,r)}return Object(div.a)(t,Object($t.a)(t,"euclidean"))}));return e?Object(C.a)(n,0):n}});var At=n(221),Ft=n(238),Dt=n(259);const _t=Object(h.a)({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const o=Object(c.a)([t,e],r),l=t<=e?t:e;for(let i=0;i<l;++i)o.set(1,i,i);const d=Object(w.a)(o.toTensor(),[t,e]);if(null==n)return d;if(1===n.length)return Object(Dt.a)(Object(Ft.a)(d,0),[n[0],1,1]);if(2===n.length)return Object(Dt.a)(Object(Ft.a)(Object(Ft.a)(d,0),0),[n[0],n[1],1,1]);if(3===n.length)return Object(Dt.a)(Object(Ft.a)(Object(Ft.a)(Object(Ft.a)(d,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Mt=n(214),Pt=n(201);function Bt(t,e=!1){return W.a.tidy(()=>{Object(R.b)(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let q=_t(n),o=Object(l.a)(t);const c=F([[1]],[1,1]);let h=Object(l.a)(c);const f=n>=r?r:n;for(let t=0;t<f;++t){const e=o,f=h,m=q;[h,o,q]=W.a.tidy(()=>{const e=Object(N.a)(o,[t,t],[n-t,1]),f=Object($t.a)(e),m=Object(N.a)(o,[t,t],[1,1]),s=Object(Ct.a)(Object(Mt.a)(m,0),F([[-1]]),F([[1]])),y=Object(sub.a)(m,Object(v.a)(s,f)),O=Object(div.a)(e,y);h=1===O.shape[0]?Object(l.a)(c):Object(d.a)([c,Object(N.a)(O,[1,0],[O.shape[0]-1,O.shape[1]])],0);const x=Object(Pt.a)(Object(div.a)(Object(st.a)(s,y),f)),j=Object(N.a)(o,[t,0],[n-t,r]),w=Object(v.a)(x,h),I=Object(P.a)(h);if(0===t)o=Object(sub.a)(j,Object(st.a)(w,Object(st.a)(I,j)));else{const e=Object(sub.a)(j,Object(st.a)(w,Object(st.a)(I,j)));o=Object(d.a)([Object(N.a)(o,[0,0],[t,r]),e],0)}const k=Object(P.a)(w),T=Object(N.a)(q,[0,t],[n,q.shape[1]-t]);if(0===t)q=Object(sub.a)(T,Object(st.a)(Object(st.a)(T,h),k));else{const e=Object(sub.a)(T,Object(st.a)(Object(st.a)(T,h),k));q=Object(d.a)([Object(N.a)(q,[0,0],[n,t]),e],1)}return[h,o,q]}),Object(At.b)([e,f,m])}return!e&&n>r&&(q=Object(N.a)(q,[0,0],[n,r]),o=Object(N.a)(o,[0,0],[r,r])),[q,o]})}Object(h.a)({qr_:function(t,e=!1){if(Object(R.b)(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return Bt(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=Object(_.a)(Object(w.a)(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],c=[];r.forEach(t=>{const[n,r]=Bt(t,e);o.push(n),c.push(r)});return[Object(w.a)(Object(C.a)(o,0),t.shape),Object(w.a)(Object(C.a)(c,0),t.shape)]}}});var Lt=n(240),zt=n(211),Vt=n(186),Wt=n(282),Ht=n(260),Ut=n(241);const Gt=Object(h.a)({computeWeightedLoss_:function(t,e,n=zt.a.SUM_BY_NONZERO_WEIGHTS){const r=Object(E.a)(t,"losses","computeWeightedLoss");let o=null;null!=e&&(o=Object(E.a)(e,"weights","computeWeightedLoss"));const c=null==o?r:Object(v.a)(r,o);if(n===zt.a.NONE)return c;if(n===zt.a.SUM)return Object(Rt.a)(c);if(n===zt.a.MEAN){if(null==o)return Object(Wt.a)(c);{const t=r.size/o.size,e=Object(div.a)(Object(Rt.a)(c),Object(Rt.a)(o));return t>1?Object(div.a)(e,Object(I.a)(t)):e}}if(n===zt.a.SUM_BY_NONZERO_WEIGHTS){if(null==o)return Object(div.a)(Object(Rt.a)(c),Object(I.a)(r.size));{const t=Object(v.a)(o,Object(Ut.a)(r.shape)),e=Object(Vt.a)(Object(Rt.a)(Object(Ht.a)(t,Object(I.a)(0))),"float32");return Object(div.a)(Object(Rt.a)(c),e)}}throw Error("Unknown reduction: "+n)}});Object(h.a)({absoluteDifference_:function(t,e,n,r=zt.a.SUM_BY_NONZERO_WEIGHTS){const o=Object(E.a)(t,"labels","absoluteDifference"),c=Object(E.a)(e,"predictions","absoluteDifference");let l=null;null!=n&&(l=Object(E.a)(n,"weights","absoluteDifference")),Object(R.e)(o.shape,c.shape,"Error in absoluteDifference: ");const d=Object(Lt.a)(Object(sub.a)(o,c));return Gt(d,l,r)}});Object(h.a)({cosineDistance_:function(t,e,n,r,o=zt.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(E.a)(t,"labels","cosineDistance"),l=Object(E.a)(e,"predictions","cosineDistance");let d=null;null!=r&&(d=Object(E.a)(r,"weights","cosineDistance")),Object(R.e)(c.shape,l.shape,"Error in cosineDistance: ");const h=Object(I.a)(1),f=Object(sub.a)(h,Object(Rt.a)(Object(v.a)(c,l),n,!0));return Gt(f,d,o)}});var qt=n(242);Object(h.a)({hingeLoss_:function(t,e,n,r=zt.a.SUM_BY_NONZERO_WEIGHTS){let o=Object(E.a)(t,"labels","hingeLoss");const c=Object(E.a)(e,"predictions","hingeLoss");let l=null;null!=n&&(l=Object(E.a)(n,"weights","hingeLoss")),Object(R.e)(o.shape,c.shape,"Error in hingeLoss: ");const d=Object(I.a)(1);o=Object(sub.a)(Object(v.a)(Object(I.a)(2),o),d);const h=Object(qt.a)(Object(sub.a)(d,Object(v.a)(o,c)));return Gt(h,l,r)}});var Kt=n(261),Xt=n(202);Object(h.a)({huberLoss_:function(t,e,n,r=1,c=zt.a.SUM_BY_NONZERO_WEIGHTS){const l=Object(E.a)(t,"labels","huberLoss"),d=Object(E.a)(e,"predictions","huberLoss");let h=null;null!=n&&(h=Object(E.a)(n,"weights","huberLoss")),Object(R.e)(l.shape,d.shape,"Error in huberLoss: ");const f=Object(I.a)(r),m=Object(Lt.a)(Object(sub.a)(d,l)),y=Object(Kt.a)(m,f),O=Object(sub.a)(m,y),x=Object(o.a)(Object(v.a)(Object(I.a)(.5),Object(Xt.a)(y)),Object(v.a)(f,O));return Gt(x,h,c)}});var Yt=n(243);Object(h.a)({logLoss_:function(t,e,n,r=1e-7,c=zt.a.SUM_BY_NONZERO_WEIGHTS){const l=Object(E.a)(t,"labels","logLoss"),d=Object(E.a)(e,"predictions","logLoss");let h=null;null!=n&&(h=Object(E.a)(n,"weights","logLoss")),Object(R.e)(l.shape,d.shape,"Error in logLoss: ");const f=Object(I.a)(1),m=Object(I.a)(r),y=Object(Pt.a)(Object(v.a)(l,Object(Yt.a)(Object(o.a)(d,m)))),O=Object(v.a)(Object(sub.a)(f,l),Object(Yt.a)(Object(o.a)(Object(sub.a)(f,d),m))),x=Object(sub.a)(y,O);return Gt(x,h,c)}});var Qt=n(262);Object(h.a)({meanSquaredError_:function(t,e,n,r=zt.a.SUM_BY_NONZERO_WEIGHTS){const o=Object(E.a)(t,"labels","meanSquaredError"),c=Object(E.a)(e,"predictions","meanSquaredError");let l=null;null!=n&&(l=Object(E.a)(n,"weights","meanSquaredError")),Object(R.e)(o.shape,c.shape,"Error in meanSquaredError: ");const d=Object(Qt.a)(o,c);return Gt(d,l,r)}});var Jt=n(309);Object(h.a)({sigmoidCrossEntropy_:function(t,e,n,r=0,c=zt.a.SUM_BY_NONZERO_WEIGHTS){let l=Object(E.a)(t,"multiClassLabels","sigmoidCrossEntropy");const d=Object(E.a)(e,"logits","sigmoidCrossEntropy");let h=null;if(null!=n&&(h=Object(E.a)(n,"weights","sigmoidCrossEntropy")),Object(R.e)(l.shape,d.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Object(I.a)(r),e=Object(I.a)(1),n=Object(I.a)(.5);l=Object(o.a)(Object(v.a)(l,Object(sub.a)(e,t)),Object(v.a)(n,t))}const f=function(t,e){const n=Object(E.a)(t,"labels","sigmoidCrossEntropyWithLogits"),r=Object(E.a)(e,"logits","sigmoidCrossEntropyWithLogits");Object(R.e)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const c=Object(qt.a)(r),l=Object(v.a)(r,n),d=Object(Jt.a)(Object(y.a)(Object(Pt.a)(Object(Lt.a)(r))));return Object(o.a)(Object(sub.a)(c,l),d)}(l,d);return Gt(f,h,c)}});var Zt=n(198),te=n(283);Object(h.a)({softmaxCrossEntropy_:function(t,e,n,r=0,c=zt.a.SUM_BY_NONZERO_WEIGHTS){let l=Object(E.a)(t,"onehotLabels","softmaxCrossEntropy");const d=Object(E.a)(e,"logits","softmaxCrossEntropy");let h=null;if(null!=n&&(h=Object(E.a)(n,"weights","softmaxCrossEntropy")),Object(R.e)(l.shape,d.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Object(I.a)(r),e=Object(I.a)(1),n=Object(I.a)(l.shape[1]);l=Object(o.a)(Object(v.a)(l,Object(sub.a)(e,t)),Object(div.a)(t,n))}const f=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return Object(H.a)((t,e,r)=>{const o=Object(te.a)(e,[n],!0),c=Object(sub.a)(Object(Vt.a)(e,"float32"),o);r([t,c]);const l=Object(Pt.a)(Object(v.a)(c,t));return{value:Object(Rt.a)(l,[n]),gradFunc:(t,e)=>{const[r,o]=e,c=Object(Zt.e)(t.shape,[n]);return[Object(v.a)(Object(w.a)(t,c),Object(sub.a)(Object(Vt.a)(r,"float32"),Object(y.a)(o))),Object(v.a)(Object(w.a)(t,c),Object(sub.a)(Object(y.a)(o),Object(Vt.a)(r,"float32")))]}}})(t,e)}(l,d);return Gt(f,h,c)}}),L.a,z.a,B.a,V.a;const ee={flipLeftRight:ht,resizeNearestNeighbor:It.a,resizeBilinear:wt.a,rotateWithOffset:ft,cropAndResize:pt,nonMaxSuppression:bt,nonMaxSuppressionAsync:yt,nonMaxSuppressionWithScore:Ot,nonMaxSuppressionWithScoreAsync:xt,nonMaxSuppressionPadded:vt,nonMaxSuppressionPaddedAsync:jt}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({mul_:function(a,b){let t=Object(l.a)(a,"a","mul"),e=Object(l.a)(b,"b","mul");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.multiply(t,e);return r([t,e]),o},n,null,o.Ob)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({cast_:function(t,e){const n=Object(c.a)(t,"x","cast");if(!l.B(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const d={x:n},h={dtype:e};return r.a.runKernelFunc(t=>t.cast(n,e),d,null,o.v,h)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return l}));var r=n(177),o=n(188);function c(t,e,n){return({inputs:c,attrs:l,backend:d})=>{const{x:h}=c;if(Object(o.a)(h,t),"string"===h.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const f=d,m=f.data.get(h.dataId).values,y=r.Hc.sizeFromShape(h.shape),O=n||h.dtype,x=r.Hc.getArrayFromDType(O,y);for(let i=0;i<y;++i)x[i]=e(m[i],l);return f.makeTensorInfo(h.shape,O,x)}}function l(t,e,n){return({inputs:r,attrs:c,backend:l})=>{const{x:d}=r;if(Object(o.a)(d,t),"string"===d.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const h=l,f=h.data.get(d.dataId).values,m=n||d.dtype,y=e(f,m,c);return h.makeTensorInfo(d.shape,m,y)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&r.Hc.assert("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}},function(t,e,n){"use strict";function r(t,e){const n=t.length,r=[];for(let i=0;i<n;i++){const o=n-1-i,a=t[o]||1;(e[e.length-1-i]||1)>1&&1===a&&r.unshift(o)}return r}function o(t,e){const n=[];for(let i=0;i<e.length;i++){const r=t[t.length-i-1],o=e.length-i-1,c=e[o];(null==r||1===r&&c>1)&&n.unshift(o)}return n}function c(t,e){const n=[],r=Math.max(t.length,e.length);for(let i=0;i<r;i++){let a=t[t.length-i-1];null==a&&(a=1);let b=e[e.length-i-1];if(null==b&&(b=1),1===a)n.unshift(b);else if(1===b)n.unshift(a);else{if(a!==b){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(a)}}return n}n.d(e,"b",(function(){return r})),n.d(e,"c",(function(){return o})),n.d(e,"a",(function(){return c}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(271),o=n(233);function c(t,e){if((Object(r.A)(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Object(r.A)(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(o.a)(t,[],[],e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return sub}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const sub=Object(d.a)({sub_:function(a,b){let t=Object(l.a)(a,"a","sub"),e=Object(l.a)(b,"b","sub");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.subtract(t,e);return r([t,e]),o},n,null,o.Gc)}})},function(t,e,n){"use strict";n.d(e,"d",(function(){return o})),n.d(e,"e",(function(){return c})),n.d(e,"f",(function(){return l})),n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return h})),n.d(e,"c",(function(){return f})),n.d(e,"i",(function(){return v})),n.d(e,"h",(function(){return j})),n.d(e,"g",(function(){return w}));var r=n(271);function o(t,e,n,r,o="NHWC",c){return d(t,[...e,t[3]],n,c,r,null,null,w(o))}function c(t,e,n,r,o,c,l="channelsLast"){const[h,f]=m(e);let y;if("channelsLast"===l)y=[h,f,t[3],t[3]];else{if("channelsFirst"!==l)throw new Error("Unknown dataFormat "+l);y=[h,f,t[1],t[1]]}return d(t,y,n,r,o,c,!1,l)}function l(t,e,n,r,o,c,l="NDHWC"){const[d,f,m]=y(e);let O,x;if("NDHWC"===l)x="channelsLast",O=[d,f,m,t[4],t[4]];else{if("NCDHW"!==l)throw new Error("Unknown dataFormat "+l);x="channelsFirst",O=[d,f,m,t[1],t[1]]}return h(t,O,n,r,o,!1,x,c)}function d(t,e,n,o,c,l,d=!1,h="channelsLast"){let[y,v,j,w]=[-1,-1,-1,-1];if("channelsLast"===h)[y,v,j,w]=t;else{if("channelsFirst"!==h)throw new Error("Unknown dataFormat "+h);[y,w,v,j]=t}const[I,k,,N]=e,[T,C]=m(n),[$,S]=m(o),E=O(I,$),R=O(k,S),{padInfo:A,outHeight:F,outWidth:D}=function(t,e,n,o,c,l,d,h,m){let y,O,v;if("number"==typeof t){y={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const c=function(t,e,n,o,c){null==o&&(o=f(t,e,n));const l=t[0],d=t[1],h=x((l-e+2*o)/n+1,c);r.b(r.v(h),()=>`The output # of rows (${h}) must be an integer. Change the stride and/or zero pad parameters`);const m=x((d-e+2*o)/n+1,c);return r.b(r.v(m),()=>`The output # of columns (${m}) must be an integer. Change the stride and/or zero pad parameters`),[h,m]}([e,n],l,o,t,h);O=c[0],v=c[1]}else if("same"===t){O=Math.ceil(e/o),v=Math.ceil(n/c);const t=Math.max(0,(O-1)*o+l-e),r=Math.max(0,(v-1)*c+d-n),h=Math.floor(t/2),f=t-h,m=Math.floor(r/2);y={top:h,bottom:f,left:m,right:r-m,type:"SAME"}}else if("valid"===t)y={top:0,bottom:0,left:0,right:0,type:"VALID"},O=Math.ceil((e-l+1)/o),v=Math.ceil((n-d+1)/c);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const r="channelsLast"===m?t[1][0]:t[2][0],f="channelsLast"===m?t[1][1]:t[2][1],j="channelsLast"===m?t[2][0]:t[3][0],w="channelsLast"===m?t[2][1]:t[3][1];y={top:r,bottom:f,left:j,right:w,type:0===r&&0===f&&0===j&&0===w?"VALID":"EXPLICIT"},O=x((e-l+r+f)/o+1,h),v=x((n-d+j+w)/c+1,h)}}return{padInfo:y,outHeight:O,outWidth:v}}(c,v,j,T,C,E,R,l,h),_=d?N*w:N;let M;return"channelsFirst"===h?M=[y,_,F,D]:"channelsLast"===h&&(M=[y,F,D,_]),{batchSize:y,dataFormat:h,inHeight:v,inWidth:j,inChannels:w,outHeight:F,outWidth:D,outChannels:_,padInfo:A,strideHeight:T,strideWidth:C,filterHeight:I,filterWidth:k,effectiveFilterHeight:E,effectiveFilterWidth:R,dilationHeight:$,dilationWidth:S,inShape:t,outShape:M,filterShape:e}}function h(t,e,n,o,c,l=!1,d="channelsLast",h){let[m,v,j,w,I]=[-1,-1,-1,-1,-1];if("channelsLast"===d)[m,v,j,w,I]=t;else{if("channelsFirst"!==d)throw new Error("Unknown dataFormat "+d);[m,I,v,j,w]=t}const[k,N,T,,C]=e,[$,S,E]=y(n),[R,A,F]=y(o),D=O(k,R),_=O(N,A),M=O(T,F),{padInfo:P,outDepth:B,outHeight:L,outWidth:z}=function(t,e,n,o,c,l,d,h,m,y,O){let v,j,w,I;if("number"==typeof t){v={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const l=function(t,e,n,o,c,l){null==c&&(c=f(t,e,o));const d=t[0],h=t[1],m=t[2],y=x((d-e+2*c)/o+1,l);r.b(r.v(y),()=>`The output # of depths (${y}) must be an integer. Change the stride and/or zero pad parameters`);const O=x((h-e+2*c)/o+1,l);r.b(r.v(O),()=>`The output # of rows (${O}) must be an integer. Change the stride and/or zero pad parameters`);const v=x((m-e+2*c)/o+1,l);return r.b(r.v(v),()=>`The output # of columns (${v}) must be an integer. Change the stride and/or zero pad parameters`),[y,O,v,n]}([e,n,o,1],h,1,c,t,O);j=l[0],w=l[1],I=l[2]}else if("same"===t){j=Math.ceil(e/c),w=Math.ceil(n/l),I=Math.ceil(o/d);const t=(j-1)*c+h-e,r=(w-1)*l+m-n,f=(I-1)*d+y-o,O=Math.floor(t/2),x=t-O,k=Math.floor(r/2),N=r-k,T=Math.floor(f/2);v={top:k,bottom:N,left:T,right:f-T,front:O,back:x,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);v={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},j=Math.ceil((e-h+1)/c),w=Math.ceil((n-m+1)/l),I=Math.ceil((o-y+1)/d)}return{padInfo:v,outDepth:j,outHeight:w,outWidth:I}}(c,v,j,w,$,S,E,D,_,M,h),V=l?C*I:C;let W;return"channelsFirst"===d?W=[m,V,B,L,z]:"channelsLast"===d&&(W=[m,B,L,z,V]),{batchSize:m,dataFormat:d,inDepth:v,inHeight:j,inWidth:w,inChannels:I,outDepth:B,outHeight:L,outWidth:z,outChannels:V,padInfo:P,strideDepth:$,strideHeight:S,strideWidth:E,filterDepth:k,filterHeight:N,filterWidth:T,effectiveFilterDepth:D,effectiveFilterHeight:_,effectiveFilterWidth:M,dilationDepth:R,dilationHeight:A,dilationWidth:F,inShape:t,outShape:W,filterShape:e}}function f(t,e,n,r=1){const o=O(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function m(param){return"number"==typeof param?[param,param,param]:2===param.length?[param[0],param[1],1]:param}function y(param){return"number"==typeof param?[param,param,param]:param}function O(t,e){return e<=1?t:t+(t-1)*(e-1)}function x(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function v(param){const[t,e,n]=m(param);return 1===t&&1===e&&1===n}function j(t,e){return v(t)||v(e)}function w(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return l}));var r=n(180),o=n(223);n(271);function c(a,b){if(a.dtype===b.dtype)return[a,b];const t=Object(o.b)(a.dtype,b.dtype);return[a.cast(t),b.cast(t)]}function l(t){const e=[];return function t(e,n,o){if(null==e)return;if(e instanceof r.a)return void n.push(e);if(c=e,!Array.isArray(c)&&"object"!=typeof c)return;var c;const l=e;for(const e in l){const r=l[e];o.has(r)||(o.add(r),t(r,n,o))}}(t,e,new Set),e}},function(t,e,n){"use strict";n.d(e,"a",(function(){return div}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(273),h=n(178);const div=Object(h.a)({div_:function(a,b){let t=Object(l.a)(a,"a","div"),e=Object(l.a)(b,"b","div");if([t,e]=Object(c.b)(t,e),"int32"===t.dtype&&"int32"===e.dtype)return Object(d.a)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.realDivide(t,e);return r([t,e]),o},n,null,o.R,{})}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return O}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(186),f=n(178),m=n(183),y=n(203);const O=Object(f.a)({sum_:function(t,e=null,n=!1){let f=Object(c.a)(t,"x","sum");"bool"===f.dtype&&(f=Object(h.a)(f,"int32"));const O={x:f},x={axis:e,keepDims:n};return r.a.runKernelFunc((t,r)=>{r([f]);const o=Object(l.I)(e,f.shape),c=Object(d.f)(o,f.rank);let h=o,O=f;null!=c&&(O=Object(y.a)(f,c),h=Object(d.g)(h.length,f.rank));let x=t.sum(O,h);if(n){const t=Object(d.e)(x.shape,o);x=Object(m.a)(x,t)}return x},O,null,o.Hc,x)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({zerosLike_:function(t){const e=Object(c.a)(t,"x","zerosLike"),n={x:e};return r.a.runKernelFunc(t=>t.zerosLike(e),n,null,o.Qc)}})},function(t,e,n){"use strict";n.d(e,"d",(function(){return o})),n.d(e,"e",(function(){return c})),n.d(e,"f",(function(){return l})),n.d(e,"b",(function(){return d})),n.d(e,"g",(function(){return f})),n.d(e,"c",(function(){return m})),n.d(e,"a",(function(){return y}));var r=n(177);function o(t,e,n,o,l){const d=e.inputParams[t];if(d&&void 0!==d.inputIndexStart){const t=d.inputIndexStart,h=0===d.inputIndexEnd?void 0:void 0===d.inputIndexEnd?t+1:d.inputIndexEnd;if("tensor"===d.type)return c(e.inputNames[d.inputIndexStart],n,o,l);if("tensors"===d.type){return e.inputNames.slice(t,h).map(t=>c(t,n,o,l))}const f=c(e.inputNames.slice(t)[0],n,o,l),data=f.dataSync();return"number"===d.type?data[0]:r.Hc.toNestedArray(f.shape,data)}const h=e.attrParams[t];return h&&h.value}function c(t,e,n,r){const[o,c]=f(t);if(null!=r){const t=r.getHashTableHandleByName(o);if(null!=t)return t}const l=n.currentContextIds.find(t=>!!e[h(o,t)]);return void 0!==l?e[h(o,l)][c]:void 0}function l(t,e,n){return e[h(t,n.currentContextId)]}function d(t,e){const[n,r]=f(t);return[h(n,e&&e.currentContextId),r]}function h(t,e){return e?`${t}-${e}`:t}function f(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function m(t,e,n){let r=o("pad",t,e,n);if("explicit"===r){r=o("explicitPaddings",t,e,n);const c=[[0,0],[0,0],[0,0],[0,0]];for(let i=0;i<4;i++)c[i][0]=r[2*i],c[i][1]=r[2*i+1];return c}return r}function y(t){return t.kept?t:Object(r.Wb)(t)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return c})),n.d(e,"d",(function(){return l})),n.d(e,"e",(function(){return d})),n.d(e,"a",(function(){return h})),n.d(e,"f",(function(){return f})),n.d(e,"h",(function(){return m})),n.d(e,"g",(function(){return y}));var r=n(271);function o(t,e){for(let i=0;i<t.length;++i)if(t[t.length-i-1]!==e-1-i)return!1;return!0}function c(t,e,n){const r=t.length+e.length,o=[];let c=0,l=0;for(let d=0;d<r;d++)-1===n.indexOf(d)?o.push(t[c++]):o.push(e[l++]);return o}function l(t,e){const n=[],r=t.length;for(let o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map(e=>t[e])]}function d(t,e){return c(t,e.map(t=>1),e)}function h(t,e,n){r.b(o(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function f(t,e){if(o(t,e))return null;const n=[];for(let i=0;i<e;++i)-1===t.indexOf(i)&&n.push(i);return t.forEach(t=>n.push(t)),n}function m(t){return t.map((t,i)=>[i,t]).sort((a,b)=>a[1]-b[1]).map(t=>t[0])}function y(t,e){const n=[];for(let i=e-t;i<e;++i)n.push(i);return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return c})),n.d(e,"c",(function(){return d}));var r=n(271);class o{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Object(r.x)(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(s,...t)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,t[0],t[1]),t.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function c(){return l}let l=null;function d(t){l=t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({add_:function(a,b){let t=Object(l.a)(a,"a","add"),e=Object(l.a)(b,"b","add");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.add(t,e);return r([t,e]),o},n,null,o.d)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({neg_:function(t){const e=Object(c.a)(t,"x","neg"),n={x:e};return r.a.runKernelFunc(t=>t.neg(e),n,null,o.Pb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(181),o=n(179),c=n(178);const l=Object(c.a)({square_:function(t){const e=Object(o.a)(t,"x","square"),n=[e];return r.a.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({transpose_:function(t,e){const n=Object(c.a)(t,"x","transpose");if(null==e&&(e=n.shape.map((s,i)=>i).reverse()),l.b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{l.b(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const d={x:n},h={perm:e};return r.a.runKernelFunc(t=>t.transpose(n,e),d,null,o.Mc,h)}})},,function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(181);n(180),n(179),n(271);function o(t){return r.a.customGrad(t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(178),d=n(224);const h=Object(l.a)({slice_:function(t,e,n){const l=Object(c.a)(t,"x","slice");if(0===l.rank)throw new Error("Slicing scalar is not possible");const h={x:l},f={begin:e,size:n};return r.a.runKernelFunc((t,r)=>{const[o,c]=d.parseSliceParams(l,e,n);return d.assertParamsValid(l,o,c),r([l]),t.slice(l,o,c)},h,null,o.vc,f)}})},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},,function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(304),h=n(178),f=n(254);const m=Object(h.a)({concat_:function(t,e=0){Object(l.b)(t.length>=1,()=>"Pass at least one tensor to concat");let n=Object(c.b)(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const h=n,m={axis:e};return r.a.runKernelFunc((t,r)=>{const o=Object(l.I)(e,n[0].shape)[0],c=Object(d.b)(n.map(t=>t.shape),o);if(0===Object(l.N)(c))return Object(f.a)([],c);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];const h=n.map(t=>t.shape);Object(d.a)(h,o);const m=t.concat(n,o);return r(n),m},h,null,o.z,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(278),h=n(189),f=n(178);const m=Object(f.a)({where_:function(t,a,b){const e=Object(c.a)(a,"a","where"),n=Object(c.a)(b,"b","where"),f=Object(c.a)(t,"condition","where","bool"),m=Object(h.a)(e.shape,n.shape),y=Object(d.a)(e,m),O=Object(d.a)(n,m);1===f.rank&&Object(l.b)(f.shape[0]===e.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==f.rank&&Object(l.e)(f.shape,O.shape,"Error in where: ");const x={condition:f,t:y,e:O};return r.a.runKernelFunc((t,e)=>{const n=t.select(f,y,O);return e([f]),n},x,null,o.pc)}})},function(t,e,n){"use strict";var r;n.d(e,"a",(function(){return r})),function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},function(t,e,n){"use strict";(function(t){n.d(e,"f",(function(){return d})),n.d(e,"e",(function(){return h})),n.d(e,"a",(function(){return O})),n.d(e,"b",(function(){return x})),n.d(e,"d",(function(){return v})),n.d(e,"c",(function(){return j})),n.d(e,"g",(function(){return w}));var r=n(215),o=n(254),c=n(271),l=n(372);async function d(t,e){const n=[],r=[],o=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let i=0;i<o.length;++i){const c=o[i],l=Array.isArray(t)?t[i].tensor:t[c];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${c}': ${l.dtype}`);const d={name:c,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const t=new Promise(async t=>{const e=await l.bytes(),n=e.reduce((p,t)=>p+t.length,0)+4*e.length,r=new Uint8Array(n);let o=0;for(let i=0;i<e.length;i++){const t=e[i],n=new Uint8Array(new Uint32Array([t.length]).buffer);r.set(n,o),o+=4,r.set(t,o),o+=t.length}t(r)});r.push(t)}else r.push(l.data());null!=e&&(d.group=e),n.push(d)}return{data:f(await Promise.all(r)),specs:n}}function h(t,e){const n={};let d,h=0;for(const f of e){const e=f.name,m=f.dtype,y=f.shape,O=Object(c.N)(y);let x;if("quantization"in f){const n=f.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${f.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${f.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==m)throw new Error(`Weight ${f.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${m}.`)}const r=l.a[n.dtype],o=t.slice(h,h+O*r),c="uint8"===n.dtype?new Uint8Array(o):new Uint16Array(o);if("float32"===m)if("uint8"===n.dtype||"uint16"===n.dtype){x=new Float32Array(c.length);for(let i=0;i<c.length;i++){const t=c[i];x[i]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===d&&(d=I()),x=d(c)}else{if("int32"!==m)throw new Error(`Unsupported dtype in weight '${e}': ${m}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);x=new Int32Array(c.length);for(let i=0;i<c.length;i++){const t=c[i];x[i]=Math.round(t*n.scale+n.min)}}h+=O*r}else if("string"===m){const e=Object(c.N)(f.shape);x=[];for(let i=0;i<e;i++){const e=new Uint32Array(t.slice(h,h+4))[0];h+=4;const n=new Uint8Array(t.slice(h,h+e));x.push(n),h+=e}}else{const c=l.a[m],d=t.slice(h,h+O*c);if("float32"===m)x=new Float32Array(d);else if("int32"===m)x=new Int32Array(d);else if("bool"===m)x=new Uint8Array(d);else{if("complex64"!==m)throw new Error(`Unsupported dtype in weight '${e}': ${m}`);{x=new Float32Array(d);const t=new Float32Array(x.length/2),image=new Float32Array(x.length/2);for(let i=0;i<t.length;i++)t[i]=x[2*i],image[i]=x[2*i+1];const c=Object(o.a)(t,y,"float32"),l=Object(o.a)(image,y,"float32");n[e]=Object(r.a)(c,l),c.dispose(),l.dispose()}}h+=O*c}"complex64"!==m&&(n[e]=Object(o.a)(x,y,m))}return n}function f(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let o=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),o),o+=t.byteLength}),r.buffer}const m=void 0!==t&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function y(e){return m?t.byteLength(e):new Blob([e]).size}function O(e){if(m)return t.from(e).toString("base64");const n=new Uint8Array(e);let s="";for(let i=0,t=n.length;i<t;i++)s+=String.fromCharCode(n[i]);return btoa(s)}function x(e){if(m){const n=t.from(e,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const s=atob(e),n=new Uint8Array(s.length);for(let i=0;i<s.length;++i)n.set([s.charCodeAt(i)],i);return n.buffer}function v(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function j(path){for(path=path.trim();path.endsWith("/");)path=path.slice(0,path.length-1);const t=path.split("/");return t[t.length-1]}function w(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:y(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:y(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function I(){const t=function(){const t=i=>{let t=i<<13,e=0;for(;0==(8388608&t);)e-=8388608,t<<=1;return t&=-8388609,e+=947912704,t|e},e=new Uint32Array(2048);e[0]=0;for(let i=1;i<1024;i++)e[i]=t(i);for(let i=1024;i<2048;i++)e[i]=939524096+(i-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let i=1;i<31;i++)t[i]=i<<23;for(let i=33;i<63;i++)t[i]=2147483648+(i-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let i=0;i<64;i++)t[i]=1024;return t[0]=t[32]=0,t}();return r=>{const o=new ArrayBuffer(4*r.length),c=new Uint32Array(o);for(let o=0;o<r.length;o++){const l=r[o],d=t[n[l>>10]+(1023&l)]+e[l>>10];c[o]=d}return new Float32Array(o)}}}).call(this,n(67).Buffer)},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({exp_:function(t){const e=Object(c.a)(t,"x","exp"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},n,null,o.W)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({greater_:function(a,b){let t=Object(l.a)(a,"a","greater"),e=Object(l.a)(b,"b","greater");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.greater(t,e),n,null,o.jb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({complex_:function(t,e){const n=Object(c.a)(t,"real","complex"),d=Object(c.a)(e,"imag","complex");l.e(n.shape,d.shape,`real and imag shapes, ${n.shape} and ${d.shape}, must match in call to tf.complex().`);const h={real:n,imag:d};return r.a.runKernelFunc(t=>t.complex(n,d),h,null,o.y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(180),o=n(271);function c(t,e="float32",n){return e=e||"float32",o.c(t),new r.b(t,e,n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(181),o=n(271),c=n(215);function l(t,e="float32"){if("complex64"===e){const e=l(t,"float32"),n=l(t,"float32");return Object(c.a)(e,n)}const n=Object(o.F)(Object(o.N)(t),e);return r.a.makeTensor(n,t,e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({lessEqual_:function(a,b){let t=Object(l.a)(a,"a","lessEqual"),e=Object(l.a)(b,"b","lessEqual");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.lessEqual(t,e);return r([t,e]),o},n,null,o.ub)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({greaterEqual_:function(a,b){let t=Object(l.a)(a,"a","greaterEqual"),e=Object(l.a)(b,"b","greaterEqual");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.greaterEqual(t,e);return r([t,e]),o},n,null,o.kb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({sqrt_:function(t){const e=Object(c.a)(t,"x","sqrt"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},n,null,o.Bc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"c",(function(){return h})),n.d(e,"g",(function(){return f})),n.d(e,"b",(function(){return m})),n.d(e,"e",(function(){return y})),n.d(e,"d",(function(){return O})),n.d(e,"f",(function(){return x}));var r=n(181),o=n(199),c=n(180),l=n(193);function d(t){Object(o.b)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function h(){return r.a}function f(t,e){return r.a.tidy(t,e)}function m(t){Object(l.a)(t).forEach(t=>t.dispose())}function y(t){return r.a.keep(t)}function O(){return r.a.backendName}function x(t,e,n=1){return r.a.registerBackend(t,e,n)}Object(c.d)(d)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t){return(e,n,o,c,l)=>{const d=r.Tb.assertAndGetBroadcastShape(e,n),h=d.length,f=r.Hc.computeStrides(d),m=r.Hc.sizeFromShape(d),y=r.Hc.getTypedArrayFromDType(l,m),O=e.length,x=n.length,v=r.Hc.computeStrides(e),j=r.Hc.computeStrides(n),w=r.Tb.getBroadcastDims(e,d),I=r.Tb.getBroadcastDims(n,d);if(w.length+I.length===0)for(let i=0;i<y.length;++i)y[i]=t(o[i%o.length],c[i%c.length]);else for(let i=0;i<y.length;++i){const e=r.Hc.indexToLoc(i,h,f),n=e.slice(-O);w.forEach(t=>n[t]=0);const l=r.Hc.locToIndex(n,O,v),d=e.slice(-x);I.forEach(t=>d[t]=0);const m=r.Hc.locToIndex(d,x,j);y[i]=t(o[l],c[m])}return[y,d]}}},function(t,e,n){"use strict";var r,o,c,l,d;n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return m})),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(r||(r={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(o||(o={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(c||(c={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(l||(l={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(d||(d={}));const h={float32:l,int32:o,bool:c,complex64:d};function f(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return h[t][e]}function m(t){return f(t,"int32")}},function(t,e,n){"use strict";n.r(e),n.d(e,"assertParamsValid",(function(){return o})),n.d(e,"maskToAxes",(function(){return c})),n.d(e,"computeOutShape",(function(){return l})),n.d(e,"stridesWithElidedDims",(function(){return d})),n.d(e,"getNormalizedAxes",(function(){return m})),n.d(e,"startIndicesWithElidedDims",(function(){return y})),n.d(e,"stopIndicesWithElidedDims",(function(){return O})),n.d(e,"stridesForAxis",(function(){return x})),n.d(e,"startForAxis",(function(){return v})),n.d(e,"stopForAxis",(function(){return j})),n.d(e,"isSliceContinous",(function(){return w})),n.d(e,"computeFlatOffset",(function(){return I})),n.d(e,"parseSliceParams",(function(){return k}));var r=n(271);function o(input,t,e){const n=input.shape.length;r.b(n===t.length,()=>`Error in slice${n}D: Length of begin ${t} must match the rank of the array (${n}).`),r.b(n===e.length,()=>`Error in slice${n}D: Length of size ${e} must match the rank of the array (${n}).`);for(let i=0;i<n;++i)r.b(t[i]+e[i]<=input.shape[i],()=>`Error in slice${n}D: begin[${i}] + size[${i}] (${t[i]+e[i]}) would overflow input.shape[${i}] (${input.shape[i]})`)}function c(mask){const t=[];let e=0;for(;mask>0;)1&mask&&t.push(e),mask/=2,e++;return t}function l(t,e,n){const r=[];for(let o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function d(t,e,n,r){const o=[...t];for(let i=o.length;i<r.length;i++)o.push(1);for(let i=0;i<n;i++)0===i?o[e]=1:(o.splice(e,0,1),o.pop());return o}function h(t,e,n){return n<=t?n:n-(e-1)}function f(t,e){const n=[];for(let i=0;i<t;i++)n.push(e+i);return n}function m(t,e,n,r,o,c,l,h,f){const m=t.length;let w=new Array(m),I=new Array(m),k=new Array(m);if(e.length&&n>0){const f=e[0],m=n+1;w=y(l,f,m,r,t),I=O(h,f,m,o,t),k=d(c,f,m,t)}else for(let e=0;e<m;e++)w[e]=v(l,r,c,t,e,f),I[e]=j(h,o,c,t,e,f),k[e]=x(c,e,f);return{begin:w,end:I,strides:k}}function y(t,e,n,r,o){const c=[...o],l=f(n,e);for(let o=0;o<c.length;o++)if(l.indexOf(o)>-1)c[o]=0;else{const l=h(e,n,o);let d=r[l];t&1<<l&&(d=0),c[o]=d}return c}function O(t,e,n,o,c){const l=[...c],d=f(n,e);for(let r=0;r<l.length;r++)if(d.indexOf(r)>-1)l[r]=Number.MAX_SAFE_INTEGER;else{const c=h(e,n,r);let d=o[c];t&1<<c&&(d=Number.MAX_SAFE_INTEGER),l[r]=d}for(let i=0;i<l.length;i++){const t=c[i];l[i]<0&&(l[i]+=t),l[i]=r.i(0,l[i],c[i])}return l}function x(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function v(t,e,n,o,c,l){let d=e[c];const h=n[c]||1;(t&1<<c||l&1<<c||null==d)&&(d=h>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const f=o[c];return d<0&&(d+=f),d=r.i(0,d,f-1),d}function j(t,e,n,o,c,l){let d=e[c];const h=n[c]||1;(t&1<<c||l&1<<c||null==d)&&(d=h>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const f=o[c];return d<0&&(d+=f),d=h>0?r.i(0,d,f):r.i(-1,d,f-1),d}function w(t,e,n){let r=n.length;for(let i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(let i=r+1;i<n.length;i++)if(e[i]>0||n[i]!==t[i])return!1;return!0}function I(t,e){let n=t.length>0?t[t.length-1]:1;for(let i=0;i<t.length-1;i++)n+=t[i]*e[i];return n}function k(t,e,n){let o;const c=t.shape.length;let l;return o="number"==typeof e?[e,...new Array(c-1).fill(0)]:e.length<c?e.concat(new Array(c-e.length).fill(0)):e.slice(),o.forEach(t=>{r.b(-1!==t,()=>"slice() does not support negative begin indexing.")}),l=null==n?new Array(c).fill(-1):"number"==typeof n?[n,...new Array(c-1).fill(-1)]:n.length<c?n.concat(new Array(c-n.length).fill(-1)):n,l=l.map((e,i)=>e>=0?e:(r.b(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${i}.`),t.shape[i]-o[i])),[o,l]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(179),o=n(271),c=n(209),l=n(238),d=n(178);const h=Object(d.a)({stack_:function(t,e=0){const n=Object(r.b)(t,"tensors","stack");if(o.b(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Object(l.a)(n[0],e);const d=n[0].rank,h=n[0].shape,f=n[0].dtype;o.b(e<=d,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{o.e(h,t.shape,"All tensors passed to stack must have matching shapes"),o.b(f===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const m=n.map(t=>Object(l.a)(t,e));return Object(c.a)(m,e)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(189),d=n(178);const h=Object(d.a)({logicalAnd_:function(a,b){const t=Object(c.a)(a,"a","logicalAnd","bool"),e=Object(c.a)(b,"b","logicalAnd","bool");Object(l.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.logicalAnd(t,e),n,null,o.zb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({pow_:function(base,t){let e=Object(l.a)(base,"base","pow"),n=Object(l.a)(t,"exp","pow");[e,n]=Object(c.b)(e,n);const d={a:e,b:n};return r.a.runKernelFunc((t,r)=>{const o=t.pow(e,n);return r([e,n,o]),o},d,null,o.Xb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(271),h=n(178),f=n(183);const m=Object(h.a)({matMul_:function(a,b,t=!1,e=!1){let n=Object(l.a)(a,"a","matMul"),h=Object(l.a)(b,"b","matMul");[n,h]=Object(c.b)(n,h);const m={a:n,b:h},y={transposeA:t,transposeB:e};return r.a.runKernelFunc((r,o)=>{o([n,h]);const c=t?n.shape[n.rank-2]:n.shape[n.rank-1],l=e?h.shape[h.rank-1]:h.shape[h.rank-2],m=t?n.shape[n.rank-1]:n.shape[n.rank-2],y=e?h.shape[h.rank-2]:h.shape[h.rank-1],O=n.shape.slice(0,-2),x=h.shape.slice(0,-2),v=d.N(O),j=d.N(x),w=v===j||1===v||1===j;d.b(n.rank>=2&&h.rank>=2&&w,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${O}) and (${x}).`),d.b(c===l,()=>`Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${h.shape} and transposeA=${t} and transposeB=${e} must match.`);const I=(v>j?O:x).concat([m,y]),k=t?Object(f.a)(n,[v,c,m]):Object(f.a)(n,[v,m,c]),N=e?Object(f.a)(h,[j,y,l]):Object(f.a)(h,[j,l,y]),T=r.batchMatMul(k,N,t,e);return Object(f.a)(T,I)},m,null,o.s,y)}})},function(t,e,n){"use strict";n.d(e,"c",(function(){return O})),n.d(e,"b",(function(){return x})),n.d(e,"a",(function(){return v})),n.d(e,"d",(function(){return j}));var r=n(189),o=n(284),c=n(185),l=n(286),d=n(242),h=n(285),f=n(183),m=n(244),y=n(195);function O(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Object(c.a)(t,Object(m.a)(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function x(t,e){let n=e;const o=r.c(t.shape,e.shape);return o.length>0&&(n=Object(y.a)(n,o)),Object(f.a)(n,t.shape)}function v(t,e,n){if("linear"===e)return t;if("relu"===e)return Object(d.a)(t);if("elu"===e)return Object(o.a)(t);if("relu6"===e)return Object(h.a)(t);if("prelu"===e)return Object(l.a)(t,n);throw new Error(`Unknown fused activation ${e}.`)}const j=(t,e)=>!(t>0)||"linear"===e},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(192),h=n(178),f=n(183);const m=Object(h.a)({conv2d_:function(t,filter,e,n,h="NHWC",m=[1,1],y){const O=Object(c.a)(t,"x","conv2d"),x=Object(c.a)(filter,"filter","conv2d");let v=O,j=!1;3===O.rank&&(j=!0,v=Object(f.a)(O,[1,O.shape[0],O.shape[1],O.shape[2]])),l.b(4===v.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${v.rank}.`),l.b(4===x.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+x.rank+"."),null!=y&&l.b(l.v(n),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${y} but got pad ${n}.`);const w="NHWC"===h?v.shape[3]:v.shape[1];l.b(w===x.shape[2],()=>`Error in conv2d: depth of input (${w}) must match input depth for filter ${x.shape[2]}.`),l.b(d.h(e,m),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${m}'`);const I={x:v,filter:x},k={strides:e,pad:n,dataFormat:h,dilations:m,dimRoundingMode:y},N=r.a.runKernelFunc((t,r)=>{const o=d.g(h),c=d.a(v.shape,x.shape,e,m,n,y,!1,o),l=t.conv2d(v,x,c);return r([v,x]),l},I,null,o.A,k);return j?Object(f.a)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}})},function(t,e,n){"use strict";n.d(e,"c",(function(){return l})),n.d(e,"a",(function(){return h})),n.d(e,"b",(function(){return f}));var r=n(177),o=n(222),c=n(249);const l=Object(o.a)((a,b)=>a+b),d=Object(c.b)((t,e,n,r)=>({real:t+n,imag:e+r})),h=Object(c.a)(r.d,l,d),f={kernelName:r.d,backendName:"cpu",kernelFunc:h}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return h})),n.d(e,"c",(function(){return f}));var r=n(190),o=n(237);function c(t,element,e){const n=function(t,e,n){return function(t,e,n){let r=0,o=t.length,c=0,l=!1;for(;r<o;){c=r+(o-r>>>1);const d=n(e,t[c]);d>0?r=c+1:(o=c,l=!d)}return l?r:-r-1}(t,e,n||l)}(t,element,e),r=n<0?-(n+1):n;t.splice(r,0,element)}function l(a,b){return a>b?1:a<b?-1:0}function d(t,e,n,r,o){return m(t,e,n,r,o,0).selectedIndices}function h(t,e,n,r,o,c){return m(t,e,n,r,o,0,!1,c,!0)}function f(t,e,n,r,o,c){return m(t,e,n,r,o,c,!0)}function m(t,e,n,l,d,h,f=!1,m=!1,v=!1){const j=[];for(let i=0;i<e.length;i++)e[i]>d&&j.push({score:e[i],boxIndex:i,suppressBeginIndex:0});j.sort(x);const w=h>0?-.5/h:0,I=[],k=[];for(;I.length<n&&j.length>0;){const e=j.pop(),{score:n,boxIndex:r,suppressBeginIndex:o}=e;if(n<d)break;let h=!1;for(let n=I.length-1;n>=o;--n){const o=y(t,r,I[n]);if(o>=l){h=!0;break}if(e.score=e.score*O(l,w,o),e.score<=d)break}e.suppressBeginIndex=I.length,h||(e.score===n?(I.push(r),k.push(e.score)):e.score>d&&c(j,e,x))}const N=I.length,T=n-N;m&&T>0&&(I.push(...new Array(T).fill(0)),k.push(...new Array(T).fill(0)));const C={selectedIndices:Object(o.a)(I,"int32")};return f&&(C.selectedScores=Object(o.a)(k,"float32")),v&&(C.validOutputs=Object(r.a)(N,"int32")),C}function y(t,i,e){const n=t.subarray(4*i,4*i+4),r=t.subarray(4*e,4*e+4),o=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),l=Math.max(n[0],n[2]),d=Math.max(n[1],n[3]),h=Math.min(r[0],r[2]),f=Math.min(r[1],r[3]),m=Math.max(r[0],r[2]),y=Math.max(r[1],r[3]),O=(l-o)*(d-c),x=(m-h)*(y-f);if(O<=0||x<=0)return 0;const v=Math.max(o,h),j=Math.max(c,f),w=Math.min(l,m),I=Math.min(d,y),k=Math.max(w-v,0)*Math.max(I-j,0);return k/(O+x-k)}function O(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function x(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(181),o=n(271),c=n(182);function l(t,e,n,l){if(null==l&&(l=Object(o.r)(t)),"complex64"===l)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(o.A)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Object(o.c)(e);const t=Object(o.N)(e),r=Object(o.N)(n);Object(o.b)(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let i=0;i<n.length;++i){const t=n[i],r=i!==n.length-1||t!==Object(o.N)(e.slice(i));Object(o.b)(n[i]===e[i]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return Object(o.A)(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==l?Object(c.toTypedArray)(t,l):Object(o.m)(t,[],!0),r.a.makeTensor(t,e,l)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({clone_:function(t){const e=Object(c.a)(t,"x","clone",null),n={x:e};return r.a.runKernelFunc(()=>r.a.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,o.mb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({equal_:function(a,b){let t=Object(l.a)(a,"a","equal"),e=Object(l.a)(b,"b","equal");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.equal(t,e),n,null,o.U)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(183),m=n(203);const y=Object(h.a)({max_:function(t,e=null,n=!1){const h=Object(c.a)(t,"x","max"),y={x:h},O={reductionIndices:e,keepDims:n};return r.a.runKernelFunc((t,r)=>{let o=l.I(e,h.shape);const c=d.f(o,h.rank);let y=h;null!=c&&(y=Object(m.a)(h,c),o=d.g(o.length,y.rank));const O=t.max(y,o);null!=c&&y.dispose();let x=O;if(n){const t=d.e(x.shape,l.I(e,h.shape));x=Object(f.a)(x,t),O.dispose()}return r([h,x]),x},y,null,o.Cb,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(179),o=n(271),c=n(233);function l(t,e){Object(o.d)(t);const n=Object(r.c)(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(c.a)(t,null,n,e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(179),o=n(271),c=n(178),l=n(183);const d=Object(c.a)({expandDims_:function(t,e=0){const n=Object(r.a)(t,"x","expandDims",null);o.b(e<=n.rank,()=>"Axis must be <= rank of the tensor");const c=n.shape.slice();return e<0&&(o.b(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),c.splice(e,0,1),Object(l.a)(n,c)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(307);const f=Object(d.a)({split_:function(t,e,n=0){const d=Object(c.a)(t,"x","split"),f={x:d},m={numOrSizeSplits:e,axis:n};return r.a.runKernelFunc((t,r)=>{const o=Object(l.I)(n,d.shape)[0],c=Object(h.a)(d,e,o);return t.split(d,c,o)},f,null,o.Ac,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({abs_:function(t){const e=Object(c.a)(t,"x","abs"),n={x:e};return r.a.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,o.a)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(271),c=n(215),l=n(217);function d(t,e="float32"){if("complex64"===e){const e=d(t,"float32"),n=Object(l.a)(t,"float32");return Object(c.a)(e,n)}const n=Object(o.D)(Object(o.N)(t),e);return r.a.makeTensor(n,t,e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(178),d=n(186);const h=Object(l.a)({relu_:function(t){const e=Object(c.a)(t,"x","relu"),n={x:e};return r.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Object(d.a)(e,"int32"):t.relu(e)),n,null,o.dc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({log_:function(t){const e=Object(c.a)(t,"x","log"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},n,null,o.wb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({step_:function(t,e=0){const n=Object(c.a)(t,"x","step"),l={x:n},d={alpha:e};return r.a.runKernelFunc(t=>t.step(n,e),l,null,o.Ec,d)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(192),h=n(178),f=n(183);const m=Object(h.a)({depthwiseConv2d_:function(t,filter,e,n,h="NHWC",m=[1,1],y){const O=Object(c.a)(t,"x","depthwiseConv2d"),x=Object(c.a)(filter,"filter","depthwiseConv2d");let v=O,j=!1;3===O.rank&&(j=!0,v=Object(f.a)(O,[1,O.shape[0],O.shape[1],O.shape[2]])),l.b(4===v.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${v.rank}.`),l.b(4===x.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+x.rank+"."),l.b(v.shape[3]===x.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${v.shape[3]}) must match the inChannels dimension in filter ${x.shape[2]}.`),null!=y&&l.b(l.v(n),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${y} but got pad ${n}.`);const w={x:v,filter:x},I={strides:e,pad:n,dataFormat:h,dilations:m,dimRoundingMode:y},k=r.a.runKernelFunc((t,r)=>{null==m&&(m=[1,1]),l.b(d.h(e,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${m}'`);const o=d.a(v.shape,x.shape,e,m,n,y,!0),c=t.depthwiseConv2D(v,x,o);return r([v,x]),c},w,null,o.L,I);return j?Object(f.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(186),f=n(178);const m=Object(f.a)({maximum_:function(a,b){let t=Object(l.a)(a,"a","maximum"),e=Object(l.a)(b,"b","maximum");[t,e]=Object(c.b)(t,e),"bool"===t.dtype&&(t=Object(h.a)(t,"int32"),e=Object(h.a)(e,"int32")),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.maximum(t,e);return r([t,e]),o},n,null,o.Ib)}})},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return h}));var r=n(177),o=n(188),c=n(418),l=n(269);function d(t,e,n,r){return null==n?({inputs:n,backend:c})=>{const{a:a,b:b}=n,l=c;Object(o.a)([a,b],t);const d=l.data.get(a.dataId).values,h=l.data.get(b.dataId).values,f=r||a.dtype,[m,y]=e(a.shape,b.shape,d,h,f);return l.makeTensorInfo(y,f,m)}:({inputs:t,backend:o})=>{const{a:a,b:b}=t,d=o;if("complex64"===a.dtype||"complex64"===b.dtype){const t=Object(c.a)({inputs:{x:a},backend:d,attrs:{dtype:"complex64"}}),e=d.data.get(t.dataId),r=e.complexTensorInfos.real,o=e.complexTensorInfos.imag,h=d.data.get(r.dataId).values,f=d.data.get(o.dataId).values,m=Object(c.a)({inputs:{x:b},backend:d,attrs:{dtype:"complex64"}}),y=d.data.get(m.dataId),O=y.complexTensorInfos.real,x=y.complexTensorInfos.imag,v=d.data.get(O.dataId).values,j=d.data.get(x.dataId).values,[w,I,k]=n(a.shape,b.shape,h,f,v,j),N=d.makeTensorInfo(k,"float32",w),T=d.makeTensorInfo(k,"float32",I),C=Object(l.a)({inputs:{real:N,imag:T},backend:d});return d.disposeIntermediateTensorInfo(t),d.disposeIntermediateTensorInfo(m),d.disposeIntermediateTensorInfo(N),d.disposeIntermediateTensorInfo(T),C}{const t=d.data.get(a.dataId).values,n=d.data.get(b.dataId).values,o=r||a.dtype,[c,l]=e(a.shape,b.shape,t,n,o);return d.makeTensorInfo(l,o,c)}}}function h(t){return(e,n,o,c,l,d)=>{const h=r.Tb.assertAndGetBroadcastShape(e,n),f=r.Hc.sizeFromShape(h),m=h.length,y=r.Hc.computeStrides(h),O=r.Hc.getTypedArrayFromDType("float32",f),x=r.Hc.getTypedArrayFromDType("float32",f),v=r.Tb.getBroadcastDims(e,h),j=r.Tb.getBroadcastDims(n,h),w=r.Tb.mergeRealAndImagArrays(o,c),I=r.Tb.mergeRealAndImagArrays(l,d),k=e.length,N=r.Hc.computeStrides(e),T=n.length,C=r.Hc.computeStrides(n);if(v.length+j.length===0)for(let i=0;i<O.length;i++){const e=i%w.length,n=i%I.length,r=t(w[2*e],w[2*e+1],I[2*n],I[2*n+1]);O[i]=r.real,x[i]=r.imag}else for(let i=0;i<O.length;i++){const e=r.Hc.indexToLoc(i,m,y),n=e.slice(-k);v.forEach(t=>n[t]=0);const o=r.Hc.locToIndex(n,k,N),c=e.slice(-T);j.forEach(t=>c[t]=0);const l=r.Hc.locToIndex(c,T,C),d=t(w[2*o],w[2*o+1],I[2*l],I[2*l+1]);O[i]=d.real,x[i]=d.imag}return[O,x,h]}}},function(t,e,n){"use strict";function r(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));const o={kernelName:n(177).U,backendName:"cpu",kernelFunc:r}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t){return(e,n,o)=>{const c=r.Hc.getTypedArrayFromDType(n,e.length);for(let i=0;i<e.length;++i)c[i]=t(e[i],o);return c}}},function(t,e,n){"use strict";n.d(e,"b",(function(){return d})),n.d(e,"a",(function(){return h})),n.d(e,"c",(function(){return f})),n.d(e,"e",(function(){return m})),n.d(e,"d",(function(){return y}));var r=n(199),o=n(371);const c=Object(o.a)("kernelRegistry",()=>new Map),l=Object(o.a)("gradRegistry",()=>new Map);function d(t,e){const n=O(t,e);return c.get(n)}function h(t){return l.get(t)}function f(t){const e=c.entries(),n=[];for(;;){const{done:r,value:o}=e.next();if(r)break;const[c,l]=o,[d]=c.split("_");d===t&&n.push(l)}return n}function m(t){const{kernelName:e,backendName:n}=t,r=O(e,n);c.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),c.set(r,t)}function y(t){const{kernelName:e}=t;l.has(e)&&Object(r.b)().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),l.set(e,t)}function O(t,e){return`${e}_${t}`}},function(t,e,n){"use strict";(function(t){var e=n(302),r=n(199);const o=Object(r.b)();o.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),o.registerFlag("IS_BROWSER",()=>e.isBrowser()),o.registerFlag("IS_NODE",()=>void 0!==t&&void 0!==t.versions&&void 0!==t.versions.node),o.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),o.registerFlag("PROD",()=>!1),o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>o.getBool("DEBUG")),o.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),o.registerFlag("IS_TEST",()=>!1)}).call(this,n(108))},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(179),o=n(233);function c(t,e,n){const c=Object(r.c)(t,n);return Object(o.a)(t,e,c,n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({unstack_:function(t,e=0){const n=Object(c.a)(t,"x","unstack");l.b(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const d={value:n},h={axis:e};return r.a.runKernelFunc(t=>t.unstack(n,e),d,null,o.Oc,h)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({real_:function(input){const t=Object(c.a)(input,"input","real"),e={input:t};return r.a.runKernelFunc(e=>e.real(t),e,null,o.bc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({imag_:function(input){const t=Object(c.a)(input,"input","imag"),e={input:t};return r.a.runKernelFunc(e=>e.imag(t),e,null,o.nb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(234),h=n(178),f=n(183);const m=Object(h.a)({reverse_:function(t,e){const n=Object(c.a)(t,"x","reverse"),h={x:n},m={dims:e};return r.a.runKernelFunc(t=>{const r=Object(l.I)(e,n.shape);if(0===n.rank)return Object(d.a)(n);const o=t.reverse(n,r);return Object(f.a)(o,n.shape)},h,null,o.kc,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({tile_:function(t,e){const n=Object(c.a)(t,"x","tile",null);l.b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const d=[n],h={x:n},f={reps:e};return r.a.runKernelFunc((t,r)=>{const o=t.tile(n,e);return r([n]),o},h,null,o.Kc,f,d)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({notEqual_:function(a,b){let t=Object(l.a)(a,"a","notEqual"),e=Object(l.a)(b,"b","notEqual");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.notEqual(t,e),n,null,o.Tb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(186),f=n(178);const m=Object(f.a)({minimum_:function(a,b){let t=Object(l.a)(a,"a","minimum"),e=Object(l.a)(b,"b","minimum");[t,e]=Object(c.b)(t,e),"bool"===t.dtype&&(t=Object(h.a)(t,"int32"),e=Object(h.a)(e,"int32")),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.minimum(t,e);return r([t,e]),o},n,null,o.Lb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({squaredDifference_:function(a,b){let t=Object(l.a)(a,"a","squaredDifference"),e=Object(l.a)(b,"b","squaredDifference");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.squaredDifference(t,e);return r([t,e]),o},n,null,o.Dc,{})}})},function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return l}));var r=n(271);function o(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,c="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(c+` update.rank < ${o}. `);if(t.length<r+(n.rank-o))throw new Error(c+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(c+" update.rank != "+(o+t.length-r));for(let t=0;t<o;++t)if(n.shape[t]!==e.shape[t])throw new Error(c+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-o;++e)if(n.shape[e+o]!==t[e+r])throw new Error(c+` updates.shape[${e+o}] (${n.shape[e+o]}) != shape[${e+o}] (${t[e+o]})`)}function c(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}o(n,e,t)}function l(t,e,n){const o=e.shape.length,c=o>1?e.shape[o-1]:1,l=n.length;let d=1;for(let i=c;i<l;++i)d*=n[i];const h=c<1?1:c;return{sliceRank:c,numUpdates:Object(r.N)(e.shape)/h,sliceSize:d,strides:[...Object(r.j)(n.slice(0,c)),1],outputSize:Object(r.N)(n)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({spaceToBatchND_:function(t,e,n){const d=Object(c.a)(t,"x","spaceToBatchND");l.b(d.rank>=1+e.length,()=>`input rank ${d.rank} should be > than [blockShape] ${e.length}`),l.b(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),l.b(d.shape.reduce((a,b,i)=>i>0&&i<=e.length?a&&(b+n[i-1][0]+n[i-1][1])%e[i-1]==0:a,!0),()=>`input spatial dimensions ${d.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const h={x:d},f={blockShape:e,paddings:n};return r.a.runKernelFunc(t=>t.spaceToBatchND(d,e,n),h,null,o.yc,f)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(189),h=n(178);const f=Object(h.a)({less_:function(a,b){let t=Object(l.a)(a,"a","less"),e=Object(l.a)(b,"b","less");[t,e]=Object(c.b)(t,e),Object(d.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.less(t,e),n,null,o.tb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({logicalNot_:function(t){const e=Object(c.a)(t,"x","logicalNot","bool"),n={x:e};return r.a.runKernelFunc(t=>t.logicalNot(e),n,null,o.Ab)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({batchToSpaceND_:function(t,e,n){const d=Object(c.a)(t,"x","batchToSpaceND"),h=e.reduce((a,b)=>a*b);l.b(d.rank>=1+e.length,()=>`input rank is ${d.rank} but should be > than blockShape.length ${e.length}`),l.b(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),l.b(d.shape[0]%h==0,()=>`input tensor batch is ${d.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${h}`);const f={x:d},m={blockShape:e,crops:n};return r.a.runKernelFunc(t=>t.batchToSpaceND(d,e,n),f,null,o.t,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const r={};function o(t){return r[t]}},function(t,e,n){"use strict";function r(t){const{inputs:e,backend:n}=t,{real:r,imag:o}=e,c=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values,d=n.makeTensorInfo(r.shape,"complex64");return n.data.get(d.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",c),imag:n.makeTensorInfo(o.shape,"float32",l)},d}n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));const o={kernelName:n(177).p,backendName:"cpu",kernelFunc:r}},,function(t,e,n){"use strict";function r(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function o(t,e,n){return Math.max(t,Math.min(e,n))}function c(t){return t%2==0?t:t+1}function l(t){let e=0;for(let i=0;i<t.length;i++)e+=t[i];return e}function d(a,b){const t=Math.random();return b*t+(1-t)*a}function h(a,b){let t=0;for(let i=0;i<a.length;i++){const e=Number(a[i])-Number(b[i]);t+=e*e}return t}function f(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function m(t,e,n=""){f(j(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function y(a){f(null!=a,()=>"The input to the tensor constructor must be a non-null value.")}function O(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||M(t)&&!n)for(let i=0;i<t.length;++i)O(t[i],e,n);else e.push(t);return e}function x(t){if(0===t.length)return 1;let e=t[0];for(let i=1;i<t.length;i++)e*=t[i];return e}function v(t){return 0===t.length}function j(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(t[i]!==e[i])return!1;return!0}function w(a){return a%1==0}function I(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function k(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function N(t){const e=new Uint32Array(t);for(let i=0;i<t;++i)e[i]=i;return r(e),e}function T(a,t){return t<=a.length?a:a+" ".repeat(t-a.length)}function C(t,e=(t=>0),n){return new Promise((r,o)=>{let c=0;const l=()=>{if(t())return void r();c++;const d=e(c);null!=n&&c>=n?o():setTimeout(l,d)};l()})}function $(t,e){let n=1,r=-1;for(let i=0;i<t.length;++i)if(t[i]>=0)n*=t[i];else if(-1===t[i]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${i}`);r=i}else if(t[i]<0)throw Error(`Shapes can not be < 0. Found ${t[i]} at dim ${i}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const o=t.slice();return o[r]=e/n,o}function S(t,e){const n=e.length;return f((t=null==t?e.map((s,i)=>i):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),f(t.every(t=>w(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(a=>a<0?n+a:a)}function E(t,e){const n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,c=null==e||o?null:S(e,t).sort();let l=0;for(let i=0;i<t.length;++i){if(null!=c){if(c[l]===i&&1!==t[i])throw new Error(`Can't squeeze axis ${i} since its dim '${t[i]}' is not 1`);(null==c[l]||c[l]>i)&&1===t[i]&&(n.push(t[i]),r.push(i)),c[l]<=i&&l++}1!==t[i]&&(n.push(t[i]),r.push(i))}return{newShape:n,keptDims:r}}function R(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function A(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function F(t,e){for(let i=0;i<t.length;i++){const n=t[i];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${e} being uploaded contains ${n}.`)}}function D(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function _(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function M(a){return a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array}function P(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function B(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function L(t){return"string"==typeof t||t instanceof String}function z(t){return"boolean"==typeof t}function V(t){return"number"==typeof t}function W(t){return Array.isArray(t)?W(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":V(t)?"float32":L(t)?"string":z(t)?"bool":"float32"}function H(t){return!!(t&&t.constructor&&t.call&&t.apply)}function U(t,e){for(let i=e;i<t;++i)if(t%i==0)return i;return t}function G(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let i=e-3;i>=0;--i)n[i]=n[i+1]*t[i+1];return n}function K(t,a){if(0===t.length)return a[0];const e=t.reduce((t,e)=>t*e);if(0===e)return[];if(e!==a.length)throw new Error(`[${t}] does not match the input size ${a.length}.`);return function t(e,n,a){const r=new Array;if(1===n.length){const t=n[0];for(let i=0;i<t;i++)r[i]=a[e+i]}else{const o=n[0],c=n.slice(1),l=c.reduce((t,e)=>t*e);for(let i=0;i<o;i++)r[i]=t(e+i*l,c,a)}return r}(0,t,a)}function X(t,e){const n=Y(t,e);for(let i=0;i<n.length;i++)n[i]=1;return n}function Y(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function Q(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return K(t,new Float32Array(n));if("int32"===e)return K(t,new Int32Array(n));if("bool"===e)return K(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function J(t){t.forEach(e=>{f(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function Z(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let i=0;i<t.length-1;++i)r+=n[i]*t[i];return r}function tt(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let i=0;i<r.length-1;++i)r[i]=Math.floor(t/n[i]),t-=r[i]*n[i];return r[r.length-1]=t,r}function et(object){return object&&object.then&&"function"==typeof object.then}n.d(e,"M",(function(){return r})),n.d(e,"i",(function(){return o})),n.d(e,"H",(function(){return c})),n.d(e,"Q",(function(){return l})),n.d(e,"J",(function(){return d})),n.d(e,"l",(function(){return h})),n.d(e,"b",(function(){return f})),n.d(e,"e",(function(){return m})),n.d(e,"d",(function(){return y})),n.d(e,"m",(function(){return O})),n.d(e,"N",(function(){return x})),n.d(e,"y",(function(){return v})),n.d(e,"a",(function(){return j})),n.d(e,"v",(function(){return w})),n.d(e,"R",(function(){return I})),n.d(e,"O",(function(){return k})),n.d(e,"k",(function(){return N})),n.d(e,"L",(function(){return T})),n.d(e,"K",(function(){return C})),n.d(e,"s",(function(){return $})),n.d(e,"I",(function(){return S})),n.d(e,"P",(function(){return E})),n.d(e,"o",(function(){return R})),n.d(e,"n",(function(){return A})),n.d(e,"h",(function(){return F})),n.d(e,"B",(function(){return D})),n.d(e,"p",(function(){return _})),n.d(e,"A",(function(){return M})),n.d(e,"g",(function(){return P})),n.d(e,"f",(function(){return B})),n.d(e,"z",(function(){return L})),n.d(e,"t",(function(){return z})),n.d(e,"w",(function(){return V})),n.d(e,"r",(function(){return W})),n.d(e,"u",(function(){return H})),n.d(e,"G",(function(){return U})),n.d(e,"j",(function(){return G})),n.d(e,"S",(function(){return K})),n.d(e,"D",(function(){return X})),n.d(e,"F",(function(){return Y})),n.d(e,"E",(function(){return Q})),n.d(e,"c",(function(){return J})),n.d(e,"C",(function(){return Z})),n.d(e,"q",(function(){return tt})),n.d(e,"x",(function(){return et}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));class r{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class o{time(t){return c("time")}read(t){return c("read")}readSync(t){return c("readSync")}numDataIds(){return c("numDataIds")}disposeData(t){return c("disposeData")}write(t,e,n){return c("write")}move(t,e,n,r){return c("move")}memory(){return c("memory")}floatPrecision(){return c("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(a,b,t,e){return c("batchMatMul")}fusedBatchMatMul({a:a,b:b,transposeA:t,transposeB:e,bias:n,activation:r,preluActivationWeights:o}){return c("fusedBatchMatMul")}slice(t,e,n){return c("slice")}stridedSlice(t,e,n,r){return c("stridedSlice")}unstack(t,e){return c("unstack")}reverse(a,t){return c("reverse")}concat(t,e){return c("concat")}neg(a){return c("neg")}add(a,b){return c("add")}addN(t){return c("addN")}subtract(a,b){return c("subtract")}multiply(a,b){return c("multiply")}realDivide(a,b){return c("realDivide")}floorDiv(a,b){return c("floorDiv")}sum(t,e){return c("sum")}prod(t,e){return c("prod")}unsortedSegmentSum(t,e,n){return c("unsortedSegmentSum")}argMin(t,e){return c("argMin")}argMax(t,e){return c("argMax")}equal(a,b){return c("equal")}notEqual(a,b){return c("notEqual")}less(a,b){return c("less")}lessEqual(a,b){return c("lessEqual")}greater(a,b){return c("greater")}greaterEqual(a,b){return c("greaterEqual")}logicalNot(a){return c("logicalNot")}logicalAnd(a,b){return c("logicalAnd")}logicalOr(a,b){return c("logicalOr")}where(t){return c("where")}select(t,a,b){return c("select")}topk(t,e,n){return c("topk")}min(t,e){return c("min")}minimum(a,b){return c("minimum")}mod(a,b){return c("mod")}max(t,e){return c("max")}maximum(a,b){return c("maximum")}all(t,e){return c("all")}any(t,e){return c("any")}squaredDifference(a,b){return c("squaredDifference")}ceil(t){return c("ceil")}floor(t){return c("floor")}round(t){return c("round")}sign(t){return c("sign")}isNaN(t){return c("isNaN")}isInf(t){return c("isInf")}isFinite(t){return c("isFinite")}pow(a,b){return c("pow")}exp(t){return c("exp")}expm1(t){return c("expm1")}softmax(t,e){return c("softmax")}log(t){return c("log")}log1p(t){return c("log1p")}sqrt(t){return c("sqrt")}rsqrt(t){return c("rsqrt")}square(t){return c("square")}reciprocal(t){return c("reciprocal")}relu(t){return c("relu")}relu6(t){return c("relu6")}prelu(t,a){return c("prelu")}elu(t){return c("elu")}eluDer(t,e){return c("eluDer")}selu(t){return c("selu")}int(t){return c("int")}clip(t,e,n){return c("clip")}abs(t){return c("abs")}complexAbs(t){return c("complexAbs")}sigmoid(t){return c("sigmoid")}softplus(t){return c("softplus")}sin(t){return c("sin")}cos(t){return c("cos")}tan(t){return c("tan")}asin(t){return c("asin")}acos(t){return c("acos")}atan(t){return c("atan")}atan2(a,b){return c("atan2")}sinh(t){return c("sinh")}cosh(t){return c("cosh")}tanh(t){return c("tanh")}asinh(t){return c("asinh")}acosh(t){return c("acosh")}atanh(t){return c("atanh")}erf(t){return c("erf")}step(t,e){return c("step")}fusedConv2d({input:input,filter:filter,convInfo:t,bias:e,activation:n,preluActivationWeights:r}){return c("fusedConv2d")}conv2d(t,filter,e){return c("conv2d")}conv2dDerInput(t,filter,e){return c("conv2dDerInput")}conv2dDerFilter(t,e,n){return c("conv2dDerFilter")}fusedDepthwiseConv2D({input:input,filter:filter,convInfo:t,bias:e,activation:n,preluActivationWeights:r}){return c("fusedDepthwiseConv2D")}depthwiseConv2D(input,filter,t){return c("depthwiseConv2D")}depthwiseConv2DDerInput(t,filter,e){return c("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return c("depthwiseConv2DDerFilter")}conv3d(t,filter,e){return c("conv3d")}conv3dDerInput(t,filter,e){return c("conv3dDerInput")}conv3dDerFilter(t,e,n){return c("conv3dDerFilter")}maxPool(t,e){return c("maxPool")}maxPoolBackprop(t,e,n,r){return c("maxPoolBackprop")}avgPool(t,e){return c("avgPool")}avgPoolBackprop(t,e,n){return c("avgPoolBackprop")}avgPool3d(t,e){return c("avgPool3d")}avgPool3dBackprop(t,e,n){return c("avgPool3dBackprop")}maxPool3d(t,e){return c("maxPool3d")}maxPool3dBackprop(t,e,n,r){return c("maxPool3dBackprop")}reshape(t,e){return c("reshape")}cast(t,e){return c("cast")}tile(t,e){return c("tile")}pad(t,e,n){return c("pad")}transpose(t,e){return c("transpose")}gather(t,e,n){return c("gather")}gatherND(t,e){return c("gatherND")}scatterND(t,e,n){return c("scatterND")}batchToSpaceND(t,e,n){return c("batchToSpaceND")}spaceToBatchND(t,e,n){return c("spaceToBatchND")}resizeBilinear(t,e,n,r){return c("resizeBilinear")}resizeBilinearBackprop(t,e,n){return c("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return c("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return c("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,o,l){return c("batchNorm")}localResponseNormalization4D(t,e,n,r,o){return c("localResponseNormalization4D")}LRNGrad(t,e,n,r,o,l,d){return c("LRNGrad")}multinomial(t,e,n,r){return c("multinomial")}oneHot(t,e,n,r){return c("oneHot")}cumsum(t,e,n,r){return c("cumsum")}nonMaxSuppression(t,e,n,r,o){return c("nonMaxSuppression")}fft(t){return c("fft")}ifft(t){return c("ifft")}complex(t,e){return c("complex")}real(input){return c("real")}imag(input){return c("imag")}cropAndResize(image,t,e,n,r,o){return c("cropAndResize")}depthToSpace(t,e,n){return c("depthToSpace")}split(t,e,n){return c("split")}sparseToDense(t,e,n,r){return c("sparseToDense")}diag(t){return c("diag")}fill(t,e,n){return c("fill")}onesLike(t){return c("onesLike")}zerosLike(t){return c("zerosLike")}linspace(t,e,n){return c("linspace")}dispose(){return c("dispose")}}function c(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({floorDiv_:function(a,b){let t=Object(l.a)(a,"a","floorDiv"),e=Object(l.a)(b,"b","floorDiv");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.floorDiv(t,e);return r([t,e]),o},n,null,o.cb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({sigmoid_:function(t){const e=Object(c.a)(t,"x","sigmoid"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},n,null,o.rc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(271),l=n(178);const d=Object(l.a)({fft_:function(input){Object(c.b)("complex64"===input.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${input.dtype}.`);const t={input:input};return r.a.runKernelFunc(t=>{const e=input.shape[input.shape.length-1],n=input.size/e,r=input.as2D(n,e);return t.fft(r).reshape(input.shape)},t,null,o.Y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(271),l=n(178),d=n(183);const h=Object(l.a)({ifft_:function(input){Object(c.b)("complex64"===input.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${input.dtype}.`);const t={input:input};return r.a.runKernelFunc(t=>{const e=input.shape[input.shape.length-1],n=input.size/e,r=Object(d.a)(input,[n,e]),o=t.ifft(r);return Object(d.a)(o,input.shape)},t,null,o.lb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return j}));var r=n(271),o=n(215),c=n(209),l=n(257),d=n(178),h=n(256),f=n(183),m=n(206),y=n(239),O=n(217),x=n(196),v=n(275);const j=Object(d.a)({rfft_:function(input,t){Object(r.b)("float32"===input.dtype,()=>"The dtype for rfft() must be real value but got "+input.dtype);let e=input.shape[input.shape.length-1];const n=input.size/e;let d;if(null!=t&&t<e){const n=input.shape.map(t=>0),r=input.shape.map(t=>t);r[input.shape.length-1]=t,d=Object(m.a)(input,n,r),e=t}else if(null!=t&&t>e){const n=input.shape.map(t=>t);n[input.shape.length-1]=t-e,d=Object(c.a)([input,Object(O.a)(n)],input.shape.length-1),e=t}else d=input;const j=Object(x.a)(d),w=Object(f.a)(Object(o.a)(d,j),[n,e]),I=Object(v.a)(w),k=Math.floor(e/2)+1,N=Object(h.a)(I),T=Object(l.a)(I),C=Object(y.a)(N,[k,e-k],N.shape.length-1),$=Object(y.a)(T,[k,e-k],T.shape.length-1),S=d.shape.slice();return S[d.shape.length-1]=k,Object(f.a)(Object(o.a)(C[0],$[0]),S)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(234),d=n(178),h=n(183);const f=Object(d.a)({broadcastTo_:function(t,e){let input=Object(c.a)(t,"broadcastTo","x");const n=input.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<input.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${input.rank}.`);if(e.length>input.rank){const t=input.shape.slice();for(;t.length<e.length;)t.unshift(1);input=Object(h.a)(input,t)}const d=input.shape,f=Array.from(e);for(let i=e.length-1;i>=0;i--)if(d[i]===e[i])f[i]=1;else if(1!==input.shape[i])throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${e}].`);if(0===f.map((t,i)=>t>1?i:-1).filter(i=>i>=0).length)return Object(l.a)(input);const m={x:input},y={shape:e,inputShape:d};return r.a.runKernelFunc(t=>t.tile(input,f),m,null,o.u,y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(179),o=n(271),c=n(178),l=n(183);const d=Object(c.a)({squeeze_:function(t,e){const n=Object(r.a)(t,"x","squeeze");return Object(l.a)(n,Object(o.P)(n.shape,e).newShape)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return w}));var r=n(179),o=n(271),c=n(240),l=n(198),d=n(236),h=n(281),f=n(178),m=n(227),y=n(183),O=n(190),x=n(220),v=n(202),j=n(195);const w=Object(f.a)({norm_:function(t,e="euclidean",n=null,f=!1){const w=function t(e,p,n=null){if(0===e.rank)return Object(c.a)(e);if(1!==e.rank&&null===n)return t(Object(y.a)(e,[-1]),p,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===p)return Object(j.a)(Object(c.a)(e),n);if(p===1/0)return Object(d.a)(Object(c.a)(e),n);if(p===-1/0)return Object(h.a)(Object(c.a)(e),n);if("euclidean"===p||2===p)return Object(x.a)(Object(j.a)(Object(m.a)(Object(c.a)(e),Object(O.a)(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+p)}if(Array.isArray(n)&&2===n.length){if(1===p)return Object(d.a)(Object(j.a)(Object(c.a)(e),n[0]),n[1]-1);if(p===1/0)return Object(d.a)(Object(j.a)(Object(c.a)(e),n[1]),n[0]);if(p===-1/0)return Object(h.a)(Object(j.a)(Object(c.a)(e),n[1]),n[0]);if("fro"===p||"euclidean"===p)return Object(x.a)(Object(j.a)(Object(v.a)(e),n));throw new Error("Error in norm: invalid ord value: "+p)}throw new Error("Error in norm: invalid axis: "+n)}(t=Object(r.a)(t,"x","norm"),e,n);let I=w.shape;if(f){const e=Object(o.I)(n,t.shape);I=l.e(w.shape,e)}return Object(y.a)(w,I)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(183),m=n(203);const y=Object(h.a)({min_:function(t,e=null,n=!1){const h=Object(c.a)(t,"x","min"),y={x:h},O={axis:e,keepDims:n};return r.a.runKernelFunc((t,r)=>{const o=Object(l.I)(e,h.shape);let c=o;const y=d.f(c,h.rank);let O=h;null!=y&&(O=Object(m.a)(h,y),c=d.g(c.length,h.rank));const x=t.min(O,c);null!=y&&O.dispose();let v=x;if(n){const t=d.e(v.shape,o);v=Object(f.a)(x,t),x.dispose()}return r([h,v]),v},y,null,o.Kb,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return I}));var r=n(181),o=n(205),c=n(176),l=n(179),d=n(271),h=n(198),f=n(186),m=n(194),y=n(185),O=n(241),x=n(178),v=n(183),j=n(190),w=n(195);const I=Object(x.a)({mean_:function(t,e=null,n=!1){const x=Object(l.a)(t,"x","mean"),I=Object(d.I)(e,x.shape),k=Object(h.d)(x.shape,I)[1],N=Object(d.N)(k),T={x:x},C={axis:e,keepDims:n},$=()=>{const t=Object(j.a)(N),r=t.dtype===x.dtype?x:Object(f.a)(x,t.dtype),o=Object(m.a)(r,t);return Object(w.a)(o,e,n)};return Object(o.a)(t=>({value:r.a.runKernelFunc($,T,null,c.Jb,C),gradFunc:e=>{const n=t.shape.slice();I.forEach(t=>{n[t]=1});const r=Object(v.a)(e,n);return Object(m.a)(Object(y.a)(r,Object(O.a)(t.shape,"float32")),N)}}))(x)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return v}));var r=n(179),o=n(271),c=n(200),l=n(198),d=n(213),h=n(243),f=n(236),m=n(178),y=n(183),O=n(191),x=n(195);const v=Object(m.a)({logSumExp_:function(t,e=null,n=!1){const m=Object(r.a)(t,"x","logSumExp"),v=Object(o.I)(e,m.shape),j=Object(f.a)(m,v,!0),a=Object(O.a)(m,j),b=Object(d.a)(a),w=Object(x.a)(b,v),I=Object(h.a)(w),k=Object(c.a)(Object(y.a)(j,I.shape),I);if(n){const t=Object(l.e)(k.shape,v);return Object(y.a)(k,t)}return k}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({elu_:function(t){const e=Object(c.a)(t,"x","elu"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,o.S)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(186),d=n(178);const h=Object(d.a)({relu6_:function(t){const e=Object(c.a)(t,"x","relu6"),n={x:e};return r.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Object(l.a)(e,"int32"):t.relu6(e)),n,null,o.ec)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({prelu_:function(t,e){const n=Object(c.a)(t,"x","prelu"),l=Object(c.a)(e,"alpha","prelu"),d={x:n,alpha:l};return r.a.runKernelFunc((t,e)=>{const r=t.prelu(n,l);return e([n,l]),r},d,null,o.Yb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(198),d=n(178),h=n(203);const f=Object(d.a)({cumsum_:function(t,e=0,n=!1,d=!1){const f=Object(c.a)(t,"x","cumsum"),m={x:f},y={axis:e,exclusive:n,reverse:d};return r.a.runKernelFunc((t,r)=>{const o=Object(l.f)([e],f.rank);let c=f;null!=o&&(c=Object(h.a)(f,o));const m=Object(l.g)(1,f.rank)[0];let y=t.cumsum(c,m,n,d);if(r([f]),null!=o){const t=Object(l.h)(o);y=Object(h.a)(y,t)}return y},m,null,o.J,y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({unsortedSegmentSum_:function(t,e,n){const d=Object(c.a)(t,"x","unsortedSegmentSum"),h=Object(c.a)(e,"segmentIds","unsortedSegmentSum","int32");Object(l.b)(Object(l.v)(n),()=>"numSegments must be of dtype int");const f={x:d,segmentIds:h},m={numSegments:n};return r.a.runKernelFunc((t,e)=>{const r=t.unsortedSegmentSum(d,h,n);return e([h]),r},f,null,o.Pc,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({cos_:function(t){const e=Object(c.a)(t,"x","cos"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},n,null,o.G)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({pad_:function(t,e,n=0){const l=Object(c.a)(t,"x","pad");if(0===l.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const d={paddings:e,constantValue:n},h={x:l};return r.a.runKernelFunc((t,r)=>(r([l]),t.pad(l,e,n)),h,null,o.Wb,d)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(183),f=n(314);const m=Object(d.a)({gather_:function(t,e,n=0){const d=Object(c.a)(t,"x","gather"),m=Object(c.a)(e,"indices","gather","int32"),y={x:d,indices:m},O={axis:n};return r.a.runKernelFunc((t,e)=>{const r=Object(l.I)(n,d.shape)[0],o=Object(f.collectGatherOpShapeInfo)(d,m,r),c=t.gather(d,Object(h.a)(m,[m.size]),r);return e([d,m]),Object(h.a)(c,o.outputShape)},y,null,o.ib,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({mod_:function(a,b){let t=Object(l.a)(a,"a","mod"),e=Object(l.a)(b,"b","mod");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.mod(t,e);return r([t,e]),o},n,null,o.Nb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(186),h=n(192),f=n(178),m=n(183);const y=Object(f.a)({avgPool_:function(t,e,n,f,y){const O=Object(c.a)(t,"x","avgPool","float32");l.b(h.h(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let x=O,v=!1;3===O.rank&&(v=!0,x=Object(m.a)(O,[1,O.shape[0],O.shape[1],O.shape[2]])),l.b(4===x.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${x.rank}.`),null!=y&&l.b(l.v(f),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${y} but got pad ${f}.`);const j={x:x},w={filterSize:e,strides:n,pad:f,dimRoundingMode:y};let I=r.a.runKernelFunc((t,r)=>{const o=h.e(x.shape,e,n,1,f,y);return r([x]),1===o.filterWidth&&1===o.filterHeight&&l.a(o.inShape,o.outShape)?x.clone():t.avgPool(x,o)},j,null,o.o,w);return I=Object(d.a)(I,O.dtype),v?Object(m.a)(I,[I.shape[1],I.shape[2],I.shape[3]]):I}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(189),d=n(178);const h=Object(d.a)({logicalOr_:function(a,b){const t=Object(c.a)(a,"a","logicalOr","bool"),e=Object(c.a)(b,"b","logicalOr","bool");Object(l.a)(t.shape,e.shape);const n={a:t,b:e};return r.a.runKernelFunc(n=>n.logicalOr(t,e),n,null,o.Bb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(192),h=n(178),f=n(183);const m=Object(h.a)({maxPool_:function(t,e,n,h,m){const y=Object(c.a)(t,"x","maxPool");let O=y,x=!1;3===y.rank&&(x=!0,O=Object(f.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),l.b(4===O.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${O.rank}.`),l.b(d.h(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=m&&l.b(l.v(h),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${m} but got pad ${h}.`);const v={x:O},j={filterSize:e,strides:n,pad:h,dimRoundingMode:m},w=r.a.runKernelFunc((t,r)=>{const o=d.e(O.shape,e,n,1,h,m);let c;return c=1===o.filterWidth&&1===o.filterHeight&&l.a(o.inShape,o.outShape)?O.clone():t.maxPool(O,o),r([O,c]),c},v,null,o.Db,j);return x?Object(f.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},function(t,e,n){"use strict";function r(t){const{inputs:e,backend:n}=t,{input:input}=e,r=n.data.get(input.dataId).complexTensorInfos.real,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));const o={kernelName:n(177).qb,backendName:"cpu",kernelFunc:r}},function(t,e,n){"use strict";n.d(e,"c",(function(){return c})),n.d(e,"a",(function(){return l})),n.d(e,"b",(function(){return d}));var r=n(177),o=n(188);function c(t,e,n,o,c){const l=r.uc.isSliceContinous(o,e,n),d=r.Hc.sizeFromShape(n),h=r.Hc.computeStrides(o);if(l){const n=r.uc.computeFlatOffset(e,h);return t.subarray(n,n+d)}const f=r.Hc.getTypedArrayFromDType(c,d);for(let i=0;i<d;++i){const c=n.length,l=r.Hc.computeStrides(n),d=r.Hc.indexToLoc(i,c,l).map((t,n)=>t+e[n]),m=r.Hc.locToIndex(d,o.length,h);f[i]=t[m]}return f}function l(t){const{inputs:e,backend:n,attrs:l}=t,{x:d}=e,{begin:h,size:f}=l;Object(o.a)(d,"slice");const[m,y]=r.uc.parseSliceParams(d,h,f);r.uc.assertParamsValid(d,m,y);const O=c(n.data.get(d.dataId).values,m,y,d.shape,d.dtype);return n.makeTensorInfo(y,d.dtype,O)}const d={kernelName:r.Db,backendName:"cpu",kernelFunc:l}},function(t,e,n){"use strict";n.d(e,"c",(function(){return l})),n.d(e,"a",(function(){return h})),n.d(e,"b",(function(){return f}));var r=n(177),o=n(222),c=n(249);const l=Object(o.a)((t,e)=>t*e),d=Object(c.b)((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})),h=Object(c.a)(r.jb,l,d),f={kernelName:r.jb,backendName:"cpu",kernelFunc:h}},function(t,e,n){"use strict";n.d(e,"c",(function(){return l})),n.d(e,"a",(function(){return sub})),n.d(e,"b",(function(){return h}));var r=n(177),o=n(222),c=n(249);const l=Object(o.a)((t,e)=>t-e),d=Object(c.b)((t,e,n,r)=>({real:t-n,imag:e-r})),sub=Object(c.a)(r.Kb,l,d),h={kernelName:r.Kb,backendName:"cpu",kernelFunc:sub}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t,e,n,o,c){const l=e.length,d=r.Hc.sizeFromShape(e),h=r.Hc.computeStrides(e),f=r.Hc.computeStrides(c),m=r.Hc.getTypedArrayFromDType(n,r.Hc.sizeFromShape(c));for(let i=0;i<d;++i){const e=r.Hc.indexToLoc(i,l,h),n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[o[i]];m[r.Hc.locToIndex(n,l,f)]=t[i]}return m}},,function(t,e,n){"use strict";function r(){if("undefined"!=typeof navigator&&null!=navigator){const a=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))}return!1}function o(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(e),n.d(e,"isMobile",(function(){return r})),n.d(e,"isBrowser",(function(){return o}))},function(t,e,n){"use strict";function r(t,e=!1){console.log(t.toString(e))}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return c}));var r=n(271);function o(t,e){const n=t[0].length;t.forEach((t,i)=>{r.b(t.length===n,()=>`Error in concat${n}D: rank of tensors[${i}] must be the same as the rank of the rest (${n})`)}),r.b(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const o=t[0];t.forEach((t,i)=>{for(let c=0;c<n;c++)r.b(c===e||t[c]===o[c],()=>`Error in concat${n}D: Shape of tensors[${i}] (${t}) does not match the shape of the rest (${o}) along the non-concatenated axis ${i}.`)})}function c(t,e){const n=t[0].slice();for(let i=1;i<t.length;i++)n[e]+=t[i][e];return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(181),o=n(176);function c(t,e,n){const c={shape:t,value:e,dtype:n};return r.a.runKernelFunc(r=>r.fill(t,e,n),{},null,o.Z,c)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(271),l=n(237),d=n(217);function h(t,e,n=1,h="float32"){if(0===n)throw new Error("Cannot have a step of zero");const f={start:t,stop:e,step:n,dtype:h};return r.a.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return Object(d.a)([0],h);const r=Math.abs(Math.ceil((e-t)/n)),o=Object(c.F)(r,h);e<t&&1===n&&(n=-1),o[0]=t;for(let i=1;i<o.length;i++)o[i]=o[i-1]+n;return Object(l.a)(o,h)},{},null,o.ac,f)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(271);function o(t,e,n=0){let o=[];if("number"==typeof e)Object(r.b)(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),o=new Array(e).fill(t.shape[n]/e);else{const c=e.reduce((t,e)=>(-1===e&&(t+=1),t),0);Object(r.b)(c<=1,()=>"There should be only one negative value in split array.");const l=e.indexOf(-1);if(-1!==l){const r=e.reduce((a,b)=>b>0?a+b:a);e[l]=t.shape[n]-r}Object(r.b)(t.shape[n]===e.reduce((a,b)=>a+b),()=>"The sum of sizes must match the size of the axis dimension."),o=e}return o}},function(t,e,n){"use strict";n.d(e,"a",(function(){return v}));var r=n(215),o=n(209),c=n(257),l=n(185),d=n(178),h=n(256),f=n(183),m=n(258),y=n(190),O=n(206),x=n(276);const v=Object(d.a)({irfft_:function(input){const t=input.shape[input.shape.length-1],e=input.size/t;let n;if(t<=2){const r=Object(f.a)(input,[e,t]);n=Object(x.a)(r)}else{const d=[e,2*(t-1)],v=Object(f.a)(Object(h.a)(input),[e,t]),j=Object(f.a)(Object(c.a)(input),[e,t]),w=Object(m.a)(Object(O.a)(v,[0,1],[e,t-2]),1),I=Object(l.a)(Object(m.a)(Object(O.a)(j,[0,1],[e,t-2]),1),Object(y.a)(-1)),k=Object(o.a)([v,w],1),i=Object(o.a)([j,I],1),N=Object(f.a)(Object(r.a)(k,i),[d[0],d[1]]);n=Object(x.a)(N)}if(n=Object(h.a)(n),3===input.rank&&0!==input.shape[0]){const t=n,e=input.shape[0];n=Object(f.a)(n,[e,n.shape[0]/e,n.shape[1]]),t.dispose()}return n}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({log1p_:function(t){const e=Object(c.a)(t,"x","log1p"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},n,null,o.xb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(271),l=n(192),d=n(178),h=n(183);const f=Object(d.a)({conv2DBackpropInput_:function(t,e,filter,n,d,f="NHWC",m){c.b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let y=t,O=e,x=!1;3===e.rank&&(x=!0,O=Object(h.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]),y=[1,t[0],t[1],t[2]]),c.b(4===y.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+y.length+"."),c.b(4===O.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+O.rank),c.b(4===filter.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+filter.rank);const v="NHWC"===f?y[3]:y[1],j="NHWC"===f?O.shape[3]:O.shape[1];c.b(v===filter.shape[2],()=>`Error in conv2dDerInput: depth of input (${v}) must match input depth for filter ${filter.shape[2]}.`),c.b(j===filter.shape[3],()=>`Error in conv2dDerInput: depth of output (${j}) must match output depth for filter ${filter.shape[3]}.`),null!=m&&c.b(c.v(d),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${m} but got pad ${d}.`);const w={dy:O,filter:filter},I={strides:n,pad:d,dataFormat:f,dimRoundingMode:m,inputShape:y},k=r.a.runKernelFunc((t,e)=>{const r=l.g(f),o=l.a(y,filter.shape,n,1,d,m,!1,r),c=t.conv2dDerInput(O,filter,o);return e([O,filter]),c},w,null,o.C,I);return x?Object(h.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(271),l=n(192),d=n(178),h=n(183);const f=Object(d.a)({conv2DBackpropFilter_:function(t,e,n,d,f,m="NHWC",y){let O=t;3===t.rank&&(O=Object(h.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let x=e;3===x.rank&&(x=Object(h.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]])),c.b(4===O.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+O.shape+"."),c.b(4===x.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+x.shape+"."),c.b(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const v="NHWC"===m?O.shape[3]:O.shape[1],j="NHWC"===m?x.shape[3]:x.shape[1];c.b(v===n[2],()=>`Error in conv2dDerFilter: depth of input ${v}) must match input depth in filter (${n[2]}.`),c.b(j===n[3],()=>`Error in conv2dDerFilter: depth of dy (${j}) must match output depth for filter (${n[3]}).`),null!=y&&c.b(c.v(f),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${y} but got pad ${f}.`);const w={x:O,dy:x},I={strides:d,pad:f,dataFormat:m,dimRoundingMode:y,filterShape:n};return r.a.runKernelFunc(t=>{const e=l.g(m),r=l.a(O.shape,n,d,1,f,y,!1,e);return t.conv2dDerFilter(O,x,r)},w,null,o.B,I)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(179),o=n(271),c=n(233);function l(t,e,n){if(Object(o.d)(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const l=Object(r.c)(t,n);if(3!==l.length&&1!==l.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===l.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(c.a)(t,e,l,n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return c}));var r=n(271);const o=30;function c(t){return t<=o?t:Object(r.G)(t,Math.floor(Math.sqrt(t)))}},function(t,e,n){"use strict";n.r(e),n.d(e,"segOpComputeOptimalWindowSize",(function(){return c})),n.d(e,"computeOutShape",(function(){return l})),n.d(e,"collectGatherOpShapeInfo",(function(){return d}));var r=n(271),o=n(313);function c(t,e){let n,c=!1;for(t<=o.a?(n=t,c=!0):n=Object(r.G)(t,Math.floor(Math.sqrt(t)));!c;)n>e||n===t?c=!0:n=Object(r.G)(t,n+1);return n}function l(t,e,n){const r=[],o=t.length;for(let c=0;c<o;c++)c!==e?r.push(t[c]):r.push(n);return r}function d(t,e,n){const r=t.shape[n],o=[];let c=1,l=1;for(let i=0;i<n;i++)o.push(t.shape[i]),c*=t.shape[i];for(let i=0;i<e.rank;i++)o.push(e.shape[i]);for(let i=n+1;i<t.rank;i++)o.push(t.shape[i]),l*=t.shape[i];return{batchSize:c,sliceSize:l,dimSize:r,outputShape:o}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(216);function o(t,e){const n=[];for(let i=0;i<e.length;i++)e[i]&&n.push(i);const o=Object(r.a)(t,"int32"),c=Object(r.a)([n.length,t.length],"int32");for(let i=0;i<n.length;i++){const e=o.indexToLoc(n[i]),r=i*t.length;c.values.set(e,r)}return c.toTensor()}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({sin_:function(t){const e=Object(c.a)(t,"x","sin"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},n,null,o.tc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({sinh_:function(t){const e=Object(c.a)(t,"x","sinh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},n,null,o.uc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({rsqrt_:function(t){const e=Object(c.a)(t,"x","rsqrt"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},n,null,o.nc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({floor_:function(t){const e=Object(c.a)(t,"x","floor"),n={x:e};return r.a.runKernelFunc(t=>t.floor(e),n,null,o.bb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({cosh_:function(t){const e=Object(c.a)(t,"x","cosh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},n,null,o.H)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(183),m=n(203);const y=Object(h.a)({all_:function(t,e=null,n=!1){let h=Object(c.a)(t,"x","all","bool");const y={x:h},O={axis:e,keepDims:n};return r.a.runKernelFunc(t=>{const r=Object(l.I)(e,h.shape);let o=r;const c=Object(d.f)(o,h.rank);null!=c&&(h=Object(m.a)(h,c),o=Object(d.g)(o.length,h.rank));const y=t.all(h,o);if(n){const t=Object(d.e)(y.shape,r);return Object(f.a)(y,t)}return y},y,null,o.f,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(183),m=n(203);const y=Object(h.a)({any_:function(t,e=null,n=!1){let h=Object(c.a)(t,"x","any","bool");const y={x:h},O={axis:e,keepDims:n};return r.a.runKernelFunc(t=>{const r=Object(l.I)(e,h.shape);let o=r;const c=Object(d.f)(o,h.rank);null!=c&&(h=Object(m.a)(h,c),o=Object(d.g)(o.length,h.rank));const y=t.any(h,o);if(n){const t=Object(d.e)(y.shape,r);return Object(f.a)(y,t)}return y},y,null,o.g,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(203);const m=Object(h.a)({argMax_:function(t,e=0){let n=Object(c.a)(t,"x","argMax");const h={x:n},m={axis:e};return r.a.runKernelFunc((t,r)=>{r([n]);let o=l.I(e,n.shape);const c=d.f(o,n.rank);return null!=c&&(n=Object(f.a)(n,c),o=d.g(o.length,n.rank)),t.argMax(n,o[0])},h,null,o.h,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(178),f=n(203);const m=Object(h.a)({argMin_:function(t,e=0){let n=Object(c.a)(t,"x","argMin");const h={x:n},m={axis:e};return r.a.runKernelFunc((t,r)=>{r([n]),null==e&&(e=0);let o=l.I(e,n.shape);const c=d.f(o,n.rank);return null!=c&&(n=Object(f.a)(n,c),o=d.g(o.length,n.rank)),t.argMin(n,o[0])},h,null,o.i,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(193),l=n(179),d=n(178);const h=Object(d.a)({atan2_:function(a,b){let t=Object(l.a)(a,"a","atan2"),e=Object(l.a)(b,"b","atan2");[t,e]=Object(c.b)(t,e);const n={a:t,b:e};return r.a.runKernelFunc((n,r)=>{const o=n.atan2(t,e);return r([t,e]),o},n,null,o.m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(179),o=n(271),c=n(230),l=n(192),d=n(178),h=n(183);const f=Object(d.a)({conv1d_:function(t,filter,e,n,d="NWC",f=1,m){const y=Object(r.a)(t,"x","conv1d"),O=Object(r.a)(filter,"filter","conv1d");let x=y,v=!1;2===y.rank&&(v=!0,x=Object(h.a)(y,[1,y.shape[0],y.shape[1]])),o.b(3===x.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${x.rank}.`),o.b(3===O.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+O.rank+"."),null!=m&&o.b(o.v(n),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${m} but got pad ${n}.`),o.b(x.shape[2]===O.shape[1],()=>`Error in conv1d: depth of input (${x.shape[2]}) must match input depth for filter ${O.shape[1]}.`),o.b(l.h(e,f),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${f}'`),o.b("NWC"===d,()=>`Error in conv1d: got dataFormat of ${d} but only NWC is currently supported.`);const j=Object(h.a)(O,[1,O.shape[0],O.shape[1],O.shape[2]]),w=Object(h.a)(x,[x.shape[0],1,x.shape[1],x.shape[2]]),I=[1,e],k=[1,f],N=Object(c.a)(w,j,I,n,"NHWC",k,m);return v?Object(h.a)(N,[N.shape[2],N.shape[3]]):Object(h.a)(N,[N.shape[0],N.shape[2],N.shape[3]])}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(179),o=n(310),c=n(178);const l=Object(c.a)({conv2dTranspose_:function(t,filter,e,n,c,l){const d=Object(r.a)(t,"x","conv2dTranspose"),h=Object(r.a)(filter,"filter","conv2dTranspose");return Object(o.a)(e,d,h,n,c,"NHWC",l)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({depthToSpace_:function(t,e,n="NHWC"){const d=Object(c.a)(t,"x","depthToSpace"),h="NHWC"===n?d.shape[1]:d.shape[2],f="NHWC"===n?d.shape[2]:d.shape[3],m="NHWC"===n?d.shape[3]:d.shape[1];l.b(h*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${h} and ${e}  for depthToSpace with input shape\n    ${d.shape}`),l.b(f*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${f} and ${e} for depthToSpace with input shape\n        ${d.shape}`),l.b(m%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${m} for depthToSpace with input shape ${d.shape}`);const y={x:d},O={blockSize:e,dataFormat:n};return r.a.runKernelFunc(t=>t.depthToSpace(d,e,n),y,null,o.K,O)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(183);const f=Object(d.a)({dilation2d_:function(t,filter,e,n,d=[1,1],f="NHWC"){const m=Object(c.a)(t,"x","dilation2d"),y=Object(c.a)(filter,"filter","dilation2d");l.b(3===m.rank||4===m.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+m.rank+"."),l.b(3===y.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+y.rank+"."),l.b("NHWC"===f,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+f);let O=m,x=!1;3===m.rank&&(O=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]),x=!0);const v={x:O,filter:y},j={strides:e,pad:n,dilations:d},w=r.a.runKernel(o.O,v,j);return x?Object(h.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(193),o=n(179),c=n(194),l=n(235),d=n(178),h=n(210),f=n(196);const m=Object(d.a)({divNoNan_:function(a,b){let t=Object(o.a)(a,"a","div"),e=Object(o.a)(b,"b","div");[t,e]=Object(r.b)(t,e);const n=Object(c.a)(t,e),d=Object(f.a)(n),m=Object(l.a)(e,d);return Object(h.a)(m,d,n)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(179),o=n(271),c=n(228),l=n(178),d=n(183);const h=Object(l.a)({dot_:function(t,e){const n=Object(r.a)(t,"t1","dot"),l=Object(r.a)(e,"t2","dot");o.b(!(1!==n.rank&&2!==n.rank||1!==l.rank&&2!==l.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${l.rank}.`);const h=1===n.rank?n.size:n.shape[1],f=1===l.rank?l.size:l.shape[0];if(o.b(h===f,()=>`Error in dot: inner dimensions of inputs must match, but got ${h} and ${f}.`),1===n.rank&&1===l.rank){const t=Object(d.a)(n,[1,-1]),e=Object(d.a)(l,[-1,1]),r=Object(c.a)(t,e);return Object(d.a)(r,[])}if(1===n.rank&&2===l.rank){const t=Object(d.a)(n,[1,-1]),e=Object(d.a)(l,[l.shape[0],l.shape[1]]),r=Object(c.a)(t,e);return Object(d.a)(r,[r.size])}if(2===n.rank&&1===l.rank){const t=Object(d.a)(l,[-1,1]),e=Object(c.a)(n,t);return Object(d.a)(e,[e.size])}{const t=Object(d.a)(l,[l.shape[0],l.shape[1]]);return Object(c.a)(n,t)}}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(179),o=n(246),c=n(185),l=n(178),d=n(190);const h=Object(l.a)({leakyRelu_:function(t,e=.2){const n=Object(r.a)(t,"x","leakyRelu");return Object(o.a)(Object(c.a)(Object(d.a)(e),n),n)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(183);const f=Object(d.a)({localResponseNormalization_:function(t,e=5,n=1,d=1,f=.5){const m=Object(c.a)(t,"x","localResponseNormalization");l.b(4===m.rank||3===m.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${m.rank}.`),l.b(l.v(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let y=m,O=!1;3===m.rank&&(O=!0,y=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]));const x={x:y},v={depthRadius:e,bias:n,alpha:d,beta:f},j=r.a.runKernelFunc((t,r)=>{const o=t.localResponseNormalization4D(y,e,n,d,f);return r([y,o]),o},x,null,o.rb,v);return O?Object(h.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({softplus_:function(t){const e=Object(c.a)(t,"x","softplus"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},n,null,o.xc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(179),o=n(189),c=n(226),l=n(266),d=n(294),h=n(178);const f=Object(h.a)({logicalXor_:function(a,b){const t=Object(r.a)(a,"a","logicalXor","bool"),e=Object(r.a)(b,"b","logicalXor","bool");return Object(o.a)(t.shape,e.shape),Object(c.a)(Object(d.a)(a,b),Object(l.a)(Object(c.a)(a,b)))}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({mirrorPad_:function(t,e,n){l.b("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const d=Object(c.a)(t,"x","mirrorPad");if(0===d.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");l.b(e.length===d.rank,()=>`Padding doesn't match input. Must be ${d.rank}. Got ${e.length}.`);const h="reflect"===n?1:0;for(let i=0;i<d.rank;i++)l.b(2===e[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),l.b(e[i][0]>=0&&e[i][0]<=d.shape[i]-h&&e[i][1]>=0&&e[i][1]<=d.shape[i]-h,()=>`Padding in dimension ${i} cannot be greater than or equal to ${d.shape[i]-h} or less than 0 for input of shape `+d.shape);const f={paddings:e,mode:n},m={x:d};return r.a.runKernel(o.Mb,m,f)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(178),d=n(183);const h=Object(l.a)({oneHot_:function(t,e,n=1,l=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const h=Object(c.a)(t,"indices","oneHot","int32"),f=[...h.shape,e],m={indices:h},y={depth:e,onValue:n,offValue:l};return r.a.runKernelFunc((t,r)=>(r([h]),Object(d.a)(t.oneHot(Object(d.a)(h,[h.size]),e,n,l),f)),m,null,o.Ub,y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return O}));var r=n(179),o=n(271),c=n(293),l=n(267),d=n(192),h=n(295),f=n(178),m=n(183),y=n(264);const O=Object(f.a)({pool_:function(input,t,e,n,f,O){null==f&&(f=[1,1]),null==O&&(O=1),0===n&&(n="valid");const x=Object(r.a)(input,"x","maxPool");let v=x,j=!1;3===x.rank&&(j=!0,v=Object(m.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),o.b(d.h(O,f),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${O} and dilations '${f}'`);const w=d.e(v.shape,t,O,f,n),I=[w.dilationHeight,w.dilationWidth];let k;k="same"===n?function(t,e){const n=t.map((s,i)=>s+(s-1)*(e[i]-1)).map(s=>s-1),r=n.map(s=>Math.floor(s/2)),o=n.map((s,i)=>s-r[i]);return n.map((t,i)=>[r[i],o[i]])}([w.filterHeight,w.filterWidth],I):[[0,0],[0,0]];const N=1===I[0]&&1===I[1],[T,C]=function(t,e,n){const r=n.map(b=>b[0]),o=n.map(b=>b[1]),c=t.concat(r,o),l=e.map((b,i)=>(b-c[i]%b)%b),d=o.map((s,i)=>s+l[i]),h=e.map((t,i)=>[r[i],d[i]]),f=e.map((t,i)=>[0,l[i]]);return[h,f]}([w.inHeight,w.inWidth],I,k),$=N?n:"valid",S=N?v:Object(y.a)(v,I,T),E=("avg"===e?()=>Object(c.a)(S,t,O,$):()=>Object(h.a)(S,t,O,$))(),R=N?E:Object(l.a)(E,I,C);return j?Object(m.a)(R,[R.shape[1],R.shape[2],R.shape[3]]):R}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return O}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(198),h=n(186),f=n(178),m=n(183),y=n(203);const O=Object(f.a)({prod_:function(t,e=null,n=!1){let f=Object(c.a)(t,"x","prod");"bool"===f.dtype&&(f=Object(h.a)(f,"int32"));const O={x:f},x={axis:e,keepDims:n};return r.a.runKernelFunc(t=>{const r=Object(l.I)(e,f.shape),o=Object(d.f)(r,f.rank);let c=r,h=f;null!=o&&(h=Object(y.a)(f,o),c=Object(d.g)(c.length,f.rank));let O=t.prod(h,c);if(n){const t=Object(d.e)(O.shape,r);O=Object(m.a)(O,t)}return O},O,null,o.Zb,x)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({selu_:function(t){const e=Object(c.a)(t,"x","selu"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,o.qc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(179),o=n(271),c=n(230),l=n(245),d=n(178),h=n(183);const f=Object(d.a)({separableConv2d_:function(t,e,n,d,f,m=[1,1],y="NHWC"){const O=Object(r.a)(t,"x","separableConv2d"),x=Object(r.a)(e,"depthwiseFilter","separableConv2d"),v=Object(r.a)(n,"pointwiseFilter","separableConv2d");let j=O,w=!1;if(3===O.rank&&(w=!0,j=Object(h.a)(O,[1,O.shape[0],O.shape[1],O.shape[2]])),"NCHW"===y)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");o.b(4===j.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${j.rank}.`),o.b(4===x.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${x.rank}.`),o.b(4===v.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${x.rank}.`),o.b(1===v.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${v.shape[0]}.`),o.b(1===v.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${v.shape[1]}.`);const I=x.shape[2],k=x.shape[3];o.b(v.shape[2]===I*k,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${I*k}, but got ${v.shape[2]}.`);const N=Object(l.a)(j,x,d,f,y,m),T=Object(c.a)(N,v,1,"valid",y);return w?Object(h.a)(T,[T.shape[1],T.shape[2],T.shape[3]]):T}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({topk_:function(t,e=1,n=!0){const l=Object(c.a)(t,"x","topk");if(0===l.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const d=l.shape[l.shape.length-1];if(e>d)throw new Error(`'k' passed to topk() must be <= the last dimension (${d}) but got `+e);const h={x:l},f={k:e,sorted:n},[m,y]=r.a.runKernelFunc(b=>b.topk(l,e,n),h,null,o.Lc,f);return{values:m,indices:y}}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({unique_:function(t,e=0){const n=Object(c.a)(t,"x","unique",null);Object(l.b)(n.rank>0,()=>"The input tensor must be at least 1D");const d={x:n},h={axis:e},[f,m]=r.a.runKernel(o.Nc,d,h);return{values:f,indices:m}}})},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return c}));var r=n(181);n(179),n(271);function o(){return 32===r.a.backend.floatPrecision()?.001:.1}function c(a,t,e){if(null==e&&(e=o()),!l(a,t,e))throw new Error(`Numbers differ: actual === ${a}, expected === ${t}`)}function l(a,t,e){return!isFinite(a)&&!isFinite(t)||!(isNaN(a)||isNaN(t)||Math.abs(a-t)>e)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return c}));var r=n(177);function o(t){const e=new Float32Array(t.length);for(let i=0;i<t.length;++i)e[i]=Math.abs(t[i]);return e}const c={kernelName:r.a,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;let c=new Float32Array(r.Hc.sizeFromShape(e.shape));if("complex64"!==e.dtype){c=o(n.data.get(e.dataId).values)}else{const t=n.data.get(e.dataId),r=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values;for(let i=0;i<l.length;i++){const t=l[i],e=d[i];c[i]=Math.hypot(t,e)}}return n.makeOutput(c,e.shape,"float32")}}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>Math.ceil(t)),d=Object(c.b)(r.n,l),h={kernelName:r.n,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>Math.exp(t)),d=Object(c.b)(r.J,l),h={kernelName:r.J,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>Math.expm1(t)),d=Object(c.b)(r.K,l),h={kernelName:r.K,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>Math.floor(t)),d=Object(c.b)(r.O,l),h={kernelName:r.O,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>Math.log(t)),d=Object(c.b)(r.ab,l),h={kernelName:r.ab,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t,e,n,o){const c=r.Hc.getTypedArrayFromDType(o,r.Hc.sizeFromShape(n));for(let i=0;i<c.length;++i){const n=i*e;let r=t[n];for(let o=0;o<e;++o){const e=t[n+o];e>r&&(r=e)}c[i]=r}return c}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(222),c=n(249);const l=Object(o.a)((a,b)=>a!==b?1:0),d=Object(c.a)(r.nb,l,null,"bool"),h={kernelName:r.nb,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(251),c=n(187);const l=Object(o.a)(t=>1/Math.sqrt(t)),d=Object(c.b)(r.xb,l),h={kernelName:r.xb,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return h}));var r=n(177),o=n(222),c=n(249);const l=Object(o.a)((a,b)=>{const t=a-b;return t*t}),d=Object(c.a)(r.Ib,l),h={kernelName:r.Ib,backendName:"cpu",kernelFunc:d}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(177);function o(t,e,n,o){const c=r.Hc.parseAxisParam(e,n)[0],l=[1,n[0],1];for(let i=0;i<c;i++)l[0]*=n[i];l[1]=n[c];for(let i=c+1;i<n.length;i++)l[2]*=n[i];const d={},h=new Int32Array(n[c]),f=new r.Ob(l,o,t),m=[],y=1===l[0]&&1===l[2];for(let i=0;i<n[c];i++){let element;if(y)element=t[i].toString();else{const t=[];for(let e=0;e<l[0];e++)for(let n=0;n<l[2];n++)t.push(f.get(e,i,n));element=t.join(",")}if(void 0!==d[element])h[i]=d[element];else{const t=Object.keys(d).length;d[element]=t,h[i]=t,m.push(i)}}const O=l.slice();O[1]=Object.keys(d).length;const x=new r.Ob(O,o);m.forEach((t,i)=>{for(let e=0;e<l[0];e++)for(let n=0;n<l[2];n++)x.set(f.get(e,t,n),e,i,n)});const v=n.slice();return v[c]=O[1],{outputValues:x.values,outputShape:v,indices:h}}},function(t,e,n){"use strict";n.r(e);var r=n(345);n.d(e,"simpleAbsImpl",(function(){return r.b}));var o=n(231);n.d(e,"addImpl",(function(){return o.c}));var c=n(346);n.d(e,"ceilImpl",(function(){return c.b}));var l=n(347);n.d(e,"expImpl",(function(){return l.b}));var d=n(348);n.d(e,"expm1Impl",(function(){return d.b}));var h=n(349);n.d(e,"floorImpl",(function(){return h.b}));var f=n(350);n.d(e,"logImpl",(function(){return f.b}));var m=n(351);n.d(e,"maxImpl",(function(){return m.a}));var y=n(298);n.d(e,"multiplyImpl",(function(){return y.c}));var O=n(352);n.d(e,"notEqualImpl",(function(){return O.b}));var x=n(353);n.d(e,"rsqrtImpl",(function(){return x.b}));var v=n(297);n.d(e,"sliceImpl",(function(){return v.c}));var j=n(354);n.d(e,"squaredDifferenceImpl",(function(){return j.b}));var w=n(299);n.d(e,"subImpl",(function(){return w.c}));var I=n(300);n.d(e,"transposeImpl",(function(){return I.a}));var k=n(355);n.d(e,"uniqueImpl",(function(){return k.a}))},,,,,,,,,,,,,,function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(183);var h=n(178);function f(t){return null==t?null:0===t.rank?Object(d.a)(t,[t.size]):1===t.rank?t:2===t.rank?Object(d.a)(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?Object(d.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const m=Object(h.a)({batchNorm_:function(t,e,n,h,m,y){null==y&&(y=.001);const O=Object(c.a)(t,"x","batchNorm"),x=Object(c.a)(e,"mean","batchNorm"),v=Object(c.a)(n,"variance","batchNorm");let j,w;null!=m&&(j=Object(c.a)(m,"scale","batchNorm")),null!=h&&(w=Object(c.a)(h,"offset","batchNorm")),l.b(x.rank===v.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),l.b(null==w||x.rank===w.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),l.b(null==j||x.rank===j.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const I=function(t){let e;return e=0===t.rank||1===t.rank?Object(d.a)(t,[1,1,1,t.size]):2===t.rank?Object(d.a)(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?Object(d.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(O),k={x:I,scale:j,offset:w,mean:x,variance:v},N={varianceEpsilon:y},T=r.a.runKernelFunc((t,e)=>(e([I,x,v,j]),t.batchNorm(I,f(x),f(v),f(w),f(j),y)),k,null,o.eb,N);return Object(d.a)(T,O.shape)}})},function(t,e,n){"use strict";(function(t,r){let o;function c(){if(null==o){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}o=e}return o}function l(t,e){const n=function(){const t=c();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return l}))}).call(this,n(16),n(108))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({softmax_:function(t,e=-1){const n=Object(c.a)(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const l={logits:n},d={dim:e};return r.a.runKernelFunc((t,r)=>{const o=t.softmax(n,e);return r([o]),o},l,null,o.wc,d)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(183);const f=Object(d.a)({resizeNearestNeighbor_:function(t,e,n=!1){const d=Object(c.a)(t,"images","resizeNearestNeighbor");l.b(3===d.rank||4===d.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${d.rank}.`),l.b(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),l.b("float32"===d.dtype||"int32"===d.dtype,()=>"`images` must have `int32` or `float32` as dtype");let f=d,m=!1;3===d.rank&&(m=!0,f=Object(h.a)(d,[1,d.shape[0],d.shape[1],d.shape[2]]));const[y,O]=e,x={images:f},v={alignCorners:n,size:e},j=r.a.runKernelFunc((t,e)=>(e([f]),t.resizeNearestNeighbor(f,y,O,n)),x,null,o.ic,v);return m?Object(h.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178),h=n(183);const f=Object(d.a)({resizeBilinear_:function(t,e,n=!1){const d=Object(c.a)(t,"images","resizeBilinear");l.b(3===d.rank||4===d.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${d.rank}.`),l.b(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let f=d,m=!1;3===d.rank&&(m=!0,f=Object(h.a)(d,[1,d.shape[0],d.shape[1],d.shape[2]]));const[y,O]=e,x={images:f},v={alignCorners:n,size:e},j=r.a.runKernelFunc((t,e)=>(e([f]),t.resizeBilinear(f,y,O,n)),x,null,o.gc,v);return m?Object(h.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(192),l=n(178),d=n(183);const h=Object(l.a)({depthwiseConv2dNativeBackpropInput_:function(t,e,filter,n,l,h=[1,1],f){let m=e,y=!1;3===e.rank&&(y=!0,m=Object(d.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const O={dy:m,filter:filter},x={strides:n,pad:l,dimRoundingMode:f,dilations:h,inputShape:t},v=r.a.runKernelFunc(e=>{const r=c.a(t,filter.shape,n,h,l,f,!0);return e.depthwiseConv2DDerInput(m,filter,r)},O,null,o.N,x);return y?Object(d.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(192),l=n(178),d=n(183);const h=Object(l.a)({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,l,h,f=[1,1],m){let y=t;3===t.rank&&(y=Object(d.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let O=e;3===O.rank&&(O=Object(d.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const x={x:y,dy:O},v={strides:l,pad:h,dimRoundingMode:m,dilations:f,filterShape:n};return r.a.runKernelFunc(e=>{const r=c.a(t.shape,n,l,f,h,m,!0);return e.depthwiseConv2DDerFilter(y,O,r)},x,null,o.M,v)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({acos_:function(t){const e=Object(c.a)(t,"x","acos"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},n,null,o.b)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({acosh_:function(t){const e=Object(c.a)(t,"x","acosh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},n,null,o.c)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return w})),n.d(e,"b",(function(){return I})),n.d(e,"c",(function(){return k})),n.d(e,"d",(function(){return N})),n.d(e,"e",(function(){return T})),n.d(e,"f",(function(){return C})),n.d(e,"g",(function(){return $})),n.d(e,"h",(function(){return S})),n.d(e,"i",(function(){return E}));var r=n(221),o=n(179),c=n(271),l=n(200),d=n(194),h=n(246),f=n(261),m=n(292),y=n(185),O=n(178),x=n(227),v=n(262),j=n(191);const w=Object(O.a)({addStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","addStrict"),e=Object(o.a)(b,"b","addStrict");return c.e(t.shape,e.shape,"Error in addStrict: "),Object(l.a)(t,e)}}),I=Object(O.a)({divStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","div"),e=Object(o.a)(b,"b","div");return c.e(t.shape,e.shape,"Error in divideStrict: "),Object(d.a)(t,e)}}),k=Object(O.a)({maximumStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","maximumStrict"),e=Object(o.a)(b,"b","maximumStrict");return c.e(t.shape,e.shape,"Error in maximumStrict: "),Object(h.a)(t,e)}}),N=Object(O.a)({minimumStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","minimumStrict"),e=Object(o.a)(b,"b","minimumStrict");return c.e(t.shape,e.shape,"Error in minimumStrict: "),Object(f.a)(t,e)}}),T=Object(O.a)({modStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","modStrict"),e=Object(o.a)(b,"b","modStrict");return c.e(t.shape,e.shape,"Error in modStrict: "),Object(m.a)(t,e)}}),C=Object(O.a)({mulStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","mul"),e=Object(o.a)(b,"b","mul");return c.e(t.shape,e.shape,"Error in multiplyStrict: "),Object(y.a)(t,e)}}),$=Object(O.a)({powStrict_:function(base,t){return Object(r.a)("strict variants of ops have been deprecated and will be removed in future"),c.e(base.shape,t.shape,"Error in powStrict: "),Object(x.a)(base,t)}}),S=Object(O.a)({squaredDifferenceStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","squaredDifferenceStrict"),e=Object(o.a)(b,"b","squaredDifferenceStrict");return c.e(t.shape,e.shape,"Error in squaredDifferenceStrict: "),Object(v.a)(t,e)}}),E=Object(O.a)({subStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","subStrict"),e=Object(o.a)(b,"b","subStrict");return c.e(t.shape,e.shape,"Error in subStrict: "),Object(j.a)(t,e)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({asin_:function(t){const e=Object(c.a)(t,"x","asin"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},n,null,o.j)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({asinh_:function(t){const e=Object(c.a)(t,"x","asinh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},n,null,o.k)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({atan_:function(t){const e=Object(c.a)(t,"x","atan"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},n,null,o.l)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({atanh_:function(t){const e=Object(c.a)(t,"x","atanh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},n,null,o.n)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({ceil_:function(t){const e=Object(c.a)(t,"x","ceil"),n={x:e};return r.a.runKernelFunc(t=>t.ceil(e),n,null,o.w)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({clipByValue_:function(t,e,n){const d=Object(c.a)(t,"x","clipByValue");l.b(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const h={x:d},f={clipValueMin:e,clipValueMax:n};return r.a.runKernelFunc((t,r)=>{const o=t.clip(d,e,n);return r([d]),o},h,null,o.x,f)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return x})),n.d(e,"b",(function(){return v})),n.d(e,"c",(function(){return j})),n.d(e,"d",(function(){return w})),n.d(e,"e",(function(){return I})),n.d(e,"f",(function(){return k}));var r=n(221),o=n(179),c=n(271),l=n(235),d=n(214),h=n(219),f=n(265),m=n(218),y=n(260),O=n(178);const x=Object(O.a)({equalStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","equalStrict"),e=Object(o.a)(b,"b","equalStrict");return Object(c.e)(t.shape,e.shape,"Error in equalStrict: "),Object(l.a)(t,e)}}),v=Object(O.a)({greaterEqualStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","greaterEqualStrict"),e=Object(o.a)(b,"b","greaterEqualStrict");return Object(c.e)(t.shape,e.shape,"Error in greaterEqualStrict: "),Object(h.a)(t,e)}}),j=Object(O.a)({greaterStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","greaterStrict"),e=Object(o.a)(b,"b","greaterStrict");return Object(c.e)(t.shape,e.shape,"Error in greaterStrict: "),Object(d.a)(t,e)}}),w=Object(O.a)({lessEqualStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","lessEqualStrict"),e=Object(o.a)(b,"b","lessEqualStrict");return Object(c.e)(t.shape,e.shape,"Error in lessEqualStrict: "),Object(m.a)(t,e)}}),I=Object(O.a)({lessStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","lessStrict"),e=Object(o.a)(b,"b","lessStrict");return Object(c.e)(t.shape,e.shape,"Error in lessStrict: "),Object(f.a)(t,e)}}),k=Object(O.a)({notEqualStrict_:function(a,b){Object(r.a)("strict variants of ops have been deprecated and will be removed in future");const t=Object(o.a)(a,"a","notEqualStrict"),e=Object(o.a)(b,"b","notEqualStrict");return Object(c.e)(t.shape,e.shape,"Error in notEqualStrict: "),Object(y.a)(t,e)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(186),h=n(178);const f=Object(h.a)({erf_:function(t){let e=Object(c.a)(t,"x","erf");l.b("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=Object(d.a)(e,"float32"));const n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},n,null,o.V)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({expm1_:function(t){const e=Object(c.a)(t,"x","expm1"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},n,null,o.X)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({isFinite_:function(t){const e=Object(c.a)(t,"x","isFinite"),n={x:e};return r.a.runKernelFunc(t=>t.isFinite(e),n,null,o.ob)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({isInf_:function(t){const e=Object(c.a)(t,"x","isInf"),n={x:e};return r.a.runKernelFunc(t=>t.isInf(e),n,null,o.pb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({isNaN_:function(t){const e=Object(c.a)(t,"x","isNaN"),n={x:e};return r.a.runKernelFunc(t=>t.isNaN(e),n,null,o.qb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(205),o=n(179),c=n(185),l=n(201),d=n(178),h=n(274),f=n(334);const m=Object(d.a)({logSigmoid_:function(t){const e=Object(o.a)(t,"x","logSigmoid");return Object(r.a)(t=>({value:Object(l.a)(Object(f.a)(Object(l.a)(t))),gradFunc:e=>Object(c.a)(e,Object(h.a)(Object(l.a)(t)))}))(e)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return x}));var r=n(181),o=n(176),c=n(179),l=n(186),d=n(213),h=n(243),f=n(236),m=n(178),y=n(191),O=n(195);const x=Object(m.a)({logSoftmax_:function(t,e=-1){const n=Object(c.a)(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const m={logits:n},x={axis:e};return r.a.runKernelFunc((n,r)=>{const o=Object(f.a)(t,e,!0),c=Object(y.a)(t,o),m=Object(y.a)(Object(l.a)(c,"float32"),Object(h.a)(Object(O.a)(Object(d.a)(c),e,!0)));return r([m]),m},m,null,o.yb,x)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(176),c=n(179),l=n(215),d=n(257),h=n(178),f=n(256),m=n(196);const y=Object(h.a)({onesLike_:function(t){const e=Object(c.a)(t,"x","onesLike"),n={x:e};return r.a.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=y(Object(f.a)(e)),i=Object(m.a)(Object(d.a)(e));return Object(l.a)(t,i)}return t.onesLike(e)},n,null,o.Vb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({reciprocal_:function(t){const e=Object(c.a)(t,"x","reciprocal"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},n,null,o.cc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({round_:function(t){const e=Object(c.a)(t,"x","round"),n={x:e};return r.a.runKernelFunc(t=>t.round(e),n,null,o.mc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({sign_:function(t){const e=Object(c.a)(t,"x","sign"),n={x:e};return r.a.runKernelFunc(t=>t.sign(e),n,null,o.sc)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(178),d=n(183),h=n(206),f=n(224);const m=Object(l.a)({stridedSlice_:function(t,e,n,l,m=0,y=0,O=0,x=0,v=0){let j=Object(c.a)(t,"x","stridedSlice");const w={x:j},I={begin:e,end:n,strides:l,beginMask:m,endMask:y,ellipsisMask:O,newAxisMask:x,shrinkAxisMask:v};return r.a.runKernelFunc(t=>{null==l&&(l=new Array(e.length));const r=Object(f.maskToAxes)(O);if(r.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==O&&0!==x)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==O&&0!==v)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const o=j.rank-e.length,c=Object(f.maskToAxes)(x),w=j.shape.slice();c.forEach(t=>{e[t]=0,n[t]=1,w.splice(t,0,1)}),j=Object(d.a)(j,w);const{begin:I,end:k,strides:N}=Object(f.getNormalizedAxes)(j.shape,r,o,e,n,l,m,y,O);e=I,n=k,l=N;const T=Object(f.maskToAxes)(v);T.forEach(t=>{n[t]=e[t]+1,l[t]=1});const C=Object(f.computeOutShape)(e,n,l),$=C.filter((t,e)=>-1===T.indexOf(e));if(l.every(t=>1===t))return Object(d.a)(Object(h.a)(j,e,C),$);const S=t.stridedSlice(j,e,n,l);return Object(d.a)(S,$)},w,null,o.Fc,I)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({tan_:function(t){const e=Object(c.a)(t,"x","tan"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},n,null,o.Ic)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({tanh_:function(t){const e=Object(c.a)(t,"x","tanh"),n={x:e};return r.a.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},n,null,o.Jc)}})},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return E})),n.d(e,"i",(function(){return A})),n.d(e,"c",(function(){return F})),n.d(e,"f",(function(){return D})),n.d(e,"e",(function(){return P})),n.d(e,"d",(function(){return B})),n.d(e,"k",(function(){return z})),n.d(e,"g",(function(){return V})),n.d(e,"h",(function(){return W})),n.d(e,"j",(function(){return H})),n.d(e,"b",(function(){return U}));var r=n(177),o=n(483),c=n(268),l=n(197),d=n(484),h=n(485),f=n(486),m=n(487),y=n(488),O=n(489),x=n(490),v=n(491),j=n(492),w=n(493),I=n(494),k=n(495),N=n(496),T=n(497),C=n(498),$=n(499),S=n(500);class E{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[d,h,f,m,y,O,x,I,w,v,k,N,T,C,$,S,j].map(t=>t.json));this.opMappers=t.reduce((map,t)=>(map[t.tfOpName]=t,map),{})}transformGraph(t,e={}){const n=t.node,r=[],o=[],c=[],d=n.reduce((map,t)=>(map[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(map[t.name]):"Const"===t.op?o.push(map[t.name]):null!=t.input&&0!==t.input.length||c.push(map[t.name]),map),{});let h=[];const f=[];let m={},y={};null!=e&&(m=this.mapSignatureEntries(e.inputs),y=this.mapSignatureEntries(e.outputs));const O=Object.keys(d);O.forEach(t=>{const e=d[t];e.inputNames.forEach(t=>{const[n]=Object(l.b)(t);e.inputs.push(d[n]),d[n].children.push(e)})}),0===Object.keys(y).length?O.forEach(t=>{const e=d[t];0===e.children.length&&f.push(e)}):Object.keys(y).forEach(t=>{const[e]=Object(l.b)(t),n=d[e];null!=n&&(n.signatureKey=y[t],f.push(n))}),Object.keys(m).length>0?Object.keys(m).forEach(t=>{const[e]=Object(l.b)(t),n=d[e];n&&(n.signatureKey=m[t],h.push(n))}):h=r;let x={};null!=t.library&&null!=t.library.function&&(x=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{}));const v={nodes:d,inputs:h,outputs:f,weights:o,placeholders:r,signature:e,functions:x};return c.length>0&&(v.initNodes=c),v}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=Object(c.a)(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(input=>input.startsWith("^")?input.substr(1):input),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((map,param)=>(map[param.name]={type:param.type,inputIndexStart:param.start,inputIndexEnd:param.end},map),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((map,param)=>{const e=param.type;let n=void 0;switch(param.type){case"string":n=A(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=A(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"string[]":n=W(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=W(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"number":n=D(t.attr,param.tfName,param.defaultValue||0),void 0===n&&param.tfDeprecatedName&&(n=D(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"number[]":n=V(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=V(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool":n=F(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=F(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool[]":n=U(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=U(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape":n=z(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=z(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape[]":n=H(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=H(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype":n=P(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=P(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype[]":n=B(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=B(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"func":n=M(t.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=M(t.attr,param.tfDeprecatedName,param.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${param.type} for op: ${t.op}`)}return map[param.name]={value:n,type:e},map},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce((map,t)=>(map[t.name]=this.mapNode(t),"Const"===t.op&&n.push(map[t.name]),map),{}));const o=[],c=[];t.signature.inputArg.forEach(t=>{const[e]=Object(l.b)(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:_(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,o.push(n),r[e]=n});Object.keys(r).forEach(t=>{const e=r[t];e.inputNames.forEach(t=>{const[n]=Object(l.b)(t);e.inputs.push(r[n]),r[n].children.push(e)})});const d=t.ret;t.signature.outputArg.forEach(output=>{const[t,e]=Object(l.b)(d[output.name]),n=r[t];null!=n&&(n.defaultOutput=e,c.push(n))});const h=this.mapArgsToSignature(t);return{nodes:r,inputs:o,outputs:c,weights:n,placeholders:[],signature:h}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((map,t)=>(map[t.name]=this.mapArgToTensorInfo(t),map),{}),outputs:t.signature.outputArg.reduce((map,e)=>(map[e.name]=this.mapArgToTensorInfo(e,t.ret),map),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function R(s,e){const n=Array.isArray(s)?String.fromCharCode.apply(null,s):function(text){const e=Object(r.cc)().global;if(void 0!==e.atob)return e.atob(text);if(void 0!==t)return new t(text,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(s);return e?n:n.toLowerCase()}function A(t,e,n,r=!1){const param=t[e];return null!=param?R(param.s,r):n}function F(t,e,n){const param=t[e];return param?param.b:n}function D(t,e,n){const param=t[e]||{},r=null!=param.i?param.i:null!=param.f?param.f:n;return"number"==typeof r?r:parseInt(r,10)}function _(t){switch("string"==typeof t&&(t=o.a[t]),t){case o.a.DT_FLOAT:return"float32";case o.a.DT_INT32:case o.a.DT_INT64:case o.a.DT_INT8:case o.a.DT_UINT8:return"int32";case o.a.DT_BOOL:return"bool";case o.a.DT_DOUBLE:return"float32";case o.a.DT_STRING:return"string";default:return null}}function M(t,e,n){const param=t[e];return param&&param.func?param.func.name:n}function P(t,e,n){const param=t[e];return param&&param.type?_(param.type):n}function B(t,e,n){const param=t[e];return param&&param.list&&param.list.type?param.list.type.map(t=>_(t)):n}function L(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function z(t,e,n){const param=t[e];return param&&param.shape?L(param.shape):n}function V(t,e,n){const param=t[e];return param?((param.list.f&&param.list.f.length?param.list.f:param.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function W(t,e,n,r=!1){const param=t[e];return param&&param.list&&param.list.s?param.list.s.map(t=>R(t,r)):n}function H(t,e,n){const param=t[e];return param&&param.list&&param.list.shape?param.list.shape.map(t=>L(t)):n}function U(t,e,n){const param=t[e];return param&&param.list&&param.list.b?param.list.b:n}}).call(this,n(67).Buffer)},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(178);const h=Object(d.a)({addN_:function(t){l.b(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),l.b(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,i)=>Object(c.a)(t,"tensors"+i,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!l.a(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const d=e;return r.a.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},d,null,o.e)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=n(181),o=n(176),c=n(179),l=n(271),d=n(192),h=n(178),f=n(183);const m=Object(h.a)({conv3d_:function(t,filter,e,n,h="NDHWC",m=[1,1,1]){const y=Object(c.a)(t,"x","conv3d"),O=Object(c.a)(filter,"filter","conv3d");let x=y,v=!1;4===y.rank&&(v=!0,x=Object(f.a)(y,[1,y.shape[0],y.shape[1],y.shape[2],y.shape[3]])),l.b(5===x.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${x.rank}.`),l.b(5===O.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+O.rank+"."),l.b(x.shape[4]===O.shape[3],()=>`Error in conv3d: depth of input (${x.shape[4]}) must match input depth for filter ${O.shape[3]}.`),l.b(Object(d.h)(e,m),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${m}'`),l.b("NDHWC"===h,()=>`Error in conv3d: got dataFormat of ${h} but only NDHWC is currently supported.`);const j={x:x,filter:O},w={strides:e,pad:n,dataFormat:h,dilations:m},I=r.a.runKernelFunc((t,r)=>{const o=d.b(x.shape,O.shape,e,m,n),c=t.conv3d(x,O,o);return r([x,O]),c},j,null,o.D,w);return v?Object(f.a)(I,[I.shape[1],I.shape[2],I.shape[3],I.shape[4]]):I}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({maxPoolWithArgmax_:function(t,e,n,l,d=!1){const h={x:Object(c.a)(t,"x","maxPoolWithArgmax")},f={filterSize:e,strides:n,pad:l,includeBatchInIndex:d},m=r.a.runKernel(o.Hb,h,f);return{result:m[0],indexes:m[1]}}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return O}));var r=n(181),o=n(221),c=n(176),l=n(179),d=n(271),h=n(186),f=n(192),m=n(178),y=n(183);const O=Object(m.a)({avgPool3d_:function(t,e,n,m,O,x="NDHWC",v){null==v?v=[1,1,1]:Object(o.a)("dilations is deprecated, this field will be gone in v3.0.0.");const j=Object(l.a)(t,"x","avgPool3d","float32");let w=j,I=!1;4===j.rank&&(I=!0,w=Object(y.a)(j,[1,j.shape[0],j.shape[1],j.shape[2],j.shape[3]])),d.b(5===w.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${w.rank}.`),d.b("NDHWC"===x,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+x),d.b(f.h(n,v),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${v}'`),null!=O&&d.b(d.v(m),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${O} but got pad ${m}.`);const k={x:w},N={filterSize:e,strides:n,pad:m,dimRoundingMode:O,dataFormat:x,dilations:v};let T=r.a.runKernelFunc((t,r)=>{null==v&&(v=[1,1,1]);const o=f.f(w.shape,e,n,v,m,O,x);return r([w]),t.avgPool3d(w,o)},k,null,c.p,N);return T=Object(h.a)(T,w.dtype),I?Object(y.a)(T,[T.shape[1],T.shape[2],T.shape[3],T.shape[4]]):T}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));var r=n(181),o=n(221),c=n(176),l=n(179),d=n(271),h=n(192),f=n(178),m=n(183);const y=Object(f.a)({maxPool3d_:function(t,e=[1,1,1],n,f,y,O="NDHWC",x){null==x?x=[1,1,1]:Object(o.a)("dilations is deprecated, this field will be gone in v3.0.0.");const v=Object(l.a)(t,"x","maxPool3d");let j=v,w=!1;4===v.rank&&(w=!0,j=Object(m.a)(v,[1,v.shape[0],v.shape[1],v.shape[2],v.shape[3]])),d.b(5===j.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${j.rank}.`),d.b("NDHWC"===O,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+O),d.b(h.h(n,x),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${x}'`),null!=y&&d.b(d.v(f),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${y} but got pad ${f}.`);const I={x:j},k={filterSize:e,strides:n,pad:f,dimRoundingMode:y,dataFormat:O,dilations:x},N=r.a.runKernelFunc((t,r)=>{null==x&&(x=[1,1,1]);const o=h.f(j.shape,e,n,x,f,y,O),c=t.maxPool3d(j,o);return r([j,c]),c},I,null,c.Eb,k);return w?Object(m.a)(N,[N.shape[1],N.shape[2],N.shape[3],N.shape[4]]):N}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(181),o=n(176);function c(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const c={start:t,stop:e,num:n};return r.a.runKernelFunc(r=>r.linspace(t,e,n),{},null,o.vb,c)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(179),c=n(178),l=n(183);const d=Object(c.a)({multinomial_:function(t,e,n,c=!1){const d=Object(o.a)(t,"logits","multinomial"),h=d.size,f=d.rank;if(h<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+h+".");if(f>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+f);n=n||Math.random();const m=1===f?Object(l.a)(d,[1,-1]):d,y=r.a.runKernelFunc(t=>t.multinomial(m,c,e,n),{logits2D:m});return 1===f?Object(l.a)(y,[y.size]):y}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(216),o=n(178),c=n(411);const l=Object(o.a)({randomUniform_:function(t,e=0,n=1,o="float32",l){const d=Object(r.a)(t,o),h=new c.b(e,n,null,l);for(let i=0;i<d.values.length;i++)d.values[i]=h.nextValue();return d.toTensor()}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return c}));var r=n(412);n(344);class o{constructor(t,e,n,o,c){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=o,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const l=c||Math.random();this.random=r.alea(l.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,o,s;do{r=2*this.random()-1,o=2*this.random()-1,s=r*r+o*o}while(s>=1||0===s);const c=Math.sqrt(-2*Math.log(s)/s);t=this.mean+this.stdDev*r*c,e=this.mean+this.stdDev*o*c,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class c{constructor(t=0,e=1,n,o){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==o&&(o=Math.random()),"number"==typeof o&&(o=o.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=r.alea(o)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},function(t,e,n){var r=n(501),o=n(502),c=n(503),l=n(504),d=n(505),h=n(506),f=n(507);f.alea=r,f.xor128=o,f.xorwow=c,f.xorshift7=l,f.xor4096=d,f.tychei=h,t.exports=f},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(216),o=n(178),c=n(411);const l=Object(o.a)({truncatedNormal_:function(t,e=0,n=1,o,l){if(null!=o&&"bool"===o)throw new Error("Unsupported data type $ { dtype }");const d=new c.a(e,n,o,!0,l),h=Object(r.a)(t,o);for(let i=0;i<h.values.length;i++)h.values[i]=d.nextValue();return h.toTensor()}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(315),o=n(179);const c=async function(t){const e=Object(o.a)(t,"condition","whereAsync","bool"),n=await e.data(),c=Object(r.a)(e.shape,n);return t!==e&&e.dispose(),c}},function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n(180),o=n(179),c=n(271);const l=async function(t,e){const n=Object(o.a)(t,"x","setdiff1d"),l=Object(o.a)(e,"y","setdiff1d");c.b(n.dtype===l.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${l.dtype}).`),c.b(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),c.b(1===l.rank,()=>`y should be 1D tensor, but got y (${l.shape}).`);const d=await n.data(),h=await l.data(),f=new Set(h);let m=0;for(let i=0;i<d.length;i++)f.has(d[i])||m++;const y=new r.b([m],n.dtype),O=new r.b([m],"int32");for(let i=0,p=0;i<d.length;i++)f.has(d[i])||(y.values[p]=d[i],O.values[p]=i,p++);return[y.toTensor(),O.toTensor()]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(181),o=n(176),c=n(179),l=n(178),d=n(263);const h=Object(l.a)({scatterND_:function(t,e,n){const l=Object(c.a)(t,"indices","scatterND","int32"),h=Object(c.a)(e,"updates","scatterND");d.b(h,l,n);const f={indices:l,updates:h},m={shape:n};return r.a.runKernelFunc(t=>t.scatterND(l,h,n),f,null,o.oc,m)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176),c=n(179),l=n(178);const d=Object(l.a)({gatherND_:function(t,e){const n=Object(c.a)(e,"indices","gatherND","int32"),l=Object(c.a)(t,"x","gatherND"),d={params:l,indices:n};return r.a.runKernelFunc(t=>t.gatherND(l,n),d,null,o.hb)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return h})),n.d(e,"b",(function(){return f}));var r=n(177),o=n(222),c=n(269),l=n(250),d=n(296);function h(t){const{inputs:e,backend:n,attrs:f}=t,{x:m}=e,{dtype:y}=f;if("complex64"===y){if("complex64"===m.dtype)return Object(l.a)({inputs:{x:m},backend:n});const t=r.Ic(m.shape),e=h({inputs:{x:m},backend:n,attrs:{dtype:"float32"}}),o=Object(c.a)({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),o}if("complex64"===m.dtype){const t=Object(d.a)({inputs:{input:m},backend:n}),e=h({inputs:{x:t},backend:n,attrs:{dtype:y}});return n.disposeIntermediateTensorInfo(t),e}if(!r.Hc.hasEncodingLoss(m.dtype,y)){const t=Object(l.a)({inputs:{x:m},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:y}}if("int32"===y){const t=n.data.get(m.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(m.shape,"int32",e)}if("bool"===y){const t=n.data.get(m.dataId).values,e=r.Hc.toTypedArray([0],m.dtype),[c,l]=Object(o.a)((a,b)=>a!==b?1:0)(m.shape,[],t,e,"bool");return n.makeTensorInfo(l,"bool",c)}throw new Error(`Error in Cast: failed to cast ${m.dtype} to ${y}`)}const f={kernelName:r.m,backendName:"cpu",kernelFunc:h}},,,,,,,,,,,,function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(181),o=n(176);var c=n(179),l=n(178);const d=Object(l.a)({sparseToDense_:function(t,e,n,l=0){const d=Object(c.a)(t,"sparseIndices","sparseToDense","int32"),h=Object(c.a)(e,"sparseValues","sparseToDense"),f=Object(c.a)(l,"defaultValue","sparseToDense",h.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const o=t.rank>0?t.shape[0]:1,c=t.rank>1?t.shape[1]:1;if(n.length!==c)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${c}.`);const l=e.size;if(0!==e.rank&&(1!==e.rank||l!==o))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${o}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(d,h,n,f);const m={sparseIndices:d,sparseValues:h,defaultValue:f},y={outputShape:n};return r.a.runKernelFunc(t=>t.sparseToDense(d,h,n,f),m,null,o.zc,y)}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";(function(t){var e=n(199);const r=()=>n(481);let o;class c{constructor(){this.util=n(482),this.textEncoder=new this.util.TextEncoder}fetch(path,t){return null!=Object(e.b)().global.fetch?Object(e.b)().global.fetch(path,t):(null==o&&(o=r()),o(path,t))}now(){const time=t.hrtime();return 1e3*time[0]+time[1]/1e6}encode(text,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(text)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}Object(e.b)().get("IS_NODE")&&Object(e.b)().setPlatform("node",new c)}).call(this,n(108))},,,function(t,e,n){"use strict";var r,o;n.d(e,"a",(function(){return r})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(r||(r={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(o||(o={}))},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e,n=this,r=(e=4022871197,function(data){data=data.toString();for(var i=0;i<data.length;i++){var t=.02519603282416938*(e+=data.charCodeAt(i));t-=e=t>>>0,e=(t*=e)>>>0,e+=4294967296*(t-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function d(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var n=new l(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.alea=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function d(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var n=new l(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xor128=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function d(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var n=new l(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xorwow=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function d(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var n=new l(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xorshift7=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,i,o,c,l=[],d=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,d=Math.max(d,e.length)),i=0,o=-32;o<d;++o)e&&(r^=e.charCodeAt((o+32)%e.length)),0===o&&(c=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(c=c+1640531527|0,i=0==(n=l[127&o]^=r+c)?i+1:0);for(i>=128&&(l[127&(e&&e.length||0)]=-1),i=127,o=512;o>0;--o)r=l[i+34&127],n=l[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,l[i]=r^n;t.w=c,t.X=l,t.i=i}(e,t)}function d(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var n=new l(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.xor4096=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){(function(t){var r;!function(t,o,c){function l(t){var e=this,n="";e.next=function(){var b=e.b,t=e.c,n=e.d,a=e.a;return b=b<<25^b>>>7^t,t=t-n|0,n=n<<24^n>>>8^a,a=a-b|0,e.b=b=b<<20^b>>>12^t,e.c=t=t-n|0,e.d=n<<16^t>>>16^a,e.a=a-b|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function d(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var n=new l(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(207)&&n(248)?void 0===(r=function(){return h}.call(e,n,e,o))||(o.exports=r):this.tychei=h}(0,t,n(207))}).call(this,n(247)(t))},function(t,e,n){var r;!function(o,c){var l,d=this,h=c.pow(256,6),f=c.pow(2,52),m=2*f;function y(t,e,n){var r=[],y=v(function t(e,n){var r,o=[],c=typeof e;if(n&&"object"==c)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==c?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,j(o)]:null==t?function(){try{var t;return l&&(t=l.randomBytes)?t=t(256):(t=new Uint8Array(256),(d.crypto||d.msCrypto).getRandomValues(t)),j(t)}catch(t){var e=d.navigator,n=e&&e.plugins;return[+new Date,d,n,d.screen,j(o)]}}():t,3),r),w=new O(r),I=function(){for(var t=w.g(6),e=h,n=0;t<f;)t=256*(t+n),e*=256,n=w.g(1);for(;t>=m;)t/=2,e/=2,n>>>=1;return(t+n)/e};return I.int32=function(){return 0|w.g(4)},I.quick=function(){return w.g(4)/4294967296},I.double=I,v(j(w.S),o),(e.pass||n||function(t,e,n,r){return r&&(r.S&&x(r,w),t.state=function(){return x(w,{})}),n?(c.random=t,e):t})(I,y,"global"in e?e.global:this==c,e.state)}function O(t){var e,n=t.length,r=this,i=0,o=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);i<256;)s[i]=i++;for(i=0;i<256;i++)s[i]=s[o=255&o+t[i%n]+(e=s[i])],s[o]=e;(r.g=function(t){for(var e,n=0,i=r.i,o=r.j,s=r.S;t--;)e=s[i=255&i+1],n=256*n+s[255&(s[i]=s[o=255&o+e])+(s[o]=e)];return r.i=i,r.j=o,n})(256)}function x(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+"",o=0;o<r.length;)e[255&o]=255&(n^=19*e[255&o])+r.charCodeAt(o++);return j(e)}function j(a){return String.fromCharCode.apply(0,a)}if(c.seedrandom=y,v(c.random(),o),t.exports){t.exports=y;try{l=n(508)}catch(t){}}else void 0===(r=function(){return y}.call(e,n,e,t))||(t.exports=r)}([],Math)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(177);const o={},c={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function l(t){if(!(t in o)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const canvas=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(canvas.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete o[t]},!1),1===t)return canvas.getContext("webgl",c)||canvas.getContext("experimental-webgl",c);return canvas.getContext("webgl2",c)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;o[t]=e}const e=o[t];return e.isContextLost()?(delete o[t],l(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),o[t])}var d,h,f;function m(t,e){return[e,t]}function y(t){const e=r.Hc.sizeFromShape(t),n=Math.ceil(e/4);return r.Hc.sizeToSquarishShape(n)}function O(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function x(t,e){const n=t;let o,c,l,d,h,f,m,y,O,x;return 2===Object(r.cc)().getNumber("WEBGL_VERSION")?(o=n.R32F,c=n.R16F,l=n.RGBA16F,d=n.RGBA32F,h=n.RED,m=4,y=1,O=n.HALF_FLOAT,x=n.FLOAT):(o=t.RGBA,c=t.RGBA,l=t.RGBA,d=n.RGBA,h=t.RGBA,m=4,y=4,O=null!=e?e.HALF_FLOAT_OES:null,x=t.FLOAT),f=t.RGBA,{internalFormatFloat:o,internalFormatHalfFloat:c,internalFormatPackedHalfFloat:l,internalFormatPackedFloat:d,textureFormatFloat:h,downloadTextureFormat:f,downloadUnpackNumChannels:m,defaultNumChannels:y,textureTypeHalfFloat:O,textureTypeFloat:x}}function v(t,e){const n=e();return Object(r.cc)().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(d||(d={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(h||(h={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(f||(f={}));function j(t){return!!(Object(r.cc)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function w(t,e){return R(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function I(t,e){const n=R(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(v(t,()=>t.shaderSource(n,e)),v(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=k.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const o=+n[1],c=t.split("\n"),l=c.length.toString().length+2,d=c.map((line,t)=>r.Hc.rightPad((t+1).toString(),l)+line);let h=0;for(let i=0;i<d.length;i++)h=Math.max(d[i].length,h);const f=d.slice(0,o-1),m=d.slice(o-1,o),y=d.slice(o);console.log(f.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+r.Hc.rightPad(m[0],h),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(y.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const k=/ERROR: [0-9]+:([0-9]+):/g;function N(t,e){if(v(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function T(t,e,n,r,o,c,l){const d=t.getAttribLocation(e,n);return-1!==d&&(v(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),v(t,()=>t.vertexAttribPointer(d,o,t.FLOAT,!1,c,l)),v(t,()=>t.enableVertexAttribArray(d)),!0)}function C(t,e,n,r){v(t,()=>function(t,e,n){A(t,n),v(t,()=>t.activeTexture(t.TEXTURE0+n)),v(t,()=>t.bindTexture(t.TEXTURE_2D,e))}(t,e,r)),v(t,()=>t.uniform1i(n,r))}function $(t,e,n){v(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),v(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function S(t,e){v(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),v(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function E(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function R(t,e,n){const r=v(t,()=>e());if(null==r)throw new Error(n);return r}function A(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function F(t,e=2){return r.Hc.sizeFromShape(t.slice(0,t.length-e))}function D(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function _(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[F(t),...D(t)]),e}function M(t){return t%2==0}function P(t,e){if(t=t.slice(-2),e=e.slice(-2),r.Hc.arraysEqual(t,e))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(M(n)&&M(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&M(t[0])&&M(e[0])}let B,L;function z(t,e){return null!=t.getExtension(e)}function V(t){try{if(null!=l(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function W(t){if(0===t)return!1;const e=l(t);if(1!==t){if(z(e,"EXT_color_buffer_float"))return H(e);const t="EXT_color_buffer_half_float";if(z(e,t)){const n=e.getExtension(t);return function(t,e){const n=x(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const c=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),c}(e,n)}return!1}if(!z(e,"OES_texture_float"))return!1;if(!z(e,"WEBGL_color_buffer_float"))return!1;return H(e)}function H(t){const e=x(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function U(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&r.Hc.assert("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the WebGL backend.")})}const G=Object(r.cc)();G.registerFlag("HAS_WEBGL",()=>G.getNumber("WEBGL_VERSION")>0),G.registerFlag("WEBGL_VERSION",()=>V(2)?2:V(1)?1:0),G.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),G.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===G.get("WEBGL_VERSION")),G.registerFlag("WEBGL_CPU_FORWARD",()=>!0),G.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),G.registerFlag("WEBGL_PACK",()=>G.getBool("HAS_WEBGL")),G.registerFlag("WEBGL_PACK_NORMALIZATION",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_CLIP",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),G.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_PACK_REDUCE",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_LAZILY_UNPACK",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_CONV_IM2COL",()=>G.getBool("WEBGL_PACK")),G.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==B){const e=l(t);B=e.getParameter(e.MAX_TEXTURE_SIZE)}return B}(G.getNumber("WEBGL_VERSION"))),G.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==L){const e=l(t);L=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,L)}(G.getNumber("WEBGL_VERSION"))),G.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=G.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=l(t);return e=z(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:z(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),G.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>G.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!r.Zb.isMobile()),G.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=l(t);if(1===t){if(!z(e,"OES_texture_float"))return!1}else if(!z(e,"EXT_color_buffer_float"))return!1;return H(e)}(G.getNumber("WEBGL_VERSION"))),G.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!G.getBool("WEBGL_FORCE_F16_TEXTURES")&&G.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),G.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>W(G.getNumber("WEBGL_VERSION"))),G.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=G.getNumber("WEBGL_VERSION"))&&null!=l(t).fenceSync;var t}),G.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>G.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),G.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});var K=n(356);const{simpleAbsImpl:X,addImpl:Y,ceilImpl:Q,expImpl:J,expm1Impl:Z,floorImpl:tt,logImpl:et,maxImpl:nt,multiplyImpl:at,rsqrtImpl:ot,sliceImpl:st,subImpl:it,transposeImpl:ct,uniqueImpl:ut}=K;class lt{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,i)=>"T"+i);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class pt{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,i)=>"T"+i);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class ht{constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:c}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,c];const l="max"===e?">":"<",d=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${d};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${l} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function ft(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function mt(t,e){return 1===e?[t]:ft(t,e)}function bt(){let t,e,n,o,c,output,l,d,h,f;return 2===Object(r.cc)().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",o="in",c="texture",output="outputColor",l="out vec4 outputColor;",d="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",h="",f="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",o="varying",c="texture2D",output="gl_FragColor",l="",d="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",h="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",f="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:o,texture2D:c,output:output,defineOutput:l,defineSpecialNaN:d,defineSpecialInf:h,defineRound:f}}function gt(t,e,n="index"){const o=r.Hc.computeStrides(e);return o.map((e,i)=>`${`int ${t[i]} = ${n} / ${e}`}; ${i===o.length-1?`int ${t[i+1]} = ${n} - ${t[i]} * ${e}`:`index -= ${t[i]} * ${e}`};`).join("")}function yt(t){const e=r.Hc.computeStrides(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const Ot="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:xt}=r.Tb;function vt(t,e,n,o){const c=[];t.forEach(t=>{const e=r.Hc.sizeFromShape(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?c.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(c.push(`uniform sampler2D ${t.name};`),c.push(`uniform int offset${t.name};`))});const l=c.join("\n"),d=t.map(t=>function(t,e,n=!1){let o="";o+=n?wt(t):jt(t);const c=t.shapeInfo.logicalShape,l=e.logicalShape;c.length<=l.length&&(o+=n?function(t,e){const n=t.name,o=n.charAt(0).toUpperCase()+n.slice(1),c="get"+o+"AtOutCoords",l=t.shapeInfo.logicalShape.length,d=e.logicalShape.length,h=xt(t.shapeInfo.logicalShape,e.logicalShape),f=Et(d),m=d-l;let y;const O=["x","y","z","w","u","v"];y=0===l?"":d<2&&h.length>=1?"coords = 0;":h.map(t=>`coords.${O[t+m]} = 0;`).join("\n");let x="";x=d<2&&l>0?"coords":t.shapeInfo.logicalShape.map((s,i)=>"coords."+O[i+m]).join(", ");let output="return outputValue;";const v=1===r.Hc.sizeFromShape(t.shapeInfo.logicalShape),j=1===r.Hc.sizeFromShape(e.logicalShape);if(1!==l||v||j){if(v&&!j)output=1===d?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(h.length){const t=l-2,e=l-1;h.indexOf(t)>-1&&h.indexOf(e)>-1?output="return vec4(outputValue.x);":h.indexOf(t)>-1?output="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":h.indexOf(e)>-1&&(output="return vec4(outputValue.xx, outputValue.zz);")}}else output="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${c}() {\n      ${f} coords = getOutputCoords();\n      ${y}\n      vec4 outputValue = get${o}(${x});\n      ${output}\n    }\n  `}(t,e):function(t,e){const n=t.name,o=n.charAt(0).toUpperCase()+n.slice(1),c="get"+o+"AtOutCoords",l=e.texShape,d=t.shapeInfo.texShape,h=t.shapeInfo.logicalShape.length,f=e.logicalShape.length;if(!t.shapeInfo.isUniform&&h===f&&null==t.shapeInfo.flatOffset&&r.Hc.arraysEqual(d,l))return`\n      float ${c}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const m=Et(f),y=xt(t.shapeInfo.logicalShape,e.logicalShape),O=f-h;let x;const v=["x","y","z","w","u","v"];x=0===h?"":f<2&&y.length>=1?"coords = 0;":y.map(t=>`coords.${v[t+O]} = 0;`).join("\n");let j="";j=f<2&&h>0?"coords":t.shapeInfo.logicalShape.map((s,i)=>"coords."+v[i+O]).join(", ");return`\n    float ${c}() {\n      ${m} coords = getOutputCoords();\n      ${x}\n      return get${o}(${j});\n    }\n  `}(t,e));return o}(t,e,o)).join("\n"),h=e.texShape,f=bt(),m=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(f);let y,O,x=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${It}\n    ${kt}\n    ${Nt}\n  `}(f);e.isPacked?(y=function(t,e){switch(t.length){case 0:return Ct();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(r.Hc.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const o=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),o=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2);let c=o,l="",d="b, r, c";for(let b=2;b<t.length-1;b++)c*=t[t.length-b-1],l=`\n      int b${b} = index / ${c};\n      index -= b${b} * ${c};\n    `+l,d=`b${b}, `+d;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${l}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${d});\n    }\n  `}(t,e)}}(e.logicalShape,h),O=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(f)):(y=function(t,e){switch(t.length){case 0:return Ct();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(r.Hc.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=gt(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=gt(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=gt(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=gt(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,h),O=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(f)),o&&(x+=Tt);return[x,m,O,l,y,d,n].join("\n")}function jt(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,o]=t.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[c,l]=t.shapeInfo.texShape,d=$t(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${c}, ${l}, ${d});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${St(t)}\n      }\n    `;const r=t.shapeInfo.texShape,o=r[0],c=r[1];if(1===c&&1===o)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const l=$t(e);if(1===c)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===o)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${l}) + 0.5) / ${c}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${c}, index + ${l});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=t.shapeInfo.texShape;if(null!=c&&r.Hc.arraysEqual(e,c)){const t=c[0],e=c[1];return`\n    float ${o}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:l,keptDims:d}=r.Hc.squeezeShape(e),h=l;if(h.length<e.length){const e=Rt(t,h),n=["row","col"];return`\n      ${jt(e)}\n      float ${o}(int row, int col) {\n        return ${o}(${At(n,d)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${o}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${St(t)}\n      }\n    `;const f=c[0],m=c[1],y=$t(n);if(1===m)return`\n    float ${o}(int row, int col) {\n      float index = dot(vec3(row, col, ${y}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===f)return`\n    float ${o}(int row, int col) {\n      float index = dot(vec3(row, col, ${y}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${m}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${o}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${y};\n    vec2 uv = uvFromFlat(${f}, ${m}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=e[1]*e[2],l=e[2],{newShape:d,keptDims:h}=r.Hc.squeezeShape(e),f=d;if(f.length<e.length){const e=Rt(t,f),n=["row","col","depth"];return`\n        ${jt(e)}\n        float ${o}(int row, int col, int depth) {\n          return ${o}(${At(n,h)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${c}, ${l}, 1)));\n        ${St(t)}\n      }\n    `;const m=t.shapeInfo.texShape,y=m[0],O=m[1],x=t.shapeInfo.flatOffset;if(O===c&&null==x)return`\n        float ${o}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${l}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${O}.0, ${y}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(O===l&&null==x)return`\n    float ${o}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${O}.0, ${y}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const v=$t(n);return`\n      float ${o}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${c} + col * ${l} + depth + ${v};\n        vec2 uv = uvFromFlat(${y}, ${O}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=e[3],l=e[2]*c,d=e[1]*l,{newShape:h,keptDims:f}=r.Hc.squeezeShape(e);if(h.length<e.length){const e=Rt(t,h),n=["row","col","depth","depth2"];return`\n      ${jt(e)}\n      float ${o}(int row, int col, int depth, int depth2) {\n        return ${o}(${At(n,f)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${d}, ${l}, ${c}, 1)));\n        ${St(t)}\n      }\n    `;const m=t.shapeInfo.flatOffset,y=t.shapeInfo.texShape,O=y[0],x=y[1];if(x===d&&null==m)return`\n      float ${o}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${l}, ${c}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${x}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(x===c&&null==m)return`\n      float ${o}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${x}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const v=$t(n);return`\n    float ${o}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${l} +\n          depth * ${c} + depth2;\n      vec2 uv = uvFromFlat(${O}, ${x}, index + ${v});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=e[4],l=e[3]*c,d=e[2]*l,h=e[1]*d,{newShape:f,keptDims:m}=r.Hc.squeezeShape(e);if(f.length<e.length){const e=Rt(t,f),n=["row","col","depth","depth2","depth3"];return`\n      ${jt(e)}\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        return ${o}(${At(n,m)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${d}, ${l}, ${c})) +\n          depth3;\n        ${St(t)}\n      }\n    `;const y=t.shapeInfo.flatOffset,O=t.shapeInfo.texShape,x=O[0],v=O[1];if(v===h&&null==y)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${d}, ${l}, ${c}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${v}.0, ${x}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(v===c&&null==y)return`\n      float ${o}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${v}.0, ${x}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const j=$t(n);return`\n    float ${o}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${d} + depth * ${l} +\n          depth2 * ${c} + depth3 + ${j};\n      vec2 uv = uvFromFlat(${x}, ${v}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:c,keptDims:l}=r.Hc.squeezeShape(e);if(c.length<e.length){const e=Rt(t,c),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${jt(e)}\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${o}(${At(n,l)});\n      }\n    `}const d=e[5],h=e[4]*d,f=e[3]*h,m=e[2]*f,y=e[1]*m;if(t.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${y}, ${m}, ${f}, ${h})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${d}, 1)));\n        ${St(t)}\n      }\n    `;const O=t.shapeInfo.flatOffset,x=t.shapeInfo.texShape,v=x[0],j=x[1];if(j===y&&null==O)return`\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${m}, ${f}, ${h}, ${d})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${j}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(j===d&&null==O)return`\n      float ${o}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${j}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const w=$t(n);return`\n    float ${o}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${y} + col * ${m} + depth * ${f} +\n          depth2 * ${h} + depth3 * ${d} + depth4 + ${w};\n      vec2 uv = uvFromFlat(${v}, ${j}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function wt(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=bt();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],c=bt();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${c.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),c=t.shapeInfo.texShape,l=c[0],d=c[1],h=bt();if(null!=c&&r.Hc.arraysEqual(e,c))return`\n      vec4 ${o}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${l}.0);\n\n        return ${h.texture2D}(${n}, uv);\n      }\n    `;const f=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)],m=Math.ceil(e[1]/2);return`\n    vec4 ${o}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${m}, ${f[0]}, ${f[1]}, row, col);\n      return ${h.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,c=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const n=e.slice(1),o=[1,2],c=Rt(t,n),l=["b","row","col"];return`\n        ${wt(c)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${At(l,o)});\n        }\n      `}const l=c[0],d=c[1],h=Math.ceil(e[2]/2),f=h*Math.ceil(e[1]/2),m=bt();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${d}, ${f}, ${h}, b, row, col);\n      return ${m.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),c=t.shapeInfo.texShape,l=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)],d=l[0],h=l[1],f=Math.ceil(e[n-1]/2);let m=f*Math.ceil(e[n-2]/2),y="int b, int row, int col",O=`b * ${m} + (row / 2) * ${f} + (col / 2)`;for(let b=2;b<n-1;b++)y=`int b${b}, `+y,m*=e[n-b-1],O=`b${b} * ${m} + `+O;const x=bt();return`\n    vec4 ${o}(${y}) {\n      int index = ${O};\n      int texR = index / ${h};\n      int texC = index - texR * ${h};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}, ${d});\n      return ${x.texture2D}(${r}, uv);\n    }\n  `}(t)}}const It="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",kt="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Nt="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Tt="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ct(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function $t(t){return"offset"+t}function St(t){const e=t.name,n=r.Hc.sizeFromShape(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Et(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Rt(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function At(t,e){return e.map(e=>t[e]).join(", ")}class Ft{constructor(t,e,n,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.Hc.assert(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const c=t[t.length-1],l=Math.ceil(c/e);this.outputShape=t.slice(0,-1),l>1&&this.outputShape.push(l),o||this.variableNames.push("bestIndicesA");const d=this.outputShape,h=d.length,f=Et(h),m=mt("coords",h);let y,O;if(1===l){O=h+1;const t=Et(O);y=`\n        ${t} sourceLocR = ${t}(${m.join()}, 0);\n        ++${m[h-1]};\n        ${t} sourceLocG = ${t}(${m.join()}, 0);\n        ++${m[h-2]};\n        ${t} sourceLocA = ${t}(${m.join()}, 0);\n        --${m[h-1]};\n        ${t} sourceLocB = ${t}(${m.join()}, 0);\n        --${m[h-2]};`}else O=h,y=`\n        ${f} sourceLocR = coords;\n        ++${m[h-1]};\n        ${f} sourceLocG = coords;\n        ++${m[h-2]};\n        ${f} sourceLocA = coords;\n        --${m[h-1]};\n        ${f} sourceLocB = coords;\n        --${m[h-2]};`;const x=["x","y","z","w","u","v"].slice(0,O),v="."+x[O-1],j=x.map(t=>"int "+t),w=mt("sourceLocR",O-1).concat("inIdx.r"),I=mt("sourceLocG",O-1).concat("inIdx.g"),k=mt("sourceLocB",O-1).concat("inIdx.b"),N=mt("sourceLocA",O-1).concat("inIdx.a"),T="max"===n?"greaterThan":"lessThan",C=o?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${w.join()}),\n                             getBestIndicesAChannel(${I.join()}),\n                             getBestIndicesAChannel(${k.join()}),\n                             getBestIndicesAChannel(${N.join()})));`,$=`vec4(\n            getAChannel(${w.join()}),\n            hasNextCol ? getAChannel(${I.join()}) : 0.,\n            hasNextRow ? getAChannel(${k.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${N.join()}) : 0.)`,S=o?"":`\n      float getBestIndicesAChannel(${j.join()}) {\n        return getChannel(getBestIndicesA(${x.join()}),\n                                          vec2(${x.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${j.join()}) {\n        return getChannel(getA(${x.join()}),\n                               vec2(${x.slice(-2).join()}));\n      }\n      ${S}\n      void main() {\n        ${f} coords = getOutputCoords();\n        bool hasNextCol = ${m[h-1]} < ${d[h-1]-1};\n        bool hasNextRow = ${m[h-2]} < ${d[h-2]-1};\n        ${y}\n        ivec4 srcIdx = ivec4(sourceLocR${v}, sourceLocG${v},\n          sourceLocB${v}, sourceLocA${v}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${$};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${C}\n          vec4 candidate = ${$};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${T}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Dt{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,d=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=d-1-t.padInfo.top,m=h-1-t.padInfo.left,y=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${f}, ${m});\n      const float avgMultiplier = float(${y});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${h};\n            wC+= ${l}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _t{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,c=t.strideHeight,l=t.strideWidth,d=t.dilationDepth,h=t.dilationHeight,f=t.dilationWidth,m=t.effectiveFilterDepth,y=t.effectiveFilterHeight,O=t.effectiveFilterWidth,x=m-1-t.padInfo.front,v=y-1-t.padInfo.top,j=O-1-t.padInfo.left,w=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${x}, ${v}, ${j});\n      const float avgMultiplier = float(${w});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${m};\n            wD += ${d}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${y};\n              wR += ${h}) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${O};\n                wC += ${f}) {\n              float dyC = float(dyCCorner + wC) / ${l}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Mt="return (a < 0.) ? b * a : a;";class Pt{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=r.Tb.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Bt="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Lt{constructor(t,e,n,o=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.Tb.assertAndGetBroadcastShape(e,n);const c=this.outputShape.length;let l="";if(o)if(0===c||1===r.Hc.sizeFromShape(this.outputShape))l="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(l=`\n          ${Et(c)} coords = getOutputCoords();\n        `,1===c)l+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=mt("coords",c);l+=`\n            bool nextRowOutOfBounds =\n              (${t[c-2]} + 1) >= ${this.outputShape[c-2]};\n            bool nextColOutOfBounds =\n              (${t[c-1]} + 1) >= ${this.outputShape[c-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${l}\n\n        setOutput(result);\n      }\n    `}}class zt{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Vt{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Wt{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Ht{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,c="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${c}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ut{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,c="channelsLast"===t.dataFormat,l=e-1-t.padInfo.top,d=n-1-t.padInfo.left,h=c?1:2,f=c?2:3,m=c?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${m}];\n\n        ivec2 dyCorner = ivec2(coords[${h}], coords[${f}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${c}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gt{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,c=t.padInfo.top,l=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${o};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${c};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${l};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qt{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,c=t.strideHeight,l=t.strideWidth,d=e-1-t.padInfo.front,h=n-1-t.padInfo.top,f=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${h}, ${f});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${l}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Kt{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,c=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${c} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xt{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,c=e-1-t.padInfo.top,l=n-1-t.padInfo.left,d=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${d}; dm++) {\n              int d2 = d1 * ${d} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Yt{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.padInfo.top,c=t.padInfo.left,l=t.strideHeight,d=t.strideWidth,h=t.dilationHeight,f=t.dilationWidth,m=t.filterHeight,y=t.filterWidth,O=4*Math.floor(t.inChannels/4),x=t.inChannels%4,v="channelsLast"===t.dataFormat,j=v?1:2,w=v?2:3,I=v?3:1;let k="",N="";n&&(k=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,N="result = activation(result);");const T=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${k}\n\n      const ivec2 strides = ivec2(${l}, ${d});\n      const ivec2 pads = ivec2(${o}, ${c});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${I}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${j}], coords[${w}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${m}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC++) {\n            int xC = xCCorner + wC * ${f};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${O}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${v}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===x}) {\n\n              if (${v}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${O}) *\n                    getW(wR, wC, ${O}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${O}, xR, xC) *\n                    getW(wR, wC, ${O}, d2);\n              }\n\n            } else if (${2===x}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${O}, d2),\n                getW(wR, wC, ${O} + 1, d2)\n              );\n\n              if (${v}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${O}),\n                  getX(batch, xR, xC, ${O} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${O}, xR, xC),\n                  getX(batch, ${O} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===x}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${O}, d2),\n                getW(wR, wC, ${O} + 1, d2),\n                getW(wR, wC, ${O} + 2, d2)\n              );\n\n              if (${v}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${O}),\n                  getX(batch, xR, xC, ${O} + 1),\n                  getX(batch, xR, xC, ${O} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${O}, xR, xC),\n                  getX(batch, ${O} + 1, xR, xC),\n                  getX(batch, ${O} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${T}\n        ${N}\n        setOutput(result);\n      }\n    `}}class Qt{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,c=t.strideHeight,l=t.strideWidth,d=t.dilationDepth,h=t.dilationHeight,f=t.dilationWidth,m=t.filterDepth,y=t.filterHeight,O=t.filterWidth,x=4*Math.floor(t.inChannels/4),v=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${c}, ${l});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${m}; wF++) {\n          int xF = xFCorner + wF * ${d};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${y}; wR++) {\n            int xR = xRCorner + wR * ${h};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${O}; wC++) {\n              int xC = xCCorner + wC * ${f};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${x}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===v}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${x}) *\n                  getW(wF, wR, wC, ${x}, d2);\n              } else if (${2===v}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${x}),\n                  getX(batch, xF, xR, xC, ${x} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${x}, d2),\n                  getW(wF, wR, wC, ${x} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===v}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${x}),\n                  getX(batch, xF, xR, xC, ${x} + 1),\n                  getX(batch, xF, xR, xC, ${x} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${x}, d2),\n                  getW(wF, wR, wC, ${x} + 1, d2),\n                  getW(wF, wR, wC, ${x} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jt{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.inHeight,c=t.inWidth,l=t.padInfo.top,d=t.padInfo.left,h=t.strideHeight,f=t.strideWidth,m=t.dilationHeight,y=t.dilationWidth,O=t.filterHeight,x=t.filterWidth,v=t.outChannels/t.inChannels;let j="",w="";n&&(j=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const I=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${j}\n\n      const ivec2 strides = ivec2(${h}, ${f});\n      const ivec2 pads = ivec2(${l}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${v};\n        int q = d2 - d1 * ${v};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${O}; wR++) {\n          int xR = xRCorner + wR * ${m};\n\n          if (xR < 0 || xR >= ${o}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC++) {\n            int xC = xCCorner + wC * ${y};\n\n            if (xC < 0 || xC >= ${c}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${I}\n        ${w}\n        setOutput(result);\n      }\n    `}}class Zt{constructor(t,e=!1,n=null,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const c=t.inHeight,l=t.inWidth,d=t.padInfo.top,h=t.padInfo.left,f=t.strideHeight,m=t.strideWidth,y=t.dilationHeight,O=t.dilationWidth,x=t.filterHeight,v=t.filterWidth,j=v;let w="int xR; int xC; int xCOffset;";for(let t=0;t<x;t++)for(let e=0;e<v;e++)w+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<x;t++)for(let e=0;e<j;e++){const n=2*e;if(w+=`\n          xR = xRCorner + ${t*y};\n          xC = xCCorner + ${n*O};\n        `,1===m){if(n<v&&(w+=h%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${c} && xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${l}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${c} && xCOffset >= 0 && xCOffset < ${l}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${l}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${c} && xC >= 0 && xC < ${l}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<v)){const e=h%2==0?r.Hc.nearestLargerEven(O):O;O%2==0&&h%2==1||O%2!=0&&h%2!=1?(w+=`\n                  xCOffset = xC + ${h%2} + ${e};\n\n                  if(xR >= 0 && xR < ${c} &&\n                    xCOffset >= 0 && xCOffset < ${l}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,O>1&&(w+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${c} &&\n                      xCOffset >= 0 && xCOffset < ${l}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),w+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):w+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${c} &&\n                    xCOffset >= 0 && xCOffset < ${l}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<v&&(w+=`\n              if(xR >= 0 && xR < ${c}) {\n            `,h%2==1?(w+=`\n                xCOffset = xC + 1 - ${m};\n                if(xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${l}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<v&&(w+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${m};\n                  if(xCOffset >= 0 && xCOffset < ${l}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(w+=`\n                if(xC >= 0 && xC < ${l}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${m};\n                if(xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<v&&(w+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),w+="}");n<v&&(w+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<v&&(w+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<x;t++)for(let e=0;e<v;e++)w+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let I="",k="";n&&(I=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,k="result = activation(result);");const N=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${I}\n\n      const ivec2 strides = ivec2(${f}, ${m});\n      const ivec2 pads = ivec2(${d}, ${h});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${w}\n\n        vec4 result = dotProd;\n        ${N}\n        ${k}\n        setOutput(result);\n      }\n    `}}class te{constructor(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[c,l,d,h]=t,[f]=e,[m,y]=n;this.outputShape=[f,m,y,h];const O="bilinear"===r?1:0,[x,v]=[l-1+".0",d-1+".0"],[j,w,I]=m>1?[""+(l-1)/(m-1),"(y2-y1) * height_ratio",`y1*${x} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+x],[k,N,T]=y>1?[""+(d-1)/(y-1),"(x2-x1) * width_ratio",`x1*${v} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+v];this.userCode=`\n      const float height_ratio = float(${j});\n      const float width_ratio = float(${k});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${c}) {\n          return;\n        }\n\n        float height_scale = ${w};\n        float width_scale = ${N};\n\n        float in_y = ${I};\n        if( in_y < 0.0 || in_y > ${x} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${T};\n        if( in_x < 0.0 || in_x > ${v} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${O} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class ee{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,o=e?"0.0":`getX(${ne(r,"coords")})`,c=t[t.length-1];let l="",d="";e?(l=n?"end != "+(c-1):"end != 0",d=n?"end + 1":"end - 1"):(l=n?"end + pow2 < "+c:"end >= pow2",d=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Et(r)} coords = getOutputCoords();\n        int end = ${re(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${d};\n          ${re(r,"coords")} = idx;\n          val += getX(${ne(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function ne(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function re(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class ae{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=d.DENSE;const e=y(t),n=bt();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${gt(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class oe{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=d.DENSE;const e=y(t),n=bt();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${gt(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class se{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class ie{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class ce{constructor(t){this.variableNames=["A"],this.outTexUsage=h.DOWNLOAD;const e=bt();this.outputShape=t,this.userCode=`\n      ${Ot}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class ue{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=h.DOWNLOAD;const e=bt();this.outputShape=t,this.userCode=`\n      ${Ot}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class le{constructor(t,e,n=!1){this.variableNames=["A"];const r=bt(),[o,c]=e;this.outputShape=t;let output="result";n&&(output="floor(result * 255. + 0.5)"),this.userCode=`\n      ${yt(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${c};\n        int c = imod(flatIndex, ${c});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${c}.0, ${o}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `}}class de{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=bt(),[o,c]=e;this.outputShape=t;let l="",output="result";n&&(output="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let col=0;col<=1;col++){const n=2*e+col;l+=`\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${t[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${c};\n              c = imod(flatIndex, ${c});\n              uv = (vec2(c, r) + halfCR) / vec2(${c}.0, ${o}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${n}] = values[0];\n              } else if(offset == 1) {\n                result[${n}] = values[1];\n              } else if(offset == 2) {\n                result[${n}] = values[2];\n              } else {\n                result[${n}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${yt(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${l}\n\n        ${r.output} = ${output};\n      }\n    `}}class pe{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class he{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const o=Et(this.rank),c=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let i=0;i<t.length;i++)i===e?o.push(`int(getIndices(${r[i]}))`):o.push(""+r[i]);return o.join()}(t,n);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        setOutput(getA(${c}));\n      }\n    `}}class fe{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Et(e.length),o=Et(n.length),c=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${c};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function me(t){const e=bt();return function(t,e){const n=R(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(v(t,()=>t.shaderSource(n,e)),v(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function be(t){return function(t,data){const e=R(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return v(t,()=>t.bindBuffer(t.ARRAY_BUFFER,e)),v(t,()=>t.bufferData(t.ARRAY_BUFFER,data,t.STATIC_DRAW)),e}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function ge(t){return function(t,data){const e=R(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return v(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e)),v(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,data,t.STATIC_DRAW)),e}(t,new Uint16Array([0,1,2,2,1,3]))}function ye(t,e,n,o,c,l){!function(t,e){const n=Object(r.cc)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(e,n);const d=function(t){return R(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),h=t.TEXTURE_2D;return v(t,()=>t.bindTexture(h,d)),v(t,()=>t.texParameteri(h,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),v(t,()=>t.texParameteri(h,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),v(t,()=>t.texParameteri(h,t.TEXTURE_MIN_FILTER,t.NEAREST)),v(t,()=>t.texParameteri(h,t.TEXTURE_MAG_FILTER,t.NEAREST)),v(t,()=>t.texImage2D(h,0,o,e,n,0,c,l,null)),v(t,()=>t.bindTexture(t.TEXTURE_2D,null)),d}function Oe(t){return t.internalFormatFloat}function xe(t){return t.internalFormatHalfFloat}function ve(t){return t.downloadTextureFormat}function je(t){return t.internalFormatPackedFloat}function we(t){return t.internalFormatPackedHalfFloat}function Ie(t,e,n,r,o,c,l,d){const h=t,f=new Float32Array(function(t,e){const[n,r]=O(t,e);return n*r*4}(c,l));return h.bindBuffer(h.PIXEL_PACK_BUFFER,e),h.getBufferSubData(h.PIXEL_PACK_BUFFER,0,f),h.bindBuffer(h.PIXEL_PACK_BUFFER,null),f}class ke{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=Object(r.cc)().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){o[t]=e}(e,t)):this.gl=l(e);let n="WEBGL_color_buffer_float";if(1===Object(r.cc)().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=w(this.gl,t),z(this.gl,e))this.textureHalfFloatExtension=w(this.gl,e);else if(Object(r.cc)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),z(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=w(this.gl,"EXT_color_buffer_half_float");else if(Object(r.cc)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",z(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!z(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=be(this.gl),this.indexBuffer=ge(this.gl),this.framebuffer=function(t){return R(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=x(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(r.cc)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;v(t,()=>t.finish()),v(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),v(t,()=>t.deleteFramebuffer(this.framebuffer)),v(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),v(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),v(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,c]=m(e,n);return ye(t,o,c,Oe(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,c]=m(e,n);return ye(t,o,c,xe(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,c]=m(e,n);return ye(t,o,c,ve(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){v(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?v(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):v(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),v(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,data){this.throwIfDisposed(),function(t,e,n,r,data,o){let c,l,d;v(t,()=>t.bindTexture(t.TEXTURE_2D,e)),data instanceof Uint8Array?(c=new Uint8Array(n*r*4),l=t.UNSIGNED_BYTE,d=t.RGBA):(c=new Float32Array(n*r*4),l=t.FLOAT,d=o.internalFormatPackedFloat),c.set(data),v(t,()=>t.texImage2D(t.TEXTURE_2D,0,d,n,r,0,t.RGBA,l,c)),v(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,data,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,c]=O(e,n);return ye(t,o,c,we(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,c]=O(e,n);return ye(t,o,c,je(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(S(this.gl,this.framebuffer),this.outputTexture=null),v(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[o,c]=m(e,n),l=new Uint8Array(e*n*4);return v(t,()=>t.readPixels(0,0,o,c,r.downloadTextureFormat,t.UNSIGNED_BYTE,l)),new Float32Array(l.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,o,c){return Ie(this.gl,t,0,0,0,o,c,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const o=t.createBuffer();v(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,o));const c=16*e*n;return v(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,c,t.STREAM_READ)),v(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),v(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),o}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(Object(r.cc)().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(o,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=o}else Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return v(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=I(e,t),r=me(e),o=function(t){return R(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return v(e,()=>e.attachShader(o,r)),v(e,()=>e.attachShader(o,n)),function(t,e){if(v(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,o),this.debug&&N(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=function(t,e,n){return v(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),T(t,e,"clipSpacePos",n,3,20,0)&&T(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&v(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&N(this.gl,this.program),v(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return R(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),v(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),C(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,o]=O(e,n);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&N(this.gl,this.program),E(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),v(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),v(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=w(this.gl,2===Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await r.Hc.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let i=0;for(;i<t.length;++i){if(!t[i]())break}return i-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let i=0;i<=t;++i){const{resolveFn:t}=this.itemsToPoll[i];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||r.Hc.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),$(this.gl,t,this.framebuffer),this.debug&&E(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?($(this.gl,this.outputTexture,this.framebuffer),this.debug&&E(this.gl)):S(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;$(r,t,this.framebuffer),this.debug&&E(r),this.outputTexture=t,v(r,()=>r.viewport(0,0,e,n)),v(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),v(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Ne(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((s,i)=>{const t=s.logicalShape,input=e[i],n=input.shape;if(!r.Hc.arraysEqual(t,n))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${t} and ${n} must match`);if(s.isUniform&&input.isUniform)return;const o=s.texShape,c=input.isUniform?null:input.texData.texShape;if(!r.Hc.arraysEqual(o,c))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${c} must match`)})}class Te{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:o,strideWidth:c,strideHeight:l,padInfo:d,outWidth:h,dilationWidth:f,dilationHeight:m,dataFormat:y}=n,{left:O,top:x}=d,v=o*r,j=bt(),w="channelsLast"===y,I=w?0:1,k=w?1:2;let N="";for(let n=0;n<=1;n++)for(let col=0;col<=1;col++)N+=`\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${h})) * ${l} - ${x};\n            d0 = offsetY + ${m} * (pos / ${v});\n\n            if(d0 < ${e[I]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${h}.) * ${c}. - ${O}.);\n              d1 = offsetX + ${f} * (int(mod(float(pos), ${v}.) / ${o}.));\n\n              if(d1 < ${e[k]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${o}.));\n\n                if (${w}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${N}\n\n        ${j.output} = result;\n      }\n    `}}class Ce{constructor(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];const c=e,l=t[3]-1;let d;this.outputShape=t;const h=`float(${n}) + float(${r}) * sum`;d=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${c}; j <= ${c}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${l}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${d};\n        setOutput(val);\n      }\n    `}}class $e{constructor(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Se{constructor(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const c=e,l=t[3]-1;let d;this.outputShape=t;const h=`float(${n}) + float(${r}) * sum`;d=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${c};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${c}; j <= ${c}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${l}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${d};\n        setOutput(result);\n      }\n    `}}class Ee{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=o-1-t.padInfo.top,d=c-1-t.padInfo.left,h=o*c-1;this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${c}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${h} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${c} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Re{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,c=t.dilationHeight,l=t.dilationWidth,d=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=d-1-t.padInfo.front,y=h-1-t.padInfo.top,O=f-1-t.padInfo.left,x=d*h*f-1;this.userCode=`\n      const ivec3 pads = ivec3(${m}, ${y}, ${O});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${d};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${c}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${f};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${x} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${h} * ${f} +\n                  wR * ${f} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ae{constructor(t,e,n,r=!1,o=!1,c=!1,l=null,d=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const h=r?t[1]:t[2],f=Math.ceil(h/2),m=r?"i * 2, rc.y":"rc.y, i * 2",y=o?"rc.z, i * 2":"i * 2, rc.z",O=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],x=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let v="",j="";l&&(v=d?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${l}\n        }`:`vec4 activation(vec4 x) {\n          ${l}\n        }`,j="result = activation(result);");const w=c?"result += getBiasAtOutCoords();":"";c&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights");let I="rc.x",k="rc.x";t[0]<e[0]?I=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(k=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${v}\n\n      const float sharedDimension = ${f}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${f}; i++) {\n          int batchA = ${I};\n          int batchB = ${k};\n          vec4 a = getMatrixA(batchA, ${m});\n          vec4 b = getMatrixB(batchB, ${y});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${O[0]} * ${x[0]});\n          result += (${O[1]} * ${x[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${w}\n\n        ${j}\n\n        setOutput(result);\n      }\n    `}}class Fe{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class De{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class _e{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=mt("rc",e),r=Et(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let i=t-2;i<t;i++)r+=`${n[i]} >= ${e[i]}`,i<t-1&&(r+="||");return r}(e,t,n),c=function(t,e,n,r){if(1===t)return"";const o=r.slice(-2);return`\n    int r = ${o[0]};\n    int c = ${o[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),output=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let col=0;col<=1;col++){let o=`${0===r?"r":"rp1"}, ${0===col?"c":"cp1"}`;for(let n=2;n<t;n++)o=e[e.length-1-n]+","+o;n.push(o)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${c}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `}}}class Me{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((p,i)=>p[0]+t[i]+p[1]);const r=t.length,o=Et(r),c=e.map(p=>p[0]).join(","),l=e.map((p,i)=>p[0]+t[i]).join(","),d=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${d}));\n        }\n      }\n    `:`\n        int start = ${c};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Pe{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((p,i)=>p[0]+t[i]+p[1]);const r=t.length,o=Et(r),c=e.map(p=>p[0]).join(","),l=e.map((p,i)=>p[0]+t[i]).join(","),d=mt("rc",r),source=mt("source",r),h=`${d[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m=[o+" rc = outputLoc;",`${d[r-1]} += 1;\n       if(${h}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${d[r-2]} += 1;\n       if(${d[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${d[r-1]} += 1;\n         if(${h}) {`],y=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let O="";for(let i=0,t=1===r?2:4;i<t;i++)O+=`\n        ${m[i]}\n        if (${y}) {\n          result[${i}] = float(${n});\n        } else {\n          ${o} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${f});\n        }\n      `;O+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${O}\n        setOutput(result);\n      }\n    `}}class Be{constructor(t,e,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const c=t.filterWidth,l=t.strideHeight,d=t.strideWidth,h=t.dilationHeight,f=t.dilationWidth,m=t.effectiveFilterHeight,y=t.effectiveFilterWidth,O=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const v="avg"===e,j=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,w=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let I="0.0";if(v||(I="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${l}, ${d});\n        const ivec2 pads = ivec2(${O}, ${x});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${m};\n              wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${y};\n                wC += ${f}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?j:w:`wR * ${y} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let k=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(k="avgValue / count");const N=4*Math.floor(c/4),T=c%4,C=`\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${l}, ${d});\n      const ivec2 pads = ivec2(${O}, ${x});\n      const float initializationValue = ${I};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${I});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${m};\n            wR += ${h}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${N}; wC += 4) {\n            int xC = xCCorner + wC * ${f};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              getValue(batch, xR, xC + 3 * ${f}, d)\n            );\n\n            ${C}\n          }\n\n          int xC = xCCorner + ${N};\n          if (${1===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${C}\n          } else if (${2===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${C}\n          } else if (${3===T}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              initializationValue\n            );\n\n            ${C}\n          }\n        }\n        setOutput(${k});\n      }\n    `}}class Le{constructor(t,e,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const c=t.filterWidth,l=t.strideDepth,d=t.strideHeight,h=t.strideWidth,f=t.dilationDepth,m=t.dilationHeight,y=t.dilationWidth,O=t.effectiveFilterDepth,x=t.effectiveFilterHeight,v=t.effectiveFilterWidth,j=t.padInfo.front,w=t.padInfo.top,I=t.padInfo.left;this.outputShape=t.outShape;const k="avg"===e;let N="0.0";if(k||(N="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${l}, ${d}, ${h});\n        const ivec3 pads = ivec3(${j}, ${w}, ${I});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${O};\n              wD += ${f}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${x};\n                wR += ${m}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${v};\n                  wC += ${y}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${x} * ${v} +\n                      wR * ${v} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let T=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(T="avgValue / count");const C=4*Math.floor(c/4),$=c%4,S=`\n      if (${k}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${l}, ${d}, ${h});\n      const ivec3 pads = ivec3(${j}, ${w}, ${I});\n      const float initializationValue = ${N};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${N});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${O};\n            wD += ${f}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${x};\n            wR += ${m}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${C}; wC += 4) {\n              int xC = xCCorner + wC * ${y};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${y}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${C};\n            if (${1===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${T});\n        }\n      }\n    `}}class ze{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:o,outSize:c}=t;this.outputShape=[r,c];let l="0.0",d="";"prod"===e?l="1.0":"min"===e?(l="1.0 / 1e-20",d="min"):"max"===e&&(l="-1.0 / 1e-20",d="max");let h=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?h="sumValue":"prod"===e?h="prodValue":"all"===e?h="allValue":"any"===e&&(h="anyValue");const f=4*Math.floor(n/4),m=n%4;let y=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${d}(values, minMaxValue);\n      }\n    `,O="vec4";"all"===e?(l="1.0",y="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",O="bvec4"):"any"===e&&(l="0.0",y="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",O="bvec4");let x="";o%n>0&&(x=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${l};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${x}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${l});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${f}; i += 4) {\n          int inIdx = inOffset + i;\n          ${O} values = ${O}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${y}\n        }\n\n        int inIdx = inOffset + ${f};\n        if (${1===m}) {\n          ${O} values = ${O}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${2===m}) {\n          ${O} values = ${O}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${3===m}) {\n          ${O} values = ${O}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${y}\n        }\n        setOutput(${h});\n      }\n    `}}class Ve{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let i=0;i<4;i++){let t="thisRC = rc;";i%2==1&&(t+="thisRC.z += 1;"),i>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${i>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${gt(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${yt(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class We{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,o]=e.shape,[,c,l]=t.shape,d=[n&&c>1?r-1:r,n&&l>1?o-1:o],h=[n&&c>1?c-1:c,n&&l>1?l-1:l],f=d[0]/h[0],m=d[1]/h[1],y=1/f,O=1/m,x=2*Math.ceil(y)+2,v=2*Math.ceil(O)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${O});\n\n        const int winHeight = int(${x});\n        const int winWidth = int(${v});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class He{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[o,c,l,d]=t;this.outputShape=[o,e,n,d];const h=[r&&e>1?c-1:c,r&&n>1?l-1:l],f=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${h[0]/f[0]},\n          ${h[1]/f[1]});\n      const vec2 inputShapeRC = vec2(${c}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Ue{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,c,l,d]=t;this.outputShape=[o,e,n,d];const h=[r&&e>1?c-1:c,r&&n>1?l-1:l],f=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${h[0]/f[0]},\n          ${h[1]/f[1]},\n          ${h[1]/f[1]});\n      const vec3 inputShapeRC = vec3(${c}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${d-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class Ge{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,o]=e.shape,[,c,l]=t.shape,d=[n&&c>1?r-1:r,n&&l>1?o-1:o],h=[n&&c>1?c-1:c,n&&l>1?l-1:l],f=d[0]/h[0],m=d[1]/h[1],y=1/f,O=1/m,x=2*Math.ceil(y)+2,v=2*Math.ceil(O)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${O});\n\n        const int winHeight = int(${x});\n        const int winWidth = int(${v});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${d[0]}) *\n                (float(dyR) / float(${h[0]}));\n\n            float sourceFracCol =\n                float(${d[1]}) *\n                  (float(dyC) / float(${h[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class qe{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[o,c,l,d]=t;this.outputShape=[o,e,n,d];const h=[r&&e>1?c-1:c,r&&n>1?l-1:l],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],m=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${h[0]/f[0]},\n          ${h[1]/f[1]});\n      const vec2 inputShapeRC = vec2(${c}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Ke{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,i)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(i)).join(","),o=Et(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Xe{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=mt("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,c=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,l=Et(n);function d(n){const r=t.map((r,i)=>function(i,n){return-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - ${n[i]} - 1`:""+n[i]}(i,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${l} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return d(t)}(r.slice())};\n          if(${o}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",d(t)}(r.slice())};\n          }\n          if(${c}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",d(t)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",d(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Ye{constructor(t,e,n,r,o,c,l=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=c;const d=Et(o.length),h=Et(c.length);let f="";1===n?f="i":2===n&&(f="i, j");const m=`getIndices(${f})`;let y="";1===r?y="i":2===r&&(y="i, coords[1]");const O=`getUpdates(${y})`,x=e>1?"strides[j]":"strides";this.userCode=`\n        ${d} strides = ${d}(${o});\n\n        void main() {\n          ${h} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${m});\n              flattenedIndex += index * ${x};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${O};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Qe{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,o=t.inSize,c=t.numSegments,l=c*Math.ceil(o/n);this.outputShape=[r,l];const d=4*Math.floor(n/4),h=n%4,f="\n        sumValue += dot(values, segFilter);\n    ";let m="";o%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let y="";o%n>0&&(y=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${y}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${c})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${c})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Je{constructor(t,e,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],c=[],l=[];for(let i=0;i<e.length;i++)l.push(""+n[i]),i<t&&c.push(""+n[i]);r=c.join(),o=l.join()}const c=Et(n);this.userCode=`\n      void main() {\n        ${c} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}class Ze{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Et(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return tn.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let body;body=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,i)=>`sourceLoc.${tn[i]} = start[${i}] + coords.${tn[i]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${body}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const tn=["x","y","z","w","u","v"];class en{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Et(this.rank),n=mt("coords",this.rank),r=mt("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,c=`getChannel(getSource(${r.join()}), ${o})`,l=`\n      result.x = ${c};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${c};\n        --${r[this.rank-1]};\n      }\n    `,d=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${c};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${c};\n        }\n      }\n    `,h=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,i)=>`start[${i}]`).join()});`:t.map((t,i)=>`${r[i]} = ${n[i]} + start[${i}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${h}\n        vec4 result = vec4(0.);\n        ${l}\n        ${d}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class nn{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=Et(n.length),c=Et(n.length);let l="";if(1===r)l="coords * strides + begin";else{let t=0;l=n.map((e,i)=>(t++,1===n.length?`coords * strides[${i}] + begin[${i}]`:`coords[${t-1}] * strides[${i}] + begin[${i}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        setOutput(getX(${l}));\n      }\n    `}}class rn{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=on(e,n),o=sn(t,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const c=an(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=c,this.log();const t=this.freeTextures[o].shift();return this.usedTextures[o].push(t),t}let l;return r===f.PACKED_2X2_FLOAT32?l=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===f.PACKED_2X2_FLOAT16?l=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===f.UNPACKED_FLOAT32?l=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===f.UNPACKED_FLOAT16?l=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===f.PACKED_4X1_UNSIGNED_BYTE&&(l=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(l),this.numUsedTextures++,this._numBytesAllocated+=c,this.log(),l}releaseTexture(t,e,n,o){if(null==this.freeTextures)return;const c=on(n,o),l=sn(e,c,o);l in this.freeTextures||(this.freeTextures[l]=[]);const d=an(e,c,this.gpgpu.gl,this.gpgpu.textureConfig,o),h=Object(r.cc)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==h&&this._numBytesAllocated>h?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=d):(this.freeTextures[l].push(t),this.numFreeTextures++,this._numBytesFree+=d),this.numUsedTextures--;const f=this.usedTextures[l],m=f.indexOf(t);if(m<0)throw new Error("Cannot release a texture that was never provided by this texture manager");f.splice(m,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function an(t,e,n,r,o){const c=function(t,e){switch(t){case f.PACKED_2X2_FLOAT32:return je(e);case f.PACKED_2X2_FLOAT16:return we(e);case f.UNPACKED_FLOAT32:return Oe(e);case f.UNPACKED_FLOAT16:return xe(e);case f.PACKED_4X1_UNSIGNED_BYTE:return ve(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let l;if(o){const[e,n]=O(t[0],t[1]);l=e*n}else{const[e,n]=m(t[0],t[1]);l=e*n}return l*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,c)}function on(t,e){if(t===h.UPLOAD)return f.PACKED_2X2_FLOAT32;if(t===h.RENDER||null==t)return function(t){return Object(r.cc)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?f.PACKED_2X2_FLOAT32:f.UNPACKED_FLOAT32:t?f.PACKED_2X2_FLOAT16:f.UNPACKED_FLOAT16}(e);if(t===h.DOWNLOAD||t===h.PIXELS)return f.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function sn(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class cn{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let i=0;i<n.length;i++)n[i]=t[i]*e[i];this.outputShape=n,this.rank=n.length;const r=Et(this.rank),o=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let i=0;i<t.length;i++)r.push(`imod(${n[i]}, ${t[i]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}class un{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ln="return abs(x);",dn="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",pn="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",hn="return (x >= 0.0) ? x : (exp(x) - 1.0);",fn=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${r.Tb.SELU_SCALEALPHA};\n  float scale = ${r.Tb.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const mn="return -x;",bn="return ceil(x);",gn="return floor(x);",yn="return exp(x);",On="return exp(x) - 1.0;",xn=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${r.Tb.ERF_P};\n  float a1 = ${r.Tb.ERF_A1};\n  float a2 = ${r.Tb.ERF_A2};\n  float a3 = ${r.Tb.ERF_A3};\n  float a4 = ${r.Tb.ERF_A4};\n  float a5 = ${r.Tb.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,vn="return x;",jn="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",wn="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",In="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class kn{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Nn{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=mt("rc",e),r=Et(e),o=function(t,e){if(1===t)return"rc";let n="";for(let i=0;i<t;i++)n+=e[i],i<t-1&&(n+=",");return n}(e,n),c=n.slice(-2),l=e<=1?"rc":`vec2(${c.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${l}));\n      }\n    `}}const{segment_util:Tn}=r.Tb,Cn=r.kc.split,$n=r.kc.tile,Sn=r.kc.topkImpl,En=r.kc.whereImpl,Rn={};function An(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?jn:dn;if("elu"===t)return e?In:hn;if("relu6"===t)return e?wn:pn;if("prelu"===t)return e?Bt:Mt;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class Fn extends r.Z{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Object(r.cc)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=l(Object(r.cc)().getNumber("WEBGL_VERSION"));this.binaryCache=((e=Object(r.cc)().getNumber("WEBGL_VERSION"))in Rn||(Rn[e]={}),Rn[e]),this.gpgpu=new ke(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new rn(this.gpgpu),this.numMBBeforeWarning=null==Object(r.cc)().global.screen?1024:Object(r.cc)().global.screen.height*Object(r.cc)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r.z(this,Object(r.bc)())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((Object(r.cc)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Object(r.cc)().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={};return this.texData.set(o,{shape:e,dtype:n,values:t,usage:h.UPLOAD,refCount:1,complexParentRefCount:0}),o}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,o){if(Object(r.cc)().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:o,values:e,usage:h.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:o,complexTensorInfos:c,slice:l,shape:d,isPacked:h}=e;if(null!=l){let e;e=h?new kn(d,vn):new un(d,vn);const n=this.runWebGLProgram(e,[{dataId:t,shape:d,dtype:o}],o),data=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===o)return n;const f=null!=this.activeTimers;let m,y;if(f&&(m=r.Hc.now()),"complex64"===o){const t=this.readSync(c.real.dataId),e=this.readSync(c.imag.dataId);y=r.Tb.mergeRealAndImagArrays(t,e)}else y=this.getValuesFromTexture(t);return f&&(this.downloadWaitMs+=r.Hc.now()-m),this.convertAndCacheOnCPU(t,y)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:o,slice:c,dtype:l,complexTensorInfos:d,isPacked:h}=e;if(null!=c){let e;e=h?new kn(o,vn):new un(o,vn);const n=this.runWebGLProgram(e,[{dataId:t,shape:o,dtype:l}],l),data=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(t);if(!Object(r.cc)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(r.cc)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let f,m,O=null;if("complex64"!==l&&Object(r.cc)().get("WEBGL_BUFFER_SUPPORTED")){f=this.decode(t);const e=this.texData.get(f.dataId);O=this.gpgpu.createBufferFromTexture(e.texture,...y(o))}if(this.pendingRead.set(t,[]),"complex64"!==l&&await this.gpgpu.createAndWaitForFence(),"complex64"===l){const t=await Promise.all([this.read(d.real.dataId),this.read(d.imag.dataId)]),e=t[0],n=t[1];m=r.Tb.mergeRealAndImagArrays(e,n)}else if(null==O)m=this.getValuesFromTexture(t);else{const t=r.Hc.sizeFromShape(o);m=this.gpgpu.downloadFloat32MatrixFromBuffer(O,t)}null!=f&&this.disposeIntermediateTensorInfo(f);const x=this.convertAndCacheOnCPU(t,m),v=this.pendingRead.get(t);return this.pendingRead.delete(t),v.forEach(t=>t(x)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),x}checkNumericalProblems(t){if(null!=t)for(let i=0;i<t.length;i++){const e=t[i];if(!j(e)){if(Object(r.cc)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${e} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${e} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:o}=this.texData.get(t),c=r.Hc.sizeFromShape(e);if(Object(r.cc)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...y(e)).subarray(0,c);return this.disposeIntermediateTensorInfo(n),o}const l=Object(r.cc)().getBool("WEBGL_PACK")&&!0===o,d=l?_(e):e,h=l?new ue(d):new ce(d),output=this.runWebGLProgram(h,[{shape:d,dtype:n,dataId:t}],"float32"),f=this.texData.get(output.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture,f.texShape[0],f.texShape[1]).subarray(0,c);return this.disposeIntermediateTensorInfo(output),m}async time(t){const e=this.activeTimers,n=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,t();const c=r.Hc.flatten(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),l=r.Hc.flatten(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,o&&(this.programTimersStack=null);const d={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(c);d.kernelMs=r.Hc.sum(t),d.getExtraProfileInfo=()=>t.map((t,i)=>({name:l[i],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else d.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,d}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.Hc.now(),endMs:null}}endTimer(t){return Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=r.Hc.now(),t)}async getQueryTime(t){if(Object(r.cc)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:o,isPacked:c,slice:l}=this.texData.get(t),d=l&&l.origDataId||t,h=this.dataRefCount.get(d);h>1?this.dataRefCount.set(d,h-1):(this.dataRefCount.delete(d),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,o,c)));const f=this.texData.get(t);f.texture=null,f.texShape=null,f.isPacked=!1,f.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return Object(r.cc)().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Object(r.bc)().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every(input=>null==this.texData.get(input.dataId).texture&&r.Hc.sizeFromShape(input.shape)<e)}getGPGPUContext(){return this.gpgpu}slice(t,e,n){if(this.shouldExecuteOnCPU([t])){const r=st(this.texData.get(t.dataId).values,e,n,t.shape,t.dtype);return this.makeOutput(n,t.dtype,r)}if(0===r.Hc.sizeFromShape(n))return Object(r.zc)([],n,t.dtype);const{isPacked:o}=this.texData.get(t.dataId),c=r.uc.isSliceContinous(t.shape,e,n);if(o||!c){const o=Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new en(n):new Ze(n),c=o.getCustomSetupFunc(e);return this.compileAndRun(o,[t],null,c)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const o=this.texData.get(t.dataId),c=this.makeOutput(n,t.dtype),l=this.texData.get(c.dataId);Object.assign(l,o),l.shape=n,l.dtype=t.dtype;let d=r.uc.computeFlatOffset(e,t.strides);o.slice&&(d+=o.slice.flatOffset),l.slice={flatOffset:d,origDataId:o.slice&&o.slice.origDataId||t.dataId};const h=this.dataRefCount.get(l.slice.origDataId)||1;return this.dataRefCount.set(l.slice.origDataId,h+1),c}stridedSlice(t,e,n,o){const c=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.stridedSlice(t,e,n,o));if(c)return c;const l=r.uc.computeOutShape(e,n,o);if(l.some(t=>0===t))return Object(r.zc)([],l);const d=new nn(e,o,l);return this.compileAndRun(d,[t])}reverse(t,e){const n=Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Xe(t.shape,e):new Ke(t.shape,e);return this.compileAndRun(n,[t])}neg(t){const e=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.neg(t));if(e)return e;if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,mn,t.dtype);const n=new un(t.shape,mn);return this.compileAndRun(n,[t])}batchMatMul(a,b,t,e){const n=t?a.shape[2]:a.shape[1],o=e?b.shape[1]:b.shape[2],c=t?a.shape[1]:a.shape[2],l=Math.max(a.shape[0],b.shape[0]);if((1===n||1===o)&&c>1e3){t&&(a=Object(r.Ec)(a,[0,2,1])),e&&(b=Object(r.Ec)(b,[0,2,1]));const n=1===o?a:a.as3D(l,c,1),d=1===o?2:1,h=1===o?b.as3D(l,1,c):b;return r.mc(n,h).sum(d,!0)}const d=Object(r.Gc)(a.dtype,b.dtype),h=new Ae(a.shape,b.shape,[l,n,o],t,e);return this.compileAndRun(h,[a,b],d)}fusedBatchMatMul({a:a,b:b,transposeA:t,transposeB:e,bias:n,activation:o,preluActivationWeights:c}){const l=t?a.shape[2]:a.shape[1],d=e?b.shape[1]:b.shape[2],h=Math.max(a.shape[0],b.shape[0]),f=Object(r.Gc)(a.dtype,b.dtype),m=null!=n,y=null!=c,O=o?An(o,!0):null,x=new Ae(a.shape,b.shape,[h,l,d],t,e,m,O,y),v=[a,b];return n&&v.push(n),c&&v.push(c),this.compileAndRun(x,v,f)}localResponseNormalization4D(t,e,n,o,c){const l=Object(r.cc)().getBool("WEBGL_PACK_NORMALIZATION")?new Se(t.shape,e,n,o,c):new Ce(t.shape,e,n,o,c);return this.compileAndRun(l,[t])}LRNGrad(t,e,n,r,o,c,l){const d=new $e(e.shape,r,o,c,l);return this.compileAndRun(d,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>r.Hc.decodeString(t)),o=Object(r.Vb)(t.shape,t.dtype,n);return $n(o,e)}const n=new cn(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const o=Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Pe(t.shape,e,n):new Me(t.shape,e,n);return this.compileAndRun(o,[t])}gather(t,e,n){const r=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.gather(t,e,n));if(r)return r;const o=new he(t.shape,e.size,n);return this.compileAndRun(o,[t,e])}batchToSpaceND(t,e,n){r.Hc.assert(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const o=e.reduce((a,b)=>a*b),c=r.Tb.getReshaped(t.shape,e,o),l=r.Tb.getPermuted(c.length,e.length),d=r.Tb.getReshapedPermuted(t.shape,e,o),h=r.Tb.getSliceBeginCoords(n,e.length),f=r.Tb.getSliceSize(d,n,e.length);return Object(r.Ec)(t.reshape(c),l).reshape(d).slice(h,f)}spaceToBatchND(t,e,n){r.Hc.assert(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const o=e.reduce((a,b)=>a*b),c=[[0,0]];c.push(...n);for(let i=1+e.length;i<t.shape.length;++i)c.push([0,0]);const l=t.pad(c),d=r.Tb.getReshaped(l.shape,e,o,!1),h=r.Tb.getPermuted(d.length,e.length,!1),f=r.Tb.getReshapedPermuted(l.shape,e,o,!1),m=Object(r.Ec)(l.reshape(d),h);return Object(r.qc)(m,f)}reduce(t,e,n){const o=t.shape[0],c=t.shape[1],l=r.Tb.computeOptimalWindowSize(c),d=Math.ceil(c/l),h=new ze({windowSize:l,inSize:c,batchSize:o,outSize:d},e),output=this.compileAndRun(h,[t],n);return 1===output.shape[1]?output:this.reduce(output,e,n)}argReduce(t,e,n=null){let o=t.shape[0],c=t.shape[1];null!=n&&(o=n.shape[0],c=n.shape[1]);const l=r.Tb.computeOptimalWindowSize(c),d={windowSize:l,inSize:c,batchSize:o,outSize:Math.ceil(c/l)},h=new ht(d,e,null==n),f=[t];null!=n&&f.push(n);const output=this.compileAndRun(h,f,"int32");return 1===output.shape[1]?output:this.argReduce(t,e,output)}argReducePacked(t,e,n=null){const o=null!=n?n.shape:t.shape,c=o[o.length-1],l=r.Tb.computeOptimalWindowSize(c),d=new Ft(o,l,e,null==n),h=null==n?[t]:[t,n],output=this.compileAndRun(d,h,"int32");return output.rank===t.rank?this.argReducePacked(t,e,output):output}sum(t,e){r.Tb.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),c=r.Hc.sizeFromShape(o),l=t.as2D(-1,c),d=r.yc(t.dtype);return this.reduce(l,"sum",d).reshape(n)}prod(t,e){const n=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.prod(t,e));if(n)return n;const[o,c]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=r.Hc.sizeFromShape(c),d=t.as2D(-1,l),h=r.yc(t.dtype);return this.reduce(d,"prod",h).reshape(o)}unsortedSegmentSum(t,e,n){let o=0;const c=r.Tb.getAxesPermutation([o],t.rank);let l=t;null!=c&&(l=Object(r.Ec)(t,c),o=r.Tb.getInnerMostAxes(1,t.rank)[0]);const d=Tn.computeOutShape(l.shape,o,n),h=r.Hc.sizeFromShape([l.shape[o]]),f=l.as2D(-1,h),m=r.yc(t.dtype);let y=this.segOpCompute(f,"unsortedSegmentSum",e,m,n).reshape(d);return null!=c&&(y=Object(r.Ec)(y,r.Tb.getUndoAxesPermutation(c))),y}segOpCompute(t,e,n,o,c){const l=t.shape[0],d=t.shape[1],h=Tn.segOpComputeOptimalWindowSize(d,c),f=new Qe({windowSize:h,inSize:d,batchSize:l,numSegments:c},e),output=this.compileAndRun(f,[t,n],o);return output.shape[1]===c?output:(n=Object(r.nc)(0,c).tile([d/h]),this.segOpCompute(output,e,n,o,c))}argMinMaxReduce(t,e,n){const o=[e];if(r.Tb.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),o,t.rank),!Object(r.cc)().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,c]=r.Tb.computeOutAndReduceShapes(t.shape,o),l=r.Hc.sizeFromShape(c),d=t.as2D(-1,l);return this.argReduce(d,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const o=t.shape[e];let c=t;for(let i=0;i<=Math.ceil(Math.log2(o))-1;i++){const e=new ee(t.shape,!1,r),n=e.getCustomSetupFunc(i),o=c;c=this.compileAndRun(e,[c],c.dtype,n),o.dispose()}if(n){const e=new ee(t.shape,n,r),o=c;c=this.compileAndRun(e,[c]),o.dispose()}return c}equal(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(equal(a, b));\n","bool");const t=new Pt("return float(a == b);",a.shape,b.shape);return this.compileAndRun(t,[a,b],"bool")}less(a,b){const t=this.tryRunOnCpuOrThrow([a,b],()=>this.cpuBackend.less(a,b));if(t)return t;if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(lessThan(a, b));\n","bool");const e=new Pt("return float(a < b);",a.shape,b.shape);return this.compileAndRun(e,[a,b],"bool")}lessEqual(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(lessThanEqual(a, b));\n","bool");const t=new Pt("return float(a <= b);",a.shape,b.shape);return this.compileAndRun(t,[a,b],"bool")}greater(a,b){const t=this.tryRunOnCpuOrThrow([a,b],()=>this.cpuBackend.greater(a,b));if(t)return t;if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(greaterThan(a, b));\n","bool");const e=new Pt("return float(a > b);",a.shape,b.shape);return this.compileAndRun(e,[a,b],"bool")}greaterEqual(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const t=new Pt("return float(a >= b);",a.shape,b.shape);return this.compileAndRun(t,[a,b],"bool")}logicalNot(t){const e=new un(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const t=new Pt("return float(a >= 1.0 && b >= 1.0);",a.shape,b.shape);return this.compileAndRun(t,[a,b],"bool")}logicalOr(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const t=new Pt("return float(a >= 1.0 || b >= 1.0);",a.shape,b.shape);return this.compileAndRun(t,[a,b],"bool")}select(t,a,b){const e=new Je(t.rank,a.shape,a.rank);return this.compileAndRun(e,[t,a,b],Object(r.Gc)(a.dtype,b.dtype))}where(t){r.Tb.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return En(t.shape,e)}topk(t,e,n){const r=t.dataSync();return Sn(r,t.shape,t.dtype,e,n)}min(t,e){r.Tb.assertAxesAreInnerMostDims("min",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),c=r.Hc.sizeFromShape(o),l=t.as2D(-1,c);return this.reduce(l,"min",l.dtype).reshape(n)}minimum(a,b){const t=this.tryRunOnCpuOrThrow([a,b],()=>this.cpuBackend.minimum(a,b));if(t)return t;const e=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",a.shape,b.shape):new Pt("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",a.shape,b.shape);return this.compileAndRun(e,[a,b])}mod(a,b){const t=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",a.shape,b.shape):new Pt("if (b == 0.0) return NAN;\n  return mod(a, b);",a.shape,b.shape);return this.compileAndRun(t,[a,b])}maximum(a,b){const t=this.tryRunOnCpuOrThrow([a,b],()=>this.cpuBackend.maximum(a,b));if(t)return t;const e=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",a.shape,b.shape):new Pt("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",a.shape,b.shape);return this.compileAndRun(e,[a,b])}all(t,e){r.Tb.assertAxesAreInnerMostDims("all",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),c=r.Hc.sizeFromShape(o),l=t.as2D(-1,c);return this.reduce(l,"all",l.dtype).reshape(n)}any(t,e){r.Tb.assertAxesAreInnerMostDims("any",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),c=r.Hc.sizeFromShape(o),l=t.as2D(-1,c);return this.reduce(l,"any",l.dtype).reshape(n)}floorDiv(a,b){if(Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(a,b,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const t=new Pt("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",a.shape,b.shape);return this.compileAndRun(t,[a,b],"int32")}packedUnaryOp(t,e,n){const r=new kn(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(a,b,t,e,n=!1){const r=new Lt(t,a.shape,b.shape,n);return this.compileAndRun(r,[a,b],e)}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>Object(r.cc)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>Object(r.Gc)(t,e)),n=t.map(t=>t.shape),o=Object(r.cc)().getBool("WEBGL_PACK")?new pt(t[0].shape,n):new lt(t[0].shape,n);return this.compileAndRun(o,t,e)}pow(a,b){const t=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",a.shape,b.shape):new Pt("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",a.shape,b.shape),e=Object(r.Gc)(a.dtype,b.dtype);return this.compileAndRun(t,[a,b],e)}ceil(t){if(this.shouldExecuteOnCPU([t])){const e=Q(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,bn,t.dtype);const e=new un(t.shape,bn);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t])){const e=tt(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,gn,t.dtype);const e=new un(t.shape,gn);return this.compileAndRun(e,[t])}sign(t){const e=new un(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new un(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new un(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new un(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new un(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t])){const e=J(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,yn,t.dtype);const e=new un(t.shape,yn);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t])){const e=Z(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,On,t.dtype);const e=new un(t.shape,On);return this.compileAndRun(e,[t])}softmax(t,e){const n=r.Hc.parseAxisParam([e],t.shape),o=Object(r.lc)(t,n),c=r.Tb.expandShapeToKeepDim(o.shape,n),a=r.xc(t,o.reshape(c)),b=this.exp(a),l=this.sum(b,n).reshape(c);return Object(r.ac)(b,l)}log(t){if(this.shouldExecuteOnCPU([t])){const e=et(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new un(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new un(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new un(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t])){const e=ot(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}const e=new un(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new un(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=Object(r.cc)().getBool("WEBGL_PACK")?new kn(t.shape,jn):new un(t.shape,dn),this.compileAndRun(e,[t])}relu6(t){let e;return e=Object(r.cc)().getBool("WEBGL_PACK")?new kn(t.shape,wn):new un(t.shape,pn),this.compileAndRun(e,[t])}prelu(t,e){const n=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt(Bt,t.shape,e.shape):new Pt(Mt,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,In,t.dtype);const e=new un(t.shape,hn);return this.compileAndRun(e,[t])}eluDer(t,e){const n=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Pt("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new un(t.shape,fn);return this.compileAndRun(e,[t])}clip(t,e,n){let o;o=Object(r.cc)().getBool("WEBGL_PACK_CLIP")?new Vt(t.shape):new zt(t.shape);const c=o.getCustomSetupFunc(e,n);return this.compileAndRun(o,[t],null,c)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=X(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(Object(r.cc)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ln,t.dtype);const e=new un(t.shape,ln);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new Wt(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.real),this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new un(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new un(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new un(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new un(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new un(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new un(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new un(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new un(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new un(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new un(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new un(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new un(t.shape,xn);return this.compileAndRun(e,[t])}step(t,e){const n=new un(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,filter,e,n,o,c){const l=t.shape,d=this.texData.get(t.dataId),h=e.inChannels,f=l[0]*l[1]*l[2],m=e.outChannels,y="channelsLast"===e.dataFormat,O=(1===f||1===m)&&h>1e3,x=l[2]%2!=0&&!!d.isPacked;if(O||!Object(r.cc)().getBool("WEBGL_LAZILY_UNPACK")||!Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!x){const d=y?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],h=Object(r.qc)(t,[1,d,e.inChannels]),f=Object(r.qc)(filter,[1,e.inChannels,e.outChannels]),m=this.fusedBatchMatMul({a:h,b:f,transposeA:!1,transposeB:!1,bias:n,activation:o,preluActivationWeights:c});return Object(r.qc)(m,e.outShape)}const v=y?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),j={dataId:t.dataId,shape:[1,v,e.inChannels],dtype:t.dtype},w=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,r.Hc.assert(P(d.shape,j.shape),()=>`packed reshape ${d.shape} to ${j.shape} isn't free`);const I=Object(r.qc)(filter,[1,e.inChannels,e.outChannels]),k=this.fusedBatchMatMul({a:j,b:I,transposeA:!1,transposeB:!1,bias:n,activation:o,preluActivationWeights:c}),N=this.texData.get(k.dataId);return r.Hc.assert(N.isPacked,()=>"batchMatMul result is expected to be packed"),d.shape=w,N.shape=e.outShape,Object(r.bc)().makeTensorFromDataId(k.dataId,e.outShape,k.dtype)}conv2dWithIm2Row(t,filter,e,n,r,o){const{filterWidth:c,filterHeight:l,inChannels:d,outWidth:h,outHeight:f,dataFormat:m}=e,y="channelsLast"===m,O=c*l*d,x=f*h,v=[O,x],j=t.squeeze([0]),w=filter.reshape([1,O,-1]),I=new Te(v,j.shape,e),k=this.compileAndRun(I,[j]).reshape([1,v[0],v[1]]),N=null!=n,T=null!=o,C=r?An(r,!0):null,$=new Ae(k.shape,w.shape,[1,x,e.outChannels],!0,!1,N,C,T),S=[k,w];n&&S.push(n),T&&S.push(o);const E=this.compileAndRun($,S);return y?E.reshape([1,f,h,e.outChannels]):E.reshape([1,e.outChannels,f,h])}fusedConv2d({input:input,filter:filter,convInfo:t,bias:e,activation:n,preluActivationWeights:o}){if(1===t.filterHeight&&1===t.filterWidth&&1===t.dilationHeight&&1===t.dilationWidth&&1===t.strideHeight&&1===t.strideWidth&&("SAME"===t.padInfo.type||"VALID"===t.padInfo.type))return this.conv2dByMatMul(input,filter,t,e,n,o);if(Object(r.cc)().getBool("WEBGL_CONV_IM2COL")&&1===input.shape[0])return this.conv2dWithIm2Row(input,filter,t,e,n,o);const c=null!=e,l=null!=o,d=n?An(n,!1):null,h=new Yt(t,c,d,l),f=[input,filter];return e&&f.push(e),o&&f.push(o),this.compileAndRun(h,f)}conv2d(t,filter,e){if(1===e.filterHeight&&1===e.filterWidth&&1===e.dilationHeight&&1===e.dilationWidth&&1===e.strideHeight&&1===e.strideWidth&&("SAME"===e.padInfo.type||"VALID"===e.padInfo.type))return this.conv2dByMatMul(t,filter,e);if(Object(r.cc)().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,filter,e);const n=new Yt(e);return this.compileAndRun(n,[t,filter])}conv2dDerInput(t,filter,e){const n=new Ut(e);return this.compileAndRun(n,[t,filter])}conv2dDerFilter(t,e,n){const r=new Ht(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:input,filter:filter,convInfo:t,bias:e,activation:n,preluActivationWeights:o}){const c=Object(r.cc)().getBool("WEBGL_PACK_DEPTHWISECONV")&&t.strideWidth<=2&&t.outChannels/t.inChannels==1,l=n?An(n,c):null,d=[input,filter],h=null!=e,f=null!=o;let m;return h&&d.push(e),f&&d.push(o),c?(m=new Zt(t,h,l,f),this.compileAndRun(m,d)):(m=new Jt(t,h,l,f),this.compileAndRun(m,d))}depthwiseConv2D(t,filter,e){let n;return Object(r.cc)().getBool("WEBGL_PACK_DEPTHWISECONV")&&e.strideWidth<=2&&e.outChannels/e.inChannels==1?(n=new Zt(e),this.compileAndRun(n,[t,filter])):(n=new Jt(e),this.compileAndRun(n,[t,filter]))}depthwiseConv2DDerInput(t,filter,e){const n=new Xt(e);return this.compileAndRun(n,[t,filter])}depthwiseConv2DDerFilter(t,e,n){const r=new Kt(n);return this.compileAndRun(r,[t,e])}conv3d(t,filter,e){const n=new Qt(e);return this.compileAndRun(n,[t,filter])}conv3dDerInput(t,filter,e){const n=new qt(e);return this.compileAndRun(n,[t,filter])}conv3dDerFilter(t,e,n){const r=new Gt(n);return this.compileAndRun(r,[t,e])}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let o=0;for(let i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);const c=new Array(t.rank).fill(0),l=t.shape.slice();l[e]=1;const d=new Array(n);for(let i=0;i<d.length;i++)c[e]=i,d[i]=this.slice(t,c,l).reshape(r);return d}avgPool3d(t,e){const n=new Le(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new _t(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Le(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const o=new Le(r,"max",!0),c=this.compileAndRun(o,[e]),l=new Re(r),d=this.compileAndRun(l,[t,c],e.dtype);return c.dispose(),d}resizeBilinear(t,e,n,o){const c=Object(r.cc)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ue(t.shape,e,n,o):new He(t.shape,e,n,o);return this.compileAndRun(c,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new We(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const o=new qe(t.shape,e,n,r);return this.compileAndRun(o,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new Ge(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,o){const c=e?t:Object(r.vc)(t),l=c.shape[0],d=c.shape[1],h=new Fe(l,d,n),f=h.getCustomSetupFunc(o);return this.compileAndRun(h,[c],"int32",f)}oneHot(t,e,n,r){const o=new De(t.size,e,n,r);return this.compileAndRun(o,[t])}diag(t){const e=new ie(t.size);return this.compileAndRun(e,[t])}cropAndResize(image,t,e,n,r,o){const c=new te(image.shape,t.shape,n,r,o);return this.compileAndRun(c,[image,t,e],"float32")}depthToSpace(t,e,n){r.Hc.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const o=t.shape[0],c="NHWC"===n?t.shape[1]:t.shape[2],l="NHWC"===n?t.shape[2]:t.shape[3],d="NHWC"===n?t.shape[3]:t.shape[1],h=c*e,f=l*e,m=d/(e*e),y=new se("NHWC"===n?[o,h,f,m]:[o,m,h,f],e,n);return this.compileAndRun(y,[t])}split(t,e,n){return Cn(t,e,n)}scatterND(t,e,n){const{sliceRank:o,numUpdates:c,sliceSize:l,strides:d,outputSize:h}=r.Tb.calculateShapes(e,t,n),f=[h/l,l],m=t.reshape([c,o]),y=e.reshape([c,l]);if(0===h)return r.Tb.reshapeTensor(Object(r.zc)([]),n);const O=Object(r.rc)(0),x=new Ye(c,o,m.rank,y.rank,d,f);return this.compileAndRun(x,[y,m,O]).reshape(n)}sparseToDense(t,e,n,o){const{sliceRank:c,numUpdates:l,strides:d,outputSize:h}=r.Tb.calculateShapes(e,t,n),f=new Ye(l,c,t.rank,e.rank,d,[h,1],!1);return this.compileAndRun(f,[e,t,o]).reshape(n)}gatherND(t,e){const n=e.shape,o=n[n.length-1],[c,l,d,h]=r.Tb.prepareAndValidate(t,e),f=e.reshape([l,o]),m=t.reshape([t.size/d,d]),y=new fe(o,h,[l,d]);return this.compileAndRun(y,[m,f]).reshape(c)}fill(t,e,n){if("string"===(n=n||r.Hc.inferDtype(e))){const o=r.Hc.getArrayFromDType(n,r.Hc.sizeFromShape(t));return o.fill(e),Object(r.bc)().makeTensor(o,t,n,this)}{const r=new pe(t,e),o=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,o)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return r.Tb.linspaceImpl(t,e,n)}makeTensorInfo(t,e,n){const r=this.write(n,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:o}=this.makeTensorInfo(t,e,n);return Object(r.bc)().makeTensorFromDataId(o,t,e,this)}unpackTensor(input){const t=new Nn(input.shape);return this.runWebGLProgram(t,[input],input.dtype)}packTensor(input){const t=new _e(input.shape);return this.runWebGLProgram(t,[input],input.dtype,null,!0)}packedReshape(input,t){const e=[F(input.shape),...D(input.shape)],n={dtype:input.dtype,shape:e,dataId:input.dataId},r=[F(t),...D(t)],o=new Ve(r,e),output=this.runWebGLProgram(o,[n],input.dtype,null,!0);return{dataId:output.dataId,shape:t,dtype:output.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:o}=e,c=_(r);let l;l=n?new oe(c):new ae(c);return{dtype:o,shape:r,dataId:this.runWebGLProgram(l,[{shape:c,dtype:o,dataId:t}],o,null,!0).dataId}}runWebGLProgram(t,e,n,o,c=!1){const output=this.makeTensorInfo(t.outputShape,n),l=this.texData.get(output.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===d.DENSE){const e=y(t.outputShape);l.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(l.usage=t.outTexUsage),0===r.Hc.sizeFromShape(output.shape))return l.values=r.Hc.getTypedArrayFromDType(output.dtype,0),output;const h=[],f=e.map(input=>{if("complex64"===input.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let e=this.texData.get(input.dataId);if(null==e.texture){if(!t.packedInputs&&r.Hc.sizeFromShape(input.shape)<=Object(r.cc)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:input.shape,texData:null,isUniform:!0,uniformValues:e.values};t.packedInputs&&(e.isPacked=!0,e.shape=input.shape)}else if(!!e.isPacked!=!!t.packedInputs)input=e.isPacked?this.unpackTensor(input):this.packTensor(input),h.push(input),e=this.texData.get(input.dataId);else if(e.isPacked&&!P(e.shape,input.shape)){const t=input,n=input.shape;input.shape=e.shape,input=this.packedReshape(input,n),h.push(input),e=this.texData.get(input.dataId),t.shape=n}return this.uploadToGPU(input.dataId),{shape:input.shape,texData:e,isUniform:!1}});this.uploadToGPU(output.dataId);const m={shape:output.shape,texData:l,isUniform:!1},O=function(t,e,output){let n="";e.concat(output).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,r=t.isUniform?"uniform":t.texData.texShape;n+=`${t.shape}_${r}_${e}`});const r=t.userCode;let o=t.constructor.name;return o+="_"+n+"_"+r,o}(t,f,m),x=this.getAndSaveBinary(O,()=>function(t,e,n,output){const o=e.userCode,c=n.map((input,i)=>{const t={logicalShape:input.shape,texShape:input.isUniform?null:input.texData.texShape,isUniform:input.isUniform,isPacked:!input.isUniform&&input.texData.isPacked,flatOffset:null};return null!=input.texData&&null!=input.texData.slice&&input.texData.slice.flatOffset>0&&(t.flatOffset=input.texData.slice.flatOffset),{name:e.variableNames[i],shapeInfo:t}}),l=c.map(t=>t.shapeInfo),d={logicalShape:output.shape,texShape:output.texData.texShape,isUniform:!1,isPacked:output.texData.isPacked,flatOffset:null},source=vt(c,d,o,e.packedInputs),h=t.createProgram(source);let f=null;const m=t.getUniformLocation(h,"NAN",!1);1===Object(r.cc)().getNumber("WEBGL_VERSION")&&(f=t.getUniformLocation(h,"INFINITY",!1));const y={};for(let i=0;i<e.variableNames.length;i++){const n=e.variableNames[i],r=!1;y[n]=t.getUniformLocation(h,n,r),y["offset"+n]=t.getUniformLocation(h,"offset"+n,r)}return{program:e,source:source,webGLProgram:h,uniformLocations:y,inShapeInfos:l,outShapeInfo:d,infLoc:f,nanLoc:m}}(this.gpgpu,t,f,m)),v=null!=this.activeTimers;let j;if(v&&(j=this.startTimer()),function(t,e,n,output,o){Ne(e.inShapeInfos,n),Ne([e.outShapeInfo],[output]);const c=output.texData.texture,l=output.texData.texShape;output.texData.isPacked?t.setOutputPackedMatrixTexture(c,l[0],l[1]):t.setOutputMatrixTexture(c,l[0],l[1]),t.setProgram(e.webGLProgram),1===Object(r.cc)().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((input,i)=>{const n=e.program.variableNames[i],o=e.uniformLocations[n],c=e.uniformLocations["offset"+n];if(null!=o)if(input.isUniform)if(r.Hc.sizeFromShape(input.shape)<2)t.gl.uniform1f(o,input.uniformValues[0]);else{let e=input.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(o,e)}else null!=input.texData.slice&&null!=c&&t.gl.uniform1i(c,input.texData.slice.flatOffset),t.setInputMatrixTexture(input.texData.texture,o,i)}),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,x,f,m,o),h.forEach(t=>this.disposeIntermediateTensorInfo(t)),v&&(j=this.endTimer(j),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(j)})),!Object(r.cc)().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===c){const t=this.unpackTensor(output);return this.disposeIntermediateTensorInfo(output),t}return output}compileAndRun(t,e,n,o,c=!1){n=n||e[0].dtype;const l=this.runWebGLProgram(t,e,n,o,c);return Object(r.bc)().makeTensorFromDataId(l.dataId,l.shape,l.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(r.cc)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(r.Dc)(()=>{if(!Object(r.cc)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=Object(r.cc)().getBool("DEBUG");Object(r.cc)().set("DEBUG",!1);const e=this.abs(Object(r.rc)(1e-8)).dataSync()[0];if(Object(r.cc)().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:o,values:c,texture:l,usage:d,isPacked:f}=e;if(null!=l)return;const m=null!=this.activeTimers;let y;m&&(y=r.Hc.now());let x=e.texShape;if(null==x&&(x=function(t,e=!1){let n=Object(r.cc)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,i)=>i>=t.length-2?r.Hc.nearestLargerEven(t[i]):t[i])).length&&(t=[2,t[0]])),2!==t.length){const e=r.Hc.squeezeShape(t);t=e.newShape}let o=r.Hc.sizeFromShape(t);if(t.length<=1&&o<=n)return[1,o];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=F(t);let n=2,c=2;return t.length&&([n,c]=D(t)),o=e*(n/2)*(c/2),r.Hc.sizeToSquarishShape(o).map(t=>2*t)}return r.Hc.sizeToSquarishShape(o)}(n,f),e.texShape=x),null!=c){const t=_(n);let l,d=x[1],v=x[0];const j=c instanceof Uint8Array;f?([d,v]=O(x[0],x[1]),l=new de(t,[v,d],j)):l=new le(t,[v,d],j);const w=this.makeTensorInfo([v,d],o);this.texData.get(w.dataId).usage=j?h.PIXELS:h.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(w.dataId),d,v,c);const I=!0,k=this.runWebGLProgram(l,[w],o,null,I),N=this.texData.get(k.dataId);e.texture=N.texture,e.texShape=N.texShape,e.isPacked=N.isPacked,e.usage=N.usage,this.disposeIntermediateTensorInfo(w),this.texData.delete(k.dataId),e.values=null,m&&(this.uploadWaitMs+=r.Hc.now()-y)}else{const t=this.acquireTexture(x,d,o,f);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(a,t){if("float32"===t||"complex64"===t)return a;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(a.length):new Uint8Array(a.length);for(let i=0;i<e.length;++i)e[i]=Math.round(a[i]);return e}throw new Error("Unknown dtype "+t)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*r.Hc.bytesPerElement(e)}tryRunOnCpuOrThrow(t,e){if(this.shouldExecuteOnCPU(t))try{return e()}catch(t){if(Object(r.cc)().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}r.Zb.isBrowser()&&Object(r.oc)("webgl",()=>new Fn,2);function Dn(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const _n={kernelName:r.U,backendName:"webgl",kernelFunc:Dn};function Mn(t){const{inputs:e,backend:n}=t,{real:r,imag:o}=e,c=n.makeTensorInfo(r.shape,"complex64"),l=n.texData.get(c.dataId),d=Dn({inputs:{x:r},backend:n});n.texData.get(d.dataId).complexParentRefCount++;const h=Dn({inputs:{x:o},backend:n});return n.texData.get(h.dataId).complexParentRefCount++,l.complexTensorInfos={real:d,imag:h},c}const Pn={kernelName:r.p,backendName:"webgl",kernelFunc:Mn};function Bn(t){return({inputs:e,backend:n})=>{const{x:r}=e,o=n,c=new un(r.shape,t);return o.runWebGLProgram(c,[r],r.dtype)}}function Ln({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:o=!1,cpuKernelImpl:c,dtype:l}){return({inputs:d,backend:h})=>{const{a:a,b:b}=d,f=h;if(o&&"complex64"===a.dtype){const e=f.texData.get(a.dataId),n=f.texData.get(b.dataId),[o,c]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(e=>{const[n,o]=e,c={dataId:n.dataId,dtype:n.dtype,shape:a.shape},l={dataId:o.dataId,dtype:o.dtype,shape:b.shape},d=new Pt(t,a.shape,b.shape);return f.runWebGLProgram(d,[c,l],Object(r.Gc)(n.dtype,o.dtype))}),l=Mn({inputs:{real:o,imag:c},backend:f});return f.disposeIntermediateTensorInfo(o),f.disposeIntermediateTensorInfo(c),l}const m=l||Object(r.Gc)(a.dtype,b.dtype);if(f.shouldExecuteOnCPU([a,b])&&null!=c){const t=f.texData.get(a.dataId),e=f.texData.get(b.dataId),[n,r]=c(a.shape,b.shape,t.values,e.values,m),o=f.makeTensorInfo(r,m);return f.texData.get(o.dataId).values=n,o}let y;return y=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=e?new Lt(e,a.shape,b.shape,n):new Pt(t,a.shape,b.shape),f.runWebGLProgram(y,[a,b],m)}}const zn="return a + b;",Vn=Ln({opSnippet:zn,packedOpSnippet:zn,supportsComplex:!0,cpuKernelImpl:Y}),Wn={kernelName:r.d,backendName:"webgl",kernelFunc:Vn},Hn=Ln({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Un={kernelName:r.h,backendName:"webgl",kernelFunc:Hn};const Gn={kernelName:r.j,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:c}=e;U(c,"avgPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=o;r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(d,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`);const m=r.Tb.computePool2DInfo(c.shape,l,d,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&r.Hc.arraysEqual(m.inShape,m.outShape))return Dn({inputs:{x:c},backend:n});const y=new Be(m,"avg",!1);return n.runWebGLProgram(y,[c],"float32")}};const qn={kernelName:r.k,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:c,input:input}=e,l=input;U([c,input],"avgPoolBackprop");const{filterSize:d,strides:h,pad:f}=o,m=r.Tb.computePool2DInfo(l.shape,d,h,1,f),y=new Dt(m);return n.runWebGLProgram(y,[c],l.dtype)}};class Kn{constructor(t,e,n,o,c,l){this.outputShape=[],this.variableNames=["x","mean","variance"],r.Tb.assertAndGetBroadcastShape(t,e),r.Tb.assertAndGetBroadcastShape(t,n);let d="0.0";null!=o&&(r.Tb.assertAndGetBroadcastShape(t,o),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let h="1.0";null!=c&&(r.Tb.assertAndGetBroadcastShape(t,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${d};\n        float scale = ${h};\n        float inv = scale * inversesqrt(variance + float(${l}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Xn{constructor(t,e,n,o,c,l){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],r.Tb.assertAndGetBroadcastShape(t,e),r.Tb.assertAndGetBroadcastShape(t,n);let d="vec4(0.0)";null!=o&&(r.Tb.assertAndGetBroadcastShape(t,o),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let h="vec4(1.0)";null!=c&&(r.Tb.assertAndGetBroadcastShape(t,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${d};\n        vec4 scale = ${h};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${l}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Yn={kernelName:r.Q,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:o,mean:c,variance:l,offset:d,scale:h}=t;r.Hc.assert(c.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.Hc.assert(null==d||c.shape.length===d.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.Hc.assert(null==h||c.shape.length===h.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:f}=n;null==f&&(f=.001);const m=[o,c,l];let y=null;null!=d&&(y=d.shape,m.push(d));let O=null;null!=h&&(O=h.shape,m.push(h));const x=Object(r.cc)().getBool("WEBGL_PACK_NORMALIZATION")?new Xn(o.shape,c.shape,l.shape,y,O,f):new Kn(o.shape,c.shape,l.shape,y,O,f);return e.runWebGLProgram(x,m,m[0].dtype)}},Qn=Ln({opSnippet:"return float(a != b);",dtype:"bool"}),Jn={kernelName:r.nb,backendName:"webgl",kernelFunc:Qn};function Zn(t){const{inputs:e,backend:n}=t,{input:input}=e;return Dn({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.real},backend:n})}const er={kernelName:r.qb,backendName:"webgl",kernelFunc:Zn};const nr={kernelName:r.m,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:o,attrs:c}=e,{x:l}=n,{dtype:d}=c;if("complex64"===d){if("complex64"===l.dtype)return Dn({inputs:{x:l},backend:o});const e=r.Ic(l.shape),n=t({inputs:{x:l},backend:o,attrs:{dtype:"float32"}}),c=Mn({inputs:{real:n,imag:e},backend:o});return e.dispose(),o.disposeIntermediateTensorInfo(n),c}if("complex64"===l.dtype){const e=Zn({inputs:{input:l},backend:o}),n=t({inputs:{x:e},backend:o,attrs:{dtype:d}});return o.disposeIntermediateTensorInfo(e),n}if(!r.Hc.hasEncodingLoss(l.dtype,d)){const t=Dn({inputs:{x:l},backend:o});return{dataId:t.dataId,shape:t.shape,dtype:d}}if("int32"===d)return function(input,t){const e=new un(input.shape,"return float(int(x));"),output=t.runWebGLProgram(e,[input],"int32");return{dataId:output.dataId,shape:output.shape,dtype:output.dtype}}(l,o);if("bool"===d){const t=o.makeTensorInfo([],"bool",r.Hc.getTypedArrayFromDType("bool",1)),e=Qn({inputs:{a:l,b:t},backend:o});return o.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${l.dtype} to ${d}`)}};class rr{constructor(t){this.outputShape=[],this.outputShape=r.Tb.computeOutShape(t,1),this.variableNames=t.map((t,i)=>"T"+i);const e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){const t=e[i-1];n.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${t}));`)}const o=e.length,c=e[e.length-1];n.push(`else setOutput(getT${o}(yR, yC-${c}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class ar{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=r.Tb.computeOutShape(t,e);const n=this.outputShape,o=n.length,c=Et(o),l=mt("coords",o),d=["x","y","z","w","u","v"].slice(0,o);this.variableNames=t.map((t,i)=>"T"+i);const h=new Array(t.length-1);h[0]=t[0][e];for(let i=1;i<h.length;i++)h[i]=h[i-1]+t[i][e];const f=d[e],m=d.slice(-2),y=d.join();let O=`if (${f} < ${h[0]}) {\n        return getChannel(\n            getT0(${y}), vec2(${m.join()}));\n        }`;for(let i=1;i<h.length;i++){const t=h[i-1];O+=`\n        if (${f} < ${h[i]}  && ${f} >= ${h[i-1]}) {\n          return getChannel(\n            getT${i}(${or(d,f,t)}),\n            vec2(${or(m,f,t)}));\n        }`}const x=h.length,v=h[h.length-1];O+=`\n        return getChannel(\n          getT${x}(${or(d,f,v)}),\n          vec2(${or(m,f,v)}));`,this.userCode=`\n      float getValue(${d.map(t=>"int "+t)}) {\n        ${O}\n      }\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${l}), 0., 0., 0.);\n\n        ${l[o-1]} = ${l[o-1]} + 1;\n        if (${l[o-1]} < ${n[o-1]}) {\n          result.g = getValue(${l});\n        }\n\n        ${l[o-2]} = ${l[o-2]} + 1;\n        if (${l[o-2]} < ${n[o-2]}) {\n          result.a = getValue(${l});\n        }\n\n        ${l[o-1]} = ${l[o-1]} - 1;\n        if (${l[o-2]} < ${n[o-2]} &&\n            ${l[o-1]} < ${n[o-1]}) {\n          result.b = getValue(${l});\n        }\n        setOutput(result);\n      }\n    `}}function or(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}function sr(t){const{inputs:e,backend:n}=t,{input:input}=e;return Dn({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.imag},backend:n})}const ir={kernelName:r.V,backendName:"webgl",kernelFunc:sr};function cr(t){const{inputs:e,backend:n,attrs:o}=t,{x:c}=e,{shape:l}=o,d=n,h=r.Hc.sizeFromShape(c.shape),f=r.Hc.inferFromImplicitShape(l,h),m=r.Hc.sizeFromShape(f);r.Hc.assert(h===m,()=>`The new shape (${f}) has ${m} elements and the old shape (${c.shape}) has ${h} elements. The new shape and old shape must have the same number of elements.`);const y=d.texData.get(c.dataId);return!y.isPacked||P(c.shape,f)||null!==y.texture&&P(y.shape,f)?(d.incRef(c.dataId),{dataId:c.dataId,shape:f,dtype:c.dtype}):function(input,t,e){const n=[F(input.shape),...D(input.shape)],r={dtype:input.dtype,shape:n,dataId:input.dataId},o=[F(t),...D(t)],c=new Ve(o,n),output=e.runWebGLProgram(c,[r],input.dtype,null,!0);return{dataId:output.dataId,shape:t,dtype:output.dtype}}(c,f,d)}const ur={kernelName:r.ub,backendName:"webgl",kernelFunc:cr};const lr={kernelName:r.q,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{axis:c}=o,l=r.Hc.parseAxisParam(c,e[0].shape)[0],d=r.Tb.computeOutShape(e.map(t=>t.shape),l);if(0===r.Hc.sizeFromShape(d))return n.makeTensorInfo(d,e[0].dtype,[]);const h=e.filter(t=>r.Hc.sizeFromShape(t.shape)>0);if(1===h.length)return h[0];const f=h.map(t=>t.shape);return r.Tb.assertParamsConsistent(f,l),function t(e,n,o){const c=e[0].dtype;if("complex64"===c){const r=e.map(t=>Zn({inputs:{input:t},backend:o})),c=e.map(t=>sr({inputs:{input:t},backend:o})),l=t(r,n,o),d=t(c,n,o),h=Mn({inputs:{real:l,imag:d},backend:o});return r.forEach(t=>o.disposeIntermediateTensorInfo(t)),c.forEach(i=>o.disposeIntermediateTensorInfo(i)),o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(d),h}if(e.length>Object(r.cc)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),c=t(e.slice(0,r),n,o),l=t(e.slice(r),n,o),d=t([c,l],n,o);return o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(l),d}if(Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const t=new ar(e.map(t=>t.shape),n);return o.runWebGLProgram(t,e,c)}const l=r.Tb.computeOutShape(e.map(t=>t.shape),n),d=e.map(t=>cr({inputs:{x:t},attrs:{shape:[-1,r.Hc.sizeFromShape(t.shape.slice(n))]},backend:o})),h=new rr(d.map(t=>t.shape)),f=o.runWebGLProgram(h,d,c);d.forEach(t=>o.disposeIntermediateTensorInfo(t));const m=cr({inputs:{x:f},attrs:{shape:l},backend:o});return o.disposeIntermediateTensorInfo(f),m}(h,l,n)}},dr=Bn("if (isnan(x)) return x;\n  return cos(x);\n"),pr={kernelName:r.x,backendName:"webgl",kernelFunc:dr},div=Ln({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),fr={kernelName:r.G,backendName:"webgl",kernelFunc:div};class mr{constructor(component,t,e){this.variableNames=["real","imag"];const n=t[1];this.outputShape=t;const r=e?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,o=e?n+".0":"1.0";let c;if("real"===component)c="return real * expR - imag * expI;";else{if("imag"!==component)throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);c="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${c}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${n});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${n}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function gr(t,e,n){const o=n.texData.get(t.dataId),c=r.Hc.sizeFromShape(t.shape),l=t.shape[t.shape.length-1],d=cr({inputs:{x:t},backend:n,attrs:{shape:[c/l,l]}}).shape,h=new mr("real",d,e),f=new mr("imag",d,e),m=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:d},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:d}],y=n.runWebGLProgram(h,m,"float32"),O=n.runWebGLProgram(f,m,"float32"),x=Mn({inputs:{real:y,imag:O},backend:n});n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(O);const v=cr({inputs:{x:x},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(v),v}const yr={kernelName:r.L,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:input}=e;return gr(input,!1,n)}};class Or{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const xr={kernelName:r.N,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:image}=t,n=e,r=new Or(image.shape);return n.runWebGLProgram(r,[image],image.dtype)}};class vr{constructor(t){this.variableNames=["A"];const e=bt(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class jr{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=bt(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const wr={kernelName:r.P,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t;let{pixels:c}=e;const{numChannels:l}=o,d="undefined"!=typeof HTMLVideoElement&&c instanceof HTMLVideoElement,f="undefined"!=typeof HTMLImageElement&&c instanceof HTMLImageElement,[m,y]=d?[c.videoWidth,c.videoHeight]:[c.width,c.height],O=[y,m],x=[y,m,l];(f||d)&&(null==Ir&&(Ir=document.createElement("canvas").getContext("2d")),Ir.canvas.width=m,Ir.canvas.height=y,Ir.drawImage(c,0,0,m,y),c=Ir.canvas);const v=n.makeTensorInfo(O,"int32");n.texData.get(v.dataId).usage=h.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(v.dataId),c);const j=Object(r.cc)().getBool("WEBGL_PACK")?new jr(x):new vr(x),w=n.runWebGLProgram(j,[v],"int32");return n.disposeData(v.dataId),w}};let Ir;const kr={kernelName:r.T,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:input}=e;return gr(input,!0,n)}};class Nr{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:o,inSize:c,outSize:l}=t;this.outputShape=[o,l];const d=4*Math.floor(n/4),h=n%4;let f="sumValue += dot(values, ones);";if(null!=e){const t=1/e;f=`sumValue += dot(values * ${r.Hc.isInt(t)?t.toPrecision(2):t}, ones);`}let m="";c%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${c}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}function Tr(t,e,n,o){const c=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],o=r.Tb.computeOptimalWindowSize(n);e.push({inSize:n,windowSize:o,outSize:Math.ceil(n/o)})}return e}(t.shape);let l=t;for(let i=0;i<c.length;i++){const{inSize:r,windowSize:d,outSize:h}=c[i];let f,m;f="mean"===n?0===i?new Nr({windowSize:d,inSize:r,batchSize:t.shape[0],outSize:h},r):new Nr({windowSize:d,inSize:r,batchSize:t.shape[0],outSize:h}):new ze({windowSize:d,inSize:r,batchSize:t.shape[0],outSize:h},n),m=l,l=o.runWebGLProgram(f,[l],e),m.dataId!==t.dataId&&o.disposeIntermediateTensorInfo(m)}return l}class Cr{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let i=0;i<n.length;i++)n[i]=t[e[i]];this.outputShape=n,this.rank=n.length;const r=Et(this.rank),o=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let i=0;i<t.length;i++)r[t[i]]=n[i];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class $r{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let i=0;i<n.length;i++)n[i]=t[e[i]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Et(this.rank),o=ft("rc",this.rank),c=new Array(this.rank);for(let i=0;i<e.length;i++)c[e[i]]=o[i];const l=`vec2(${c.slice(-2).join()})`,d=`++${o[this.rank-1]} < ${n[this.rank-1]}`,h=`getChannel(getA(${c.join()}), ${l})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${h};\n      if(${d}) {\n        result[1] = ${h};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${h};\n        if(${d}) {\n          result[3] = ${h};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Sr(t,e,n){const o=Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $r(t.shape,e):new Cr(t.shape,e);return n.runWebGLProgram(o,[t],t.dtype)}const Er={kernelName:r.db,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:o}=t,{reductionIndices:c,keepDims:l}=e,d=n,h=o.shape.length,f=r.Hc.parseAxisParam(c,o.shape);let m=f;const y=r.Tb.getAxesPermutation(m,h),O=null!=y,x=d.shouldExecuteOnCPU([o]);let v=o;if(O){if(x){const t=d.texData.get(v.dataId).values,e=new Array(h);for(let i=0;i<e.length;i++)e[i]=o.shape[y[i]];const n=ct(t,o.shape,o.dtype,y,e);v=d.makeTensorInfo(e,o.dtype);d.texData.get(v.dataId).values=n}else v=Sr(o,y,d);m=r.Tb.getInnerMostAxes(m.length,h)}r.Tb.assertAxesAreInnerMostDims("max",m,h);const[j,w]=r.Tb.computeOutAndReduceShapes(v.shape,m);let I,k=j;if(l&&(k=r.Tb.expandShapeToKeepDim(j,f)),x){const t=d.texData.get(v.dataId).values,e=nt(t,r.Hc.sizeFromShape(w),k,o.dtype);I=d.makeTensorInfo(k,o.dtype);d.texData.get(I.dataId).values=e}else I=function(t,e,n,o){const c=r.Hc.sizeFromShape(e),l=cr({inputs:{x:t},attrs:{shape:[r.Hc.sizeFromShape(t.shape)/c,c]},backend:o}),d=Tr(l,t.dtype,"max",o),h=cr({inputs:{x:d},attrs:{shape:n},backend:o});return o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(d),h}(v,w,k,d);return O&&d.disposeIntermediateTensorInfo(v),I}};const Rr={kernelName:r.eb,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:c}=e;U(c,"maxPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=o;r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(d,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`);const m=r.Tb.computePool2DInfo(c.shape,l,d,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&r.Hc.arraysEqual(m.inShape,m.outShape))return Dn({inputs:{x:c},backend:n});const y=new Be(m,"max",!1);return n.runWebGLProgram(y,[c],c.dtype)}};const Ar={kernelName:r.fb,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:c,input:input,output:output}=e,l=input;U([input,output],"maxPoolBackprop");const{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=o,y=r.Tb.computePool2DInfo(l.shape,d,h,1,f,m),O=new Be(y,"max",!0),x=n.runWebGLProgram(O,[l],l.dtype),v=new Ee(y),j=n.runWebGLProgram(v,[c,x],l.dtype);return n.disposeIntermediateTensorInfo(x),j}};const Fr={kernelName:r.gb,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:o}=t,{filterSize:c,strides:l,pad:d,includeBatchInIndex:h}=e,f=n;r.Hc.assert(4===o.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);const m=[1,1];r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(l,m),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);const y=r.Tb.computePool2DInfo(o.shape,c,l,m,d),[O,x]=function(t,e,n,r){let o=new Be(n,"max",!1);const c=r.runWebGLProgram(o,[t],"float32");return o=new Be(n,"max",!0,!0,e),[c,r.runWebGLProgram(o,[t],"float32")]}(o,h,y,f);return[O,x]}};const Dr={kernelName:r.hb,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:o}=t,{keepDims:c,axis:l}=e,d=n,h=o.shape.length,f=r.Hc.parseAxisParam(l,o.shape);let m=f;const y=r.Tb.getAxesPermutation(m,h),O=null!=y,x=d.shouldExecuteOnCPU([o]),v=[];let j=o;if(O){if(x){const t=d.texData.get(j.dataId).values,e=new Array(h);for(let i=0;i<e.length;i++)e[i]=o.shape[y[i]];const n=ct(t,o.shape,o.dtype,y,e);j=d.makeTensorInfo(e,o.dtype);d.texData.get(j.dataId).values=n}else j=Sr(o,y,d);v.push(j),m=r.Tb.getInnerMostAxes(m.length,h)}r.Tb.assertAxesAreInnerMostDims("sum",m,h);const[w,I]=r.Tb.computeOutAndReduceShapes(j.shape,m);let k=w;c&&(k=r.Tb.expandShapeToKeepDim(w,f));const N=function(t,e,n,o){const c=r.Hc.sizeFromShape(e),l=cr({inputs:{x:t},attrs:{shape:[r.Hc.sizeFromShape(t.shape)/c,c]},backend:o}),d=Tr(l,"float32","mean",o),h=cr({inputs:{x:d},attrs:{shape:n},backend:o});return o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(d),h}(j,I,k,d);for(const i of v)d.disposeIntermediateTensorInfo(i);return N}};class _r{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((p,i)=>p[0]+t[i]+p[1]);const r=t.length,o=Et(r),c=e.map(p=>p[0]).join(","),l=e.map((p,i)=>p[0]+t[i]).join(","),d=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),h="reflect"===n?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${h};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${h};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${d}));\n      }\n    `:`\n        int start = ${c};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${h};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${h};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Mr{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((p,i)=>p[0]+t[i]+p[1]);const r=t.length,o=Et(r),c=e.map(p=>p[0]).join(","),l=e.map((p,i)=>p[0]+t[i]).join(","),d=mt("rc",r),source=mt("source",r),h=`${d[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m="reflect"===n?0:1;let y="";if(1===r){const t=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${m};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${m};\n        }\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${d[r-1]} += 1;\n        if(${h}) {\n          ${t}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n      `}else{const t=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${m}) +\n                gte * ((end - 1) * 2 - source + ${m});\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${d[r-1]} += 1;\n        if(${h}) {\n          ${t}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n        rc = outputLoc;\n        ${d[r-2]} += 1;\n        if(${d[r-2]} < ${this.outputShape[r-2]}) {\n          ${t}\n          result[2] = getChannel(getX(${source.join()}), ${f});\n          ${d[r-1]} += 1;\n          if(${h}) {\n            ${t}\n            result[3] = getChannel(getX(${source.join()}), ${f});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${y}\n        setOutput(result);\n      }\n    `}}const Pr={kernelName:r.ib,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:o}=t,{paddings:c,mode:l}=n,d=Object(r.cc)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Mr(o.shape,c,l):new _r(o.shape,c,l);return e.runWebGLProgram(d,[o],o.dtype)}},Br="return areal * breal - aimag * bimag;",Lr="return areal * bimag + aimag * breal;";class zr{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=r.Tb.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Vr="return a * b;";const Wr={kernelName:r.jb,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{a:a,b:b}=e,o=r.Tb.upcastType(a.dtype,b.dtype);if("complex64"===a.dtype){const t=n.texData.get(a.dataId),e=n.texData.get(b.dataId),r=new zr(Br,a.shape,b.shape),o=new zr(Lr,a.shape,b.shape),c=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:b.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:b.shape}],l=n.runWebGLProgram(r,c,"float32"),d=n.runWebGLProgram(o,c,"float32"),h=Mn({inputs:{real:l,imag:d},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}if(n.shouldExecuteOnCPU([a,b])){const t=n.texData.get(a.dataId),e=n.texData.get(b.dataId),[r,c]=at(a.shape,b.shape,t.values,e.values,o),l=n.makeTensorInfo(c,o);return n.texData.get(l.dataId).values=r,l}let c;return c=Object(r.cc)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lt(Vr,a.shape,b.shape):new Pt(Vr,a.shape,b.shape),n.runWebGLProgram(c,[a,b],o)}},Hr={kernelName:r.kb,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{r.Tb.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h}=n,f=e,m=f.readSync(o.dataId),y=f.readSync(c.dataId),O=l,x=d,v=h;return r.kc.nonMaxSuppressionV3Impl(m,y,O,x,v)}},Ur=r.kc.nonMaxSuppressionV4Impl,Gr={kernelName:r.lb,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{r.Tb.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,padToMaxOutputSize:f}=n,m=e,y=m.readSync(o.dataId),O=m.readSync(c.dataId),{selectedIndices:x,validOutputs:v}=Ur(y,O,l,d,h,f);return[x,v]}},qr=r.kc.nonMaxSuppressionV5Impl,Kr={kernelName:r.mb,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{r.Tb.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,softNmsSigma:f}=n,m=e,y=m.readSync(o.dataId),O=m.readSync(c.dataId),x=l,v=d,j=h,w=f,{selectedIndices:I,selectedScores:k}=qr(y,O,x,v,j,w);return[I,k]}};class Xr{constructor(t,e,n,o){this.variableNames=["Image"],this.outputShape=[];const c=t[1],l=t[2],d=Math.sin(e).toFixed(3),h=Math.cos(e).toFixed(3);this.outputShape=t;const[f,m]=r.Tb.getImageCenter(o,c,l),y=f.toFixed(3),O=m.toFixed(3);let x="";x="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${y}) * ${h} - (float(y) - ${O}) * ${d};\n          float coordYFloat = (float(x) - ${y}) * ${d} + (float(y) - ${O}) * ${h};\n          int coordX = int(round(coordXFloat + ${y}));\n          int coordY = int(round(coordYFloat + ${O}));\n          ${x}\n          if(coordX >= 0 && coordX < ${l} && coordY >= 0 && coordY < ${c}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Yr={kernelName:r.vb,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:image}=t,{radians:r,fillValue:o,center:c}=e,l=n,d=new Xr(image.shape,r,o,c);return l.runWebGLProgram(d,[image],image.dtype)}},Qr=Bn("if (isnan(x)) return x;\n  return sin(x);\n"),Jr={kernelName:r.Bb,backendName:"webgl",kernelFunc:Qr},Zr=Bn("return x * x;"),ta={kernelName:r.Hb,backendName:"webgl",kernelFunc:Zr},ea=Ln({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"}),na={kernelName:r.Ib,backendName:"webgl",kernelFunc:ea},ra="return a - b;",aa=Ln({opSnippet:ra,packedOpSnippet:ra,supportsComplex:!0,cpuKernelImpl:it}),oa={kernelName:r.Kb,backendName:"webgl",kernelFunc:aa},sa=Bn("return tan(x);");const ia=[Wn,Un,Gn,qn,Yn,nr,Pn,lr,pr,fr,yr,xr,wr,_n,kr,ir,Er,Rr,Ar,Fr,Dr,Pr,Wr,Hr,Gr,Kr,Jn,er,ur,Yr,Jr,ta,oa,na,{kernelName:r.Lb,backendName:"webgl",kernelFunc:sa},{kernelName:r.Pb,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:o}=e,c=n,l=r.shape.length,d=new Array(l);for(let i=0;i<d.length;i++)d[i]=r.shape[o[i]];let h;if(c.shouldExecuteOnCPU([r])){const t=c.texData.get(r.dataId).values,e=ct(t,r.shape,r.dtype,o,d);h=c.makeTensorInfo(d,r.dtype);c.texData.get(h.dataId).values=e}else h=Sr(r,o,c);return h}},{kernelName:r.Qb,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:o}=n,{x:c}=e;U(c,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const l=r.readSync(c.dataId),{outputValues:d,outputShape:h,indices:f}=ut(l,o,c.shape,c.dtype);return[r.makeTensorInfo(h,c.dtype,d),r.makeTensorInfo([f.length],"int32",f)]}}];for(const t of ia)Object(r.pc)(t)},function(t,e,n){"use strict";var r=n(177),o=n(412),c=n(188);const l=r.kc.nonMaxSuppressionV3Impl,d=r.kc.split,h=r.kc.tile,f=r.kc.topkImpl,m=r.kc.whereImpl;class y extends r.Z{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.z(this,Object(r.bc)())}write(t,e,n){this.firstUse&&(this.firstUse=!1,Object(r.cc)().get("IS_NODE")&&r.Tb.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const o={};return this.data.set(o,{values:t,dtype:n,refCount:1}),o}makeTensorInfo(t,e,n){let o;if("string"===e&&null!=n&&n.length>0&&r.Hc.isString(n[0])){const c=n.map(t=>r.Hc.encodeString(t));o=this.write(c,t,e)}else o=this.write(n,t,e);return{dataId:o,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){const t=this.readSync(n.real.dataId),e=this.readSync(n.imag.dataId);return r.Tb.mergeRealAndImagArrays(t,e)}return this.data.get(t).values}bufferSync(t){const data=this.readSync(t.dataId);let e=data;if("string"===t.dtype)try{e=data.map(t=>r.Hc.decodeString(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return r.Vb(t.shape,t.dtype,e)}makeOutput(t,e,n){const o=this.write(t,e,n);return Object(r.bc)().makeTensorFromDataId(o,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=r.Hc.now();t();return{kernelMs:r.Hc.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(t,e,n,o){Object(c.a)(t,"stridedSlice");const l=r.uc.computeOutShape(e,n,o);if(l.some(t=>0===t))return r.zc([],l);const d=r.Vb(l,t.dtype),h=this.bufferSync(t);for(let i=0;i<d.size;i++){const t=d.indexToLoc(i),n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*o[r]+e[r];d.set(h.get(...n),...t)}return d.toTensor()}diag(t){const e=this.readSync(t.dataId),n=r.Vb([t.size,t.size],t.dtype),o=n.values;for(let i=0;i<e.length;i++)o[i*t.size+i]=e[i];return n.toTensor()}unstack(t,e){const n=t.shape[e],o=new Array(t.rank-1);let c=0;for(let i=0;i<t.rank;i++)i!==e&&(o[c++]=t.shape[i]);const l=new Array(t.rank).fill(0),d=t.shape.slice();d[e]=1;const h=new Array(n);for(let i=0;i<h.length;i++)l[e]=i,h[i]=r.tc(t,l,d).reshape(o);return h}reverse(t,e){Object(c.a)(t,"reverse");const n=r.Vb(t.shape,t.dtype),o=this.bufferSync(t);for(let i=0;i<n.size;i++){const r=n.indexToLoc(i),c=r.slice();e.forEach(e=>c[e]=t.shape[e]-1-c[e]),n.set(o.get(...c),...r)}return n.toTensor()}neg(t){return Object(c.a)(t,"neg"),r.mc(r.rc(-1),t)}addN(t){Object(c.a)(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=r.Vb(t[0].shape,t[0].dtype),o=n.values;for(let i=0;i<t.length;i++){const t=e[i];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=r.Hc.parseAxisParam([e],t.shape),o=Object(r.lc)(t,n),c=r.Tb.expandShapeToKeepDim(o.shape,n),a=r.xc(t,o.reshape(c)),b=r.ec(a),l=this.sum(b,n).reshape(c);return r.ac(b,l)}pow(a,b){return Object(c.a)([a,b],"pow"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>Math.pow(t,e))}floorDiv(a,b){Object(c.a)([a,b],"floorDiv");return this.broadcastedBinaryOp(a,b,"int32",(a,b)=>Math.floor(a/b))}sum(t,e){Object(c.a)(t,"sum"),r.Tb.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=Object(r.Gc)(t.dtype,"int32"),d=r.Ic(n,l),h=r.Hc.sizeFromShape(o),f=this.readSync(d.dataId),m=this.readSync(t.dataId);for(let i=0;i<f.length;++i){const t=i*h;let e=0;for(let n=0;n<h;++n)e+=m[t+n];f[i]=e}return d}prod(t,e){Object(c.a)(t,"sum");const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=Object(r.Gc)(t.dtype,"int32"),d=r.Ic(n,l),h=r.Hc.sizeFromShape(o),f=this.readSync(d.dataId),m=this.readSync(t.dataId);for(let i=0;i<f.length;++i){const t=i*h;let e=1;for(let n=0;n<h;++n)e*=m[t+n];f[i]=e}return d}unsortedSegmentSum(t,e,n){Object(c.a)(t,"unsortedSegmentSum");const o=[],l=t.rank-e.rank;for(let i=0;i<l;++i)e=e.expandDims(i+1);for(let i=0;i<n;++i){const n=r.rc(i,"int32"),c=r.dc(n,e).asType("float32").mul(t).sum(0);o.push(c)}return r.wc(o)}argMin(t,e){Object(c.a)(t,"argMin");const n=[e];r.Tb.assertAxesAreInnerMostDims("argMin",n,t.rank);const[o,l]=r.Tb.computeOutAndReduceShapes(t.shape,n),d=r.Ic(o,"int32"),h=r.Hc.sizeFromShape(l),f=this.readSync(d.dataId),m=this.readSync(t.dataId);for(let i=0;i<f.length;++i){const t=i*h;let e=m[t],n=0;for(let r=0;r<h;++r){const o=m[t+r];o<e&&(e=o,n=r)}f[i]=n}return d}argMax(t,e){Object(c.a)(t,"argMax");const n=[e];r.Tb.assertAxesAreInnerMostDims("argMax",n,t.rank);const[o,l]=r.Tb.computeOutAndReduceShapes(t.shape,n),d=r.Ic(o,"int32"),h=r.Hc.sizeFromShape(l),f=this.readSync(d.dataId),m=this.readSync(t.dataId);for(let i=0;i<f.length;++i){const t=i*h;let e=m[t],n=0;for(let r=0;r<h;++r){const o=m[t+r];o>e&&(e=o,n=r)}f[i]=n}return d}cumsum(t,e,n,o){if(Object(c.a)(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const l=Object(r.Gc)(t.dtype,"int32"),d=r.Ic(t.shape,l),h=this.readSync(d.dataId),f=this.readSync(t.dataId),m=t.shape[t.rank-1],y=o?(i,t)=>i+m-t-1:(i,t)=>i+t;for(let i=0;i<f.length;i+=m)for(let t=0;t<m;t++){const e=y(i,t);if(0===t)h[e]=n?0:f[e];else{const r=y(i,t-1);h[e]=n?f[r]+h[r]:f[e]+h[r]}}return d}equal(a,b){return Object(c.a)([a,b],"equal"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t===e?1:0)}notEqual(a,b){return Object(c.a)([a,b],"notEqual"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t!==e?1:0)}less(a,b){return Object(c.a)([a,b],"less"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t<e?1:0)}lessEqual(a,b){return Object(c.a)([a,b],"lessEqual"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t<=e?1:0)}greater(a,b){return Object(c.a)([a,b],"greater"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t>e?1:0)}greaterEqual(a,b){return Object(c.a)([a,b],"greaterEqual"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t>=e?1:0)}logicalAnd(a,b){return Object(c.a)([a,b],"logicalAnd"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t&&e)}logicalOr(a,b){return Object(c.a)([a,b],"logicalOr"),this.broadcastedBinaryOp(a,b,"bool",(t,e)=>t||e)}select(t,a,b){Object(c.a)([t,a,b],"select");const e=this.readSync(t.dataId),n=this.readSync(a.dataId),o=this.readSync(b.dataId),l=r.Ic(a.shape,Object(r.Gc)(a.dtype,b.dtype)),d=this.readSync(l.dataId);let h=0;const f=0===t.rank||t.rank>1||1===a.rank?1:r.Hc.sizeFromShape(a.shape.slice(1));for(let i=0;i<e.length;i++)for(let t=0;t<f;t++)1===e[i]?d[h++]=n[i]:d[h++]=o[i];return l}where(t){Object(c.a)([t],"where");const e=this.readSync(t.dataId);return m(t.shape,e)}topk(t,e,n){Object(c.a)(t,"topk");const r=this.readSync(t.dataId);return f(r,t.shape,t.dtype,e,n)}min(t,e){Object(c.a)(t,"min"),r.Tb.assertAxesAreInnerMostDims("min",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=r.Ic(n,t.dtype),d=r.Hc.sizeFromShape(o),h=this.readSync(l.dataId),f=this.readSync(t.dataId);for(let i=0;i<h.length;++i){const t=i*d;let e=f[t];for(let n=0;n<d;++n){const r=f[t+n];r<e&&(e=r)}h[i]=e}return l}minimum(a,b){return Object(c.a)([a,b],"minimum"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>Math.min(t,e))}mod(a,b){return Object(c.a)([a,b],"mod"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(a,b){return Object(c.a)([a,b],"maximum"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>Math.max(t,e))}all(t,e){Object(c.a)(t,"all"),r.Tb.assertAxesAreInnerMostDims("all",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=r.Ic(n,t.dtype),d=r.Hc.sizeFromShape(o),h=this.readSync(l.dataId),f=this.readSync(t.dataId);for(let i=0;i<h.length;++i){const t=i*d;let e=f[t];for(let n=0;n<d;++n){const r=f[t+n];e=e&&r}h[i]=e}return l}any(t,e){Object(c.a)(t,"any"),r.Tb.assertAxesAreInnerMostDims("any",e,t.rank);const[n,o]=r.Tb.computeOutAndReduceShapes(t.shape,e),l=r.Ic(n,t.dtype),d=r.Hc.sizeFromShape(o),h=this.readSync(l.dataId),f=this.readSync(t.dataId);for(let i=0;i<h.length;++i){const t=i*d;let e=f[t];for(let n=0;n<d;++n){const r=f[t+n];e=e||r}h[i]=e}return l}squaredDifference(a,b){return Object(c.a)([a,b],"squaredDifference"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>{const n=t-e;return n*n})}eluDer(t,e){Object(c.a)([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId);for(let i=0;i<r.length;++i){const t=r[i];n[i]=t>=1?o[i]:o[i]*(t+1)}return this.makeOutput(n,e.shape,"float32")}atan2(a,b){return Object(c.a)([a,b],"atan2"),this.broadcastedBinaryOp(a,b,a.dtype,(t,e)=>Math.atan2(t,e))}tile(t,e){return Object(c.a)(t,"tile"),h(this.bufferSync(t),e)}gather(t,e,n){Object(c.a)([t,e],"gather");const o=t.shape.slice(),l=this.readSync(e.dataId);o[n]=l.length;const d=r.Vb(o,t.dtype),h=this.bufferSync(t);for(let i=0;i<d.size;++i){const t=d.indexToLoc(i),e=t.slice();e[n]=l[t[n]];const r=h.locToIndex(e);d.values[i]=h.values[r]}return d.toTensor()}batchToSpaceND(t,e,n){Object(c.a)([t],"batchToSpaceND");const o=e.reduce((a,b)=>a*b),l=r.Tb.getReshaped(t.shape,e,o),d=r.Tb.getPermuted(l.length,e.length),h=r.Tb.getReshapedPermuted(t.shape,e,o),f=r.Tb.getSliceBeginCoords(n,e.length),m=r.Tb.getSliceSize(h,n,e.length);return r.Ec(t.reshape(l),d).reshape(h).slice(f,m)}pool3d(t,e,n){Object(c.a)(t,"pool3d");const o=e.strideDepth,l=e.strideHeight,d=e.strideWidth,h=e.dilationDepth,f=e.dilationHeight,m=e.dilationWidth,y=e.effectiveFilterDepth,O=e.effectiveFilterHeight,x=e.effectiveFilterWidth,v=e.padInfo.front,j=e.padInfo.top,w=e.padInfo.left,I="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,k=this.readSync(t.dataId),output=r.Vb(e.outShape,t.dtype),N=output.values,T=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],C=e.outShape[2]*e.outShape[3]*e.outShape[4],$=e.outShape[3]*e.outShape[4],S=e.outShape[4];for(let r=0;r<e.batchSize;++r){const c=r*T,E=r*t.strides[0];for(let r=0;r<e.inChannels;++r)for(let T=0;T<e.outDepth;++T){const R=T*o-v;let A=R;for(;A<0;)A+=h;const F=Math.min(e.inDepth,y+R),D=c+T*C;for(let o=0;o<e.outHeight;++o){const c=o*l-j;let y=c;for(;y<0;)y+=f;const v=Math.min(e.inHeight,O+c),T=D+o*$;for(let o=0;o<e.outWidth;++o){const c=o*d-w;let l=c;for(;l<0;)l+=m;const O=Math.min(e.inWidth,x+c),j=T+o*S;let C=I,$=0,R=0;for(let e=A;e<F;e+=h){const o=E+e*t.strides[1];for(let e=y;e<v;e+=f){const c=o+e*t.strides[2];for(let e=l;e<O;e+=m){const o=k[c+e*t.strides[3]+r];if("max"===n&&o>C?C=o:"avg"===n&&($+=o,R++),isNaN(C))break}if(isNaN(C))break}if(isNaN(C))break}N[j+r]="avg"===n?$/R:C}}}}return output.toTensor()}avgPool3d(t,e){return Object(c.a)(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Object(c.a)([t,e],"avgPool3dBackprop");const o=n.strideDepth,l=n.strideHeight,d=n.strideWidth,h=n.filterDepth,f=n.filterHeight,m=n.filterWidth,y=n.dilationDepth,O=n.dilationHeight,x=n.dilationWidth,v=n.effectiveFilterDepth,j=n.effectiveFilterHeight,w=n.effectiveFilterWidth,I=v-1-n.padInfo.front,k=w-1-n.padInfo.left,N=j-1-n.padInfo.top,T=r.Vb(e.shape,"float32"),C=1/(h*f*m),$=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let r=0;r<n.inDepth;++r)for(let c=0;c<n.inHeight;++c)for(let h=0;h<n.inWidth;++h){const f=r-I,m=c-N,S=h-k;let E=0;for(let r=0;r<v;r+=y){const c=(f+r)/o;if(!(c<0||c>=n.outDepth||Math.floor(c)!==c))for(let r=0;r<j;r+=O){const o=(m+r)/l;if(!(o<0||o>=n.outHeight||Math.floor(o)!==o))for(let r=0;r<w;r+=x){const l=(S+r)/d;if(l<0||l>=n.outWidth||Math.floor(l)!==l)continue;E+=$.get(t,c,o,l,e)}}}T.set(E*C,t,r,c,h,e)}return T.toTensor()}maxPool3d(t,e){return Object(c.a)(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=r.Vb(e.outShape,"int32"),o=e.strideDepth,c=e.strideHeight,l=e.strideWidth,d=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,m=e.effectiveFilterDepth,y=e.effectiveFilterHeight,O=e.effectiveFilterWidth,x=e.padInfo.front,v=e.padInfo.top,j=e.padInfo.left,w=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let r=0;r<e.inChannels;++r)for(let I=0;I<e.outDepth;++I){const k=I*o-x;let N=k;for(;N<0;)N+=d;const T=Math.min(e.inDepth,m+k);for(let o=0;o<e.outHeight;++o){const m=o*c-v;let x=m;for(;x<0;)x+=h;const C=Math.min(e.inHeight,y+m);for(let c=0;c<e.outWidth;++c){const v=c*l-j;let $=v;for(;$<0;)$+=f;const S=Math.min(e.inWidth,O+v);let E=Number.NEGATIVE_INFINITY,R=-1;for(let e=N;e<T;e+=d){const n=e-k;for(let o=x;o<C;o+=h){const c=o-m;for(let l=$;l<S;l+=f){const d=l-v,h=w.get(t,e,o,l,r);h>=E&&(E=h,R=n*y*O+c*y+d)}}}n.set(R,t,I,o,c,r)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,o){Object(c.a)([e,n],"maxPool3dBackprop");const l=this.maxPool3dPositions(e,o),d=o.strideDepth,h=o.strideHeight,f=o.strideWidth,m=o.dilationDepth,y=o.dilationHeight,O=o.dilationWidth,x=o.effectiveFilterDepth,v=o.effectiveFilterHeight,j=o.effectiveFilterWidth,w=x-1-o.padInfo.front,I=j-1-o.padInfo.left,k=v-1-o.padInfo.top,N=r.Vb(e.shape,"float32"),T=this.bufferSync(l),C=this.bufferSync(t);for(let t=0;t<o.batchSize;++t)for(let e=0;e<o.inChannels;++e)for(let n=0;n<o.inDepth;++n)for(let r=0;r<o.inHeight;++r)for(let c=0;c<o.inWidth;++c){const l=n-w,$=r-k,S=c-I;let E=0;for(let n=0;n<x;n+=m){const r=(l+n)/d;if(!(r<0||r>=o.outDepth||Math.floor(r)!==r))for(let c=0;c<v;c+=y){const l=($+c)/h;if(!(l<0||l>=o.outHeight||Math.floor(l)!==l))for(let d=0;d<j;d+=O){const h=(S+d)/f;if(h<0||h>=o.outWidth||Math.floor(h)!==h)continue;const mask=x*v*j-1-T.get(t,r,l,h,e)===n*v*j+c*j+d?1:0;if(0===mask)continue;E+=C.get(t,r,l,h,e)*mask}}}N.set(E,t,n,r,c,e)}return N.toTensor()}resizeBilinear(t,e,n,o){Object(c.a)(t,"resizeBilinear");const[l,d,h,f]=t.shape,m=this.readSync(t.dataId),y=new Float32Array(r.Hc.sizeFromShape([l,e,n,f])),O=[o&&e>1?d-1:d,o&&n>1?h-1:h],x=[o&&e>1?e-1:e,o&&n>1?n-1:n];let v=0;const j=O[0]/x[0],w=O[1]/x[1];for(let b=0;b<l;b++)for(let r=0;r<e;r++){const e=j*r,o=Math.floor(e),c=e-o,l=Math.min(d-1,Math.ceil(e)),O=b*t.strides[0]+o*t.strides[1],x=b*t.strides[0]+l*t.strides[1];for(let e=0;e<n;e++){const n=w*e,r=Math.floor(n),o=n-r,l=Math.min(h-1,Math.ceil(n)),d=O+r*t.strides[2],j=x+r*t.strides[2],I=O+l*t.strides[2],k=x+l*t.strides[2];for(let t=0;t<f;t++){const e=m[d+t],n=m[j+t],r=e+(m[I+t]-e)*o,l=r+(n+(m[k+t]-n)*o-r)*c;y[v++]=l}}}return r.zc(y,[l,e,n,f])}resizeBilinearBackprop(t,e,n){Object(c.a)([t,e],"resizeBilinearBackprop");const[o,l,d,h]=e.shape,[,f,m]=t.shape,output=new Float32Array(o*l*d*h),y=[n&&f>1?l-1:l,n&&m>1?d-1:d],O=[n&&f>1?f-1:f,n&&m>1?m-1:m],x=y[0]/O[0],v=y[1]/O[1],j=this.readSync(t.dataId);let w=0;for(let b=0;b<o;b++){const t=b*e.strides[0];for(let n=0;n<f;n++){const r=n*x,o=Math.floor(r),c=Math.min(Math.ceil(r),l-1),f=t+o*e.strides[1],y=t+c*e.strides[1],O=r-o,I=1-O;for(let t=0;t<m;t++){const n=t*v,r=Math.floor(n),o=Math.min(Math.ceil(n),d-1),c=n-r,l=1-c,m=f+r*e.strides[2],x=f+o*e.strides[2],k=y+r*e.strides[2],N=y+o*e.strides[2],T=I*l,C=I*c,$=O*l,S=O*c;for(let t=0;t<h;t++){const e=j[w++];output[m+t]+=e*T,output[x+t]+=e*C,output[k+t]+=e*$,output[N+t]+=e*S}}}}return r.Cc(output,[o,d,l,h],e.dtype)}resizeNearestNeighbor(t,e,n,o){Object(c.a)(t,"resizeNearestNeighbor");const[l,d,h,f]=t.shape,m=this.readSync(t.dataId),output=new Float32Array(l*e*n*f),y=[o&&e>1?d-1:d,o&&n>1?h-1:h],O=[o&&e>1?e-1:e,o&&n>1?n-1:n],x=y[0]/O[0],v=y[1]/O[1];let j=0;for(let b=0;b<l;b++){const r=b*t.strides[0];for(let c=0;c<e;c++){const e=x*c,l=r+Math.min(d-1,o?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=v*e,r=l+Math.min(h-1,o?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<f;t++){const e=m[r+t];output[j++]=e}}}}return r.zc(output,[l,e,n,f],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Object(c.a)([t,e],"resizeNearestNeighborBackprop");const[o,l,d,h]=e.shape,[,f,m]=t.shape,output=new Float32Array(o*l*d*h),y=this.readSync(t.dataId),O=[n&&f>1?l-1:l,n&&m>1?d-1:d],x=[n&&f>1?f-1:f,n&&m>1?m-1:m],v=O[0]/x[0],j=O[1]/x[1],w=1/v,I=1/j,k=2*Math.ceil(w)+2,N=2*Math.ceil(I)+2;for(let b=0;b<o;b++){const r=b*e.strides[0];for(let o=0;o<l;o++){const c=r+o*e.strides[1],O=Math.floor(o*w),x=Math.floor(O-k/2);for(let O=0;O<d;O++){const w=c+O*e.strides[2],T=Math.floor(O*I),C=Math.floor(T-N/2);for(let e=0;e<h;e++){let c=0;for(let h=0;h<k;h++){const w=h+x;if(w<0||w>=f)continue;const I=r+w*t.strides[1],k=w*v;if(o===Math.min(l-1,n?Math.round(k):Math.floor(k)))for(let r=0;r<N;r++){const o=r+C;if(o<0||o>=m)continue;const l=I+o*t.strides[2],h=o*j;O===Math.min(d-1,n?Math.round(h):Math.floor(h))&&(c+=y[l+e])}}output[w+e]=c}}}}return r.Cc(output,e.shape,e.dtype)}localResponseNormalization4D(t,e,n,o,l){Object(c.a)(t,"localResponseNormalization4D");const d=t.shape[3],h=d-1,f=this.readSync(t.dataId),m=t.size,y=new Float32Array(m);function O(t){const n=t%d;let r=t-n+Math.max(0,n-e);const o=t-n+Math.min(n+e,h);let c=0;for(;r<=o;r++){const t=f[r];c+=t*t}return c}for(let t=0;t<m;t++){const e=O(t),r=f[t]*Math.pow(n+o*e,-l);y[t]=r}return r.Cc(y,t.shape)}LRNGrad(t,e,n,o,l,d,h){Object(c.a)(t,"LRNGrad");const f=t.shape[3],m=this.readSync(t.dataId),y=this.readSync(e.dataId),O=this.readSync(n.dataId),x=new Float32Array(t.size),v=t.size;for(let t=0;t<v;t++){const e=t%f,n=t-e+Math.max(0,e-o),r=t-e+Math.min(f,e+o+1);let c=0;for(let t=n;t<r;t++)c+=Math.pow(y[t],2);c=d*c+l;for(let e=n;e<r;e++){let n=-2*d*h*y[e]*O[t]/c;t===e&&(n+=Math.pow(c,-h)),n*=m[t],x[e]+=n}}return r.Cc(x,t.shape)}multinomial(t,e,n,l){Object(c.a)(t,"multinomial");const d=e?t:r.vc(t),h=d.shape[0],f=d.shape[1],m=r.Ic([h,n],"int32"),y=this.readSync(m.dataId),O=this.readSync(d.dataId);for(let b=0;b<h;++b){const t=b*f,e=new Float32Array(f-1);e[0]=O[t];for(let n=1;n<e.length;++n)e[n]=e[n-1]+O[t+n];const r=o.alea(l.toString()),c=b*n;for(let t=0;t<n;++t){const n=r();y[c+t]=e.length;for(let r=0;r<e.length;r++)if(n<e[r]){y[c+t]=r;break}}}return m}oneHot(t,e,n,o){Object(c.a)(t,"oneHot");const l=new Float32Array(t.size*e);l.fill(o);const d=this.readSync(t.dataId);for(let r=0;r<t.size;++r)d[r]>=0&&d[r]<e&&(l[r*e+d[r]]=n);return r.Bc(l,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,o){Object(c.a)(t,"nonMaxSuppression");const d=this.readSync(t.dataId),h=this.readSync(e.dataId);return l(d,h,n,r,o)}depthToSpace(t,e,n){r.Hc.assert("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),r.Hc.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const o=t.shape[0],c=t.shape[1],l=t.shape[2],d=t.shape[3],h=c*e,f=l*e,m=d/(e*e),y=this.readSync(t.dataId),O=new Float32Array(o*h*f*m);let x=0;for(let b=0;b<o;++b)for(let t=0;t<h;++t){const n=Math.floor(t/e),r=t%e;for(let t=0;t<f;++t){const o=Math.floor(t/e),h=(r*e+t%e)*m;for(let t=0;t<m;++t){const e=t+h+d*(o+l*(n+c*b));O[x++]=y[e]}}}return r.Cc(O,[o,h,f,m])}broadcastedBinaryOp(a,b,t,e){const n=r.Tb.assertAndGetBroadcastShape(a.shape,b.shape),o=r.Vb(n,t),c=this.readSync(a.dataId),l=this.readSync(b.dataId),d=r.Tb.getBroadcastDims(a.shape,n),h=r.Tb.getBroadcastDims(b.shape,n),f=o.values;if(d.length+h.length===0)for(let i=0;i<f.length;++i)f[i]=e(c[i%c.length],l[i%l.length]);else{const t=this.bufferSync(a),n=this.bufferSync(b);for(let i=0;i<f.length;++i){const r=o.indexToLoc(i),m=r.slice(-a.rank);d.forEach(t=>m[t]=0);const y=t.locToIndex(m),O=r.slice(-b.rank);h.forEach(t=>O[t]=0);const x=n.locToIndex(O);f[i]=e(c[y],l[x])}}return o.toTensor()}split(t,e,n){return d(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,o,c,l){const[d,h,f,m]=t.shape,y=e.shape[0],[O,x]=o,output=r.Vb([y,O,x,m],"float32"),v=this.readSync(e.dataId),j=this.readSync(n.dataId),w=this.readSync(t.dataId),I=t.strides,k=output.strides;for(let b=0;b<y;b++){const t=4*b,e=v[t],n=v[t+1],r=v[t+2],o=v[t+3],y=j[b];if(y>=d)continue;const N=O>1?(r-e)*(h-1)/(O-1):0,T=x>1?(o-n)*(f-1)/(x-1):0;for(let t=0;t<O;t++){const d=O>1?e*(h-1)+t*N:.5*(e+r)*(h-1);if(d<0||d>h-1)for(let e=0;e<x;e++)for(let n=0;n<m;n++){const r=n+e*k[2]+t*k[1]+b*k[0];output.values[r]=l}else if("bilinear"===c){const e=Math.floor(d),r=Math.ceil(d),c=d-e;for(let d=0;d<x;d++){const h=x>1?n*(f-1)+d*T:.5*(n+o)*(f-1);if(h<0||h>f-1){for(let e=0;e<m;e++){const n=e+d*k[2]+t*k[1]+b*k[0];output.values[n]=l}continue}const O=Math.floor(h),v=Math.ceil(h),j=h-O;for(let n=0;n<m;n++){let o=n+O*I[2]+e*I[1]+y*I[0];const l=w[o];o=n+v*I[2]+e*I[1]+y*I[0];const h=w[o];o=n+O*I[2]+r*I[1]+y*I[0];const f=w[o];o=n+v*I[2]+r*I[1]+y*I[0];const m=l+(h-l)*j,x=f+(w[o]-f)*j;o=n+d*k[2]+t*k[1]+b*k[0],output.values[o]=m+(x-m)*c}}}else for(let e=0;e<x;++e){const r=x>1?n*(f-1)+e*T:.5*(n+o)*(f-1);if(r<0||r>f-1){for(let n=0;n<m;n++){const r=n+e*k[2]+t*k[1]+b*k[0];output.values[r]=l}continue}const c=Math.round(r),h=Math.round(d);for(let n=0;n<m;n++){const r=n+c*I[2]+h*I[1]+y*I[0],o=n+e*k[2]+t*k[1]+b*k[0];output.values[o]=w[r]}}}}return output.toTensor()}sparseToDense(t,e,n,o){const{sliceRank:c,numUpdates:l,sliceSize:d,strides:h,outputSize:f}=r.Tb.calculateShapes(e,t,n);return this.scatter(t,e,n,f,d,l,c,h,o,!1)}gatherND(t,e){const n=e.shape,o=n[n.length-1],[c,l,d,h]=r.Tb.prepareAndValidate(t,e);if(0===l)return r.zc([],c,t.dtype);const f=new r.Ob([l,d],t.dtype),m=this.readSync(e.dataId),y=this.readSync(t.dataId);for(let i=0;i<l;i++){const e=[];let n=0;for(let t=0;t<o;t++){const r=m[i*o+t];n+=r*h[t],e.push(r)}if(n<0||n>=t.size/d)throw new Error(`Invalid indices: ${e} does not index into ${t.shape}`);for(let t=0;t<d;t++)f.values[i*d+t]=y[n*d+t]}return f.toTensor().reshape(c)}scatterND(t,e,n){const{sliceRank:o,numUpdates:c,sliceSize:l,strides:d,outputSize:h}=r.Tb.calculateShapes(e,t,n),f=r.rc(0);return this.scatter(t,e,n,h,l,c,o,d,f,!0)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return r.fc(t.shape,1,t.dtype)}zerosLike(t){const e=r.Hc.getArrayFromDType(t.dtype,r.Hc.sizeFromShape(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return r.Tb.linspaceImpl(t,e,n)}scatter(t,e,n,o,c,l,d,h,f,m){const y=[o/c,c],O=this.readSync(t.dataId),x=this.readSync(e.dataId);if(0===o)return r.zc([],n,e.dtype);const v=new r.Ob(y,e.dtype);v.values.fill(this.readSync(f.dataId)[0]);for(let i=0;i<l;i++){const t=[];let r=0;for(let e=0;e<d;e++){const n=O[i*d+e];t.push(n),r+=n*h[e]}if(r<0||r>=o/c)throw new Error(`Invalid indices: ${t} does not index into ${n}`);for(let t=0;t<c;t++)m?v.values[r*c+t]+=x[i*c+t]:v.values[r*c+t]=0===e.rank?x[0]:x[i*c+t]}return v.toTensor().reshape(n)}}Object(r.oc)("cpu",()=>new y,1);var O=n(187);const x=Object(O.a)(r.H,t=>t>=0?t:Math.exp(t)-1),v={kernelName:r.H,backendName:"cpu",kernelFunc:x};var j=n(250),w=n(222);const I=Object(w.a)((t,e)=>t<0?e*t:t);function k(t){const{inputs:e,backend:n}=t,{x:r,alpha:o}=e;Object(c.a)([r,o],"prelu");const l=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,[h,f]=I(r.shape,o.shape,l,d,r.dtype);return n.makeTensorInfo(f,r.dtype,h)}const N={kernelName:r.pb,backendName:"cpu",kernelFunc:k},T=Object(O.a)(r.sb,t=>Math.max(0,t)),C={kernelName:r.sb,backendName:"cpu",kernelFunc:T},$=Object(O.a)(r.tb,t=>Math.min(Math.max(0,t),6)),S={kernelName:r.tb,backendName:"cpu",kernelFunc:$};function E(t,e,n,r){if("linear"===n)return Object(j.a)({inputs:{x:e},backend:t});if("relu"===n)return T({inputs:{x:e},backend:t});if("elu"===n)return x({inputs:{x:e},backend:t});if("relu6"===n)return $({inputs:{x:e},backend:t});if("prelu"===n)return k({inputs:{x:e,alpha:r},backend:t});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var R=n(231);function A(t){const{inputs:e,backend:n,attrs:o}=t,{x:c}=e,{shape:l}=o,d=r.Hc.sizeFromShape(c.shape),h=r.Hc.inferFromImplicitShape(l,d),f=r.Hc.sizeFromShape(h);r.Hc.assert(d===f,()=>`The new shape (${h}) has ${f} elements and the old shape (${c.shape}) has ${d} elements. The new shape and old shape must have the same number of elements.`),n.incRef(c.dataId);const m=n.data.get(c.dataId);if(null!=m.complexTensorInfos){const t=m.complexTensorInfos.real,e=m.complexTensorInfos.imag;t.shape=h,e.shape=h}return{dataId:c.dataId,shape:h,dtype:c.dtype}}const F={kernelName:r.ub,backendName:"cpu",kernelFunc:A};function D(t){const{inputs:e,backend:n,attrs:o}=t,{a:a,b:b}=e,{transposeA:l,transposeB:d}=o;Object(c.a)([a,b],"matMul");const h=a.shape.length,f=b.shape.length,m=l?a.shape[h-2]:a.shape[h-1],y=d?b.shape[f-1]:b.shape[f-2],O=l?a.shape[h-1]:a.shape[h-2],x=d?b.shape[f-2]:b.shape[f-1],v=a.shape.slice(0,-2),j=b.shape.slice(0,-2),w=r.Hc.sizeFromShape(v),I=r.Hc.sizeFromShape(j),k=w===I||1===w||1===I;r.Hc.assert(h>=2&&f>=2&&k,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${v}) and (${j}).`);const N=(w>I?a.shape.slice(0,-2):b.shape.slice(0,-2)).concat([O,x]);r.Hc.assert(m===y,()=>`Error in matMul: inner shapes (${m}) and (${y}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${l} and transposeB=${d} must match.`);const T=d?[I,x,y]:[I,y,x],C=A({inputs:{x:a},backend:n,attrs:{shape:l?[w,m,O]:[w,O,m]}}),$=A({inputs:{x:b},backend:n,attrs:{shape:T}}),S=l?C.shape[1]:C.shape[2],E=l?C.shape[2]:C.shape[1],R=d?$.shape[1]:$.shape[2],F=Math.max(w,I),D=n.data.get(C.dataId).values,_=n.data.get($.dataId).values,M=r.Hc.computeStrides(C.shape),P=r.Hc.computeStrides($.shape),[B,L,z]=l?[M[0],1,M[1]]:[M[0],M[1],1],[V,W,H]=d?[1,P[1],P[0]]:[P[1],1,P[0]],U=E*R,G=Object(r.Vb)([F,E,R],C.dtype),K=G.values,X=n.blockSize;for(let t=0;t<F;t++)for(let e=0;e<E;e+=X)for(let n=0;n<R;n+=X)for(let r=0;r<S;r+=X){const o=Math.min(e+X,E),c=Math.min(n+X,R),l=Math.min(r+X,S);for(let i=e;i<o;i++)for(let e=n;e<c;e++){let n=0;for(let o=r;o<l;o++){const r=Math.min(t,w-1)*B,c=Math.min(t,I-1)*H;n+=D[r+i*L+o*z]*_[o*V+e*W+c]}K[t*U+(i*R+e)]+=n}}return n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo($),n.makeTensorInfo(N,G.dtype,G.values)}const _={kernelName:r.l,backendName:"cpu",kernelFunc:D};const M={kernelName:r.Rb,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:a,b:b,bias:o,preluActivationWeights:c}=e,{transposeA:l,transposeB:d,activation:h}=r;let f,m,y;const O=[];f=D({inputs:{a:a,b:b},attrs:{transposeA:l,transposeB:d},backend:n}),o&&(m=Object(R.a)({inputs:{a:f,b:o},backend:n}),O.push(f),f=m),h&&(y=E(n,f,h,c),O.push(f),f=y);for(const i of O)n.disposeIntermediateTensorInfo(i);return f}};var P=n(345);const B=Object(O.a)(r.b,t=>Math.acos(t)),L={kernelName:r.b,backendName:"cpu",kernelFunc:B},z=Object(O.a)(r.c,t=>Math.acosh(t)),V={kernelName:r.c,backendName:"cpu",kernelFunc:z},W=Object(O.a)(r.e,t=>Math.asin(t)),H={kernelName:r.e,backendName:"cpu",kernelFunc:W},U=Object(O.a)(r.f,t=>Math.asinh(t)),G={kernelName:r.f,backendName:"cpu",kernelFunc:U},K=Object(O.a)(r.g,t=>Math.atan(t)),X={kernelName:r.g,backendName:"cpu",kernelFunc:K},Y=Object(O.a)(r.i,t=>Math.atanh(t)),Q={kernelName:r.i,backendName:"cpu",kernelFunc:Y};function J(t,e,n,o,c,l){const d=c.strideHeight,h=c.strideWidth,f=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,O=c.effectiveFilterWidth,x=c.padInfo.top,v=c.padInfo.left,j="max"===l?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,output=Object(r.Vb)(c.outShape,n),w=output.values,I=c.outShape[1]*c.outShape[2]*c.outShape[3],k=c.outShape[2]*c.outShape[3],N=c.outShape[3];for(let b=0;b<c.batchSize;++b){const e=b*I,n=b*o[0];for(let r=0;r<c.inChannels;++r)for(let I=0;I<c.outHeight;++I){const T=I*d-x,C=Math.max(0,T),$=Math.min(c.inHeight,y+T),S=e+I*k;for(let e=0;e<c.outWidth;++e){const d=e*h-v,y=Math.max(0,d),x=Math.min(c.inWidth,O+d);let I=j,k=0,T=0;for(let e=C;e<$;e+=f){const c=n+e*o[1];for(let e=y;e<x;e+=m){const n=t[c+e*o[2]+r];"max"===l&&n>I?I=n:"avg"===l&&(k+=n,T++)}if(isNaN(I))break}w[S+e*N+r]="avg"===l?k/T:I}}}return output}function Z(t,e,n,o,c=!1,l=!1){const d=Object(r.Vb)(o.outShape,"int32"),h=o.strideHeight,f=o.strideWidth,m=o.dilationHeight,y=o.dilationWidth,O=o.effectiveFilterHeight,x=o.effectiveFilterWidth,v=o.padInfo.top,j=o.padInfo.left,w=Object(r.Vb)(e,n,t);for(let b=0;b<o.batchSize;++b)for(let t=0;t<o.inChannels;++t)for(let e=0;e<o.outHeight;++e){const n=e*h-v;let r=n;for(;r<0;)r+=m;const I=Math.min(o.inHeight,O+n);for(let h=0;h<o.outWidth;++h){const O=h*f-j;let v=O;for(;v<0;)v+=y;const k=Math.min(o.inWidth,x+O);let N=Number.NEGATIVE_INFINITY,T=-1;for(let e=r;e<I;e+=m){const r=e-n;for(let n=v;n<k;n+=y){const d=n-O,h=w.get(b,e,n,t);h>N&&(N=h,T=c?l?((b*o.inHeight+e)*o.inWidth+n)*o.inChannels+t:(e*o.inWidth+n)*o.inChannels+t:r*x+d)}}d.set(T,b,e,h,t)}}return d}const tt={kernelName:r.j,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l}=e;Object(c.a)(l,"avgPool");const{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=o;r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(h,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${h} and dilations '1'`);const y=r.Tb.computePool2DInfo(l.shape,d,h,1,f,m);let O;if(1===y.filterWidth&&1===y.filterHeight&&r.Hc.arraysEqual(y.inShape,y.outShape))O=Object(j.a)({inputs:{x:l},backend:n});else{const t=n.data.get(l.dataId).values,e=r.Hc.computeStrides(l.shape),o=J(t,l.shape,l.dtype,e,y,"avg");O=n.makeTensorInfo(y.outShape,l.dtype,o.values)}return O}};const et={kernelName:r.k,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:l,input:input}=e,d=input;Object(c.a)([l,input],"avgPoolBackprop");const{filterSize:h,strides:f,pad:m}=o,y=r.Tb.computePool2DInfo(d.shape,h,f,1,m),O=y.strideHeight,x=y.strideWidth,v=y.filterHeight,j=y.filterWidth,w=y.dilationHeight,I=y.dilationWidth,k=y.effectiveFilterHeight,N=y.effectiveFilterWidth,T=N-1-y.padInfo.left,C=k-1-y.padInfo.top,$=Object(r.Vb)(d.shape,"float32"),S=1/(v*j),E=n.data.get(l.dataId).values,R=Object(r.Vb)(l.shape,"float32",E);for(let b=0;b<y.batchSize;++b)for(let t=0;t<y.inChannels;++t)for(let e=0;e<y.inHeight;++e)for(let n=0;n<y.inWidth;++n){const r=e-C,o=n-T;let c=0;for(let e=0;e<k;e+=w){const n=(r+e)/O;if(!(n<0||n>=y.outHeight||Math.floor(n)!==n))for(let e=0;e<N;e+=I){const r=(o+e)/x;if(r<0||r>=y.outWidth||Math.floor(r)!==r)continue;c+=R.get(b,n,r,t)}}$.set(c*S,b,e,n,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}};const nt={kernelName:r.Q,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,scale:d,offset:h,mean:f,variance:m}=e;r.Hc.assert(f.shape.length===m.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.Hc.assert(null==h||f.shape.length===h.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.Hc.assert(null==d||f.shape.length===d.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Object(c.a)([l,f,m,d,h],"batchNorm");let{varianceEpsilon:y}=o;null==y&&(y=.001);const O=n.data.get(l.dataId).values,x=n.data.get(f.dataId).values,v=n.data.get(m.dataId).values,j=d?n.data.get(d.dataId).values:new Float32Array([1]),w=h?n.data.get(h.dataId).values:new Float32Array([0]),I=new Float32Array(O.length),k=w.length,N=j.length,T=v.length,C=x.length;let $=0,S=0,E=0,R=0;for(let i=0;i<O.length;++i)I[i]=w[$++]+(O[i]-x[S++])*j[E++]/Math.sqrt(v[R++]+y),$>=k&&($=0),S>=C&&(S=0),E>=N&&(E=0),R>=T&&(R=0);return n.makeTensorInfo(l.shape,l.dtype,I)}};var at=n(418),ot=n(346);const st=Object(O.a)(r.o,(t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t}),it={kernelName:r.o,backendName:"cpu",kernelFunc:st};var ct=n(269);function ut(t){const{inputs:e,backend:n}=t,{input:input}=e,r=n.data.get(input.dataId).complexTensorInfos.imag,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}const lt={kernelName:r.V,backendName:"cpu",kernelFunc:ut};var pt=n(296);function ht(t){const{inputs:e,backend:n,attrs:o}=t,{axis:c}=o,l=r.Hc.parseAxisParam(c,e[0].shape)[0];let d=r.Tb.computeOutShape(e.map(t=>t.shape),l);if(0===r.Hc.sizeFromShape(d))return n.makeTensorInfo(d,e[0].dtype,[]);const h=e.filter(t=>r.Hc.sizeFromShape(t.shape)>0);if(1===h.length)return h[0];const f=h.map(t=>t.shape);if(r.Tb.assertParamsConsistent(f,l),"complex64"===h[0].dtype){const t=h.map(t=>Object(pt.a)({inputs:{input:t},backend:n})),e=h.map(t=>ut({inputs:{input:t},backend:n})),r=ht({inputs:t,backend:n,attrs:{axis:l}}),o=ht({inputs:e,backend:n,attrs:{axis:l}}),c=Object(ct.a)({inputs:{real:r,imag:o},backend:n});return t.forEach(t=>n.disposeIntermediateTensorInfo(t)),e.forEach(i=>n.disposeIntermediateTensorInfo(i)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),c}const m=h.map(t=>{const e=r.Hc.sizeFromShape(t.shape.slice(l));return A({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})});d=r.Tb.computeOutShape(m.map(t=>t.shape),1);const y=r.Hc.getTypedArrayFromDType(h[0].dtype,r.Hc.sizeFromShape(d));if(1===m[0].shape[0]){let t=0;m.forEach(e=>{const o=n.data.get(e.dataId).values,c=r.Hc.sizeFromShape(e.shape);y.set(o,t),t+=c})}else{let t=0;m.forEach(e=>{const r=n.data.get(e.dataId).values;let o=0;for(let n=0;n<e.shape[0];++n){const c=n*d[1]+t;for(let col=0;col<e.shape[1];++col)y[c+col]=r[o++]}t+=e.shape[1]})}const O=r.Tb.computeOutShape(h.map(t=>t.shape),l),x=n.makeTensorInfo(O,e[0].dtype,y);return m.forEach(t=>n.disposeIntermediateTensorInfo(t)),x}const ft={kernelName:r.q,backendName:"cpu",kernelFunc:ht};function mt(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,filter:filter}=e,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}=o;Object(c.a)([l,filter],"conv2d");const O=r.Tb.convertConv2DDataFormat(f),x=r.Tb.computeConv2DInfo(l.shape,filter.shape,d,m,h,y,!1,O),v=x.filterHeight,j=x.filterWidth,w=x.dilationHeight,I=x.dilationWidth,k=x.padInfo.left,N=x.padInfo.top,T="channelsLast"===x.dataFormat,C=new r.Ob(x.outShape,l.dtype),$=r.Hc.computeStrides(l.shape),S=r.Hc.computeStrides(filter.shape),E=$[0],R=T?$[1]:$[2],A=T?$[2]:1,F=T?1:$[1],D=C.strides[0],_=T?C.strides[1]:C.strides[2],M=T?C.strides[2]:1,P=T?1:C.strides[1],B=n.data.get(l.dataId).values,L=n.data.get(filter.dataId).values,z=C.values;for(let b=0;b<x.batchSize;++b){const t=b*E,e=b*D;for(let n=0;n<x.outHeight;++n){const r=e+n*_,o=n*x.strideHeight-N;for(let e=0;e<v;++e){const n=o+e*w;if(n<0||n>=x.inHeight)continue;const c=e*S[0],l=t+n*R;for(let t=0;t<x.outWidth;++t){const e=r+t*M,n=t*x.strideWidth-k;for(let t=0;t<j;++t){const r=n+t*I;if(r<0||r>=x.inWidth)continue;const o=l+r*A;let d=c+t*S[1];for(let t=0;t<x.inChannels;++t){const n=B[o+t*F];for(let t=0;t<x.outChannels;++t)z[e+t*P]+=n*L[d+t];d+=x.outChannels}}}}}}return n.makeTensorInfo(C.shape,C.dtype,z)}const bt={kernelName:r.r,backendName:"cpu",kernelFunc:mt};const gt={kernelName:r.s,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,dy:d}=e,{strides:h,pad:f,dataFormat:m,dimRoundingMode:y,filterShape:O}=o;Object(c.a)([l,d],"conv2dBackpropFilter");const x=r.Tb.convertConv2DDataFormat(m),v=r.Tb.computeConv2DInfo(l.shape,O,h,1,f,y,!1,x),{strideHeight:j,strideWidth:w,filterHeight:I,filterWidth:k}=v,N="channelsLast"===v.dataFormat,T=new r.Ob(v.filterShape,"float32"),C=v.padInfo.left,$=v.padInfo.top,S=n.data.get(l.dataId).values,E=n.data.get(d.dataId).values,R=new r.Ob(l.shape,l.dtype,S),A=new r.Ob(d.shape,d.dtype,E);for(let t=0;t<I;++t){const e=Math.max(0,Math.ceil(($-t)/j)),n=Math.min(v.outHeight,(v.inHeight+$-t)/j);for(let r=0;r<k;++r){const o=Math.max(0,Math.ceil((C-r)/w)),c=Math.min(v.outWidth,(v.inWidth+C-r)/w);for(let l=0;l<v.inChannels;++l)for(let d=0;d<v.outChannels;++d){let h=0;for(let b=0;b<v.batchSize;++b)for(let f=e;f<n;++f){const e=t+f*j-$;for(let t=o;t<c;++t){const n=r+t*w-C;h+=N?R.get(b,e,n,l)*A.get(b,f,t,d):R.get(b,l,e,n)*A.get(b,d,f,t)}}T.set(h,t,r,l,d)}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const yt={kernelName:r.t,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:l,filter:filter}=e,{inputShape:d,strides:h,pad:f,dataFormat:m,dimRoundingMode:y}=o;Object(c.a)([l,filter],"conv2dBackpropInput");const O=r.Hc.computeStrides(filter.shape),x=r.Hc.computeStrides(l.shape);let v=r.Tb.convertConv2DDataFormat(m);const j=r.Tb.computeConv2DInfo(d,filter.shape,h,1,f,y,!1,v),w=new r.Ob(j.inShape,"float32"),I=w.values,k=n.data.get(l.dataId).values,N=n.data.get(filter.dataId).values,[T,C,$]=O,{batchSize:S,filterHeight:E,filterWidth:R,inChannels:A,inHeight:F,inWidth:D,outChannels:_,outHeight:M,outWidth:P,strideHeight:B,strideWidth:L}=j;v=j.dataFormat;const z=E-1-j.padInfo.top,V=R-1-j.padInfo.left,W="channelsLast"===v,H=w.strides[0],U=W?w.strides[1]:w.strides[2],G=W?w.strides[2]:1,K=W?1:w.strides[1],X=x[0],Y=W?x[1]:x[2],Q=W?x[2]:1,J=W?1:x[1];for(let b=0;b<S;++b)for(let t=0;t<A;++t)for(let e=0;e<F;++e){const n=e-z,r=Math.max(0,Math.ceil(n/B)),o=Math.min(M,(E+n)/B);for(let c=0;c<D;++c){const l=c-V,d=Math.max(0,Math.ceil(l/L)),h=Math.min(P,(R+l)/L);let f=0;for(let e=r;e<o;++e){const r=e*B-n;for(let n=d;n<h;++n){const o=X*b+Y*e+Q*n,c=T*(E-1-r)+C*(R-1-(n*L-l))+$*t;for(let t=0;t<_;++t){f+=k[o+J*t]*N[c+t]}}}I[H*b+U*e+G*c+K*t]=f}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Ot={kernelName:r.u,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,filter:filter}=e,{strides:d,pad:h,dilations:f}=o;Object(c.a)([l,filter],"conv3d");const m=r.Tb.computeConv3DInfo(l.shape,filter.shape,d,f,h),{filterDepth:y,filterHeight:O,filterWidth:x,dilationDepth:v,dilationHeight:j,dilationWidth:w,padInfo:I}=m,k=I.front,N=I.left,T=I.top,C=new r.Ob(m.outShape,l.dtype),$=n.data.get(l.dataId).values,S=n.data.get(filter.dataId).values,E=C.values,R=r.Hc.computeStrides(l.shape),A=r.Hc.computeStrides(filter.shape);for(let b=0;b<m.batchSize;++b){const t=b*R[0],e=b*C.strides[0];for(let n=0;n<m.outDepth;++n){const r=e+n*C.strides[1],o=n*m.strideDepth-k;for(let e=0;e<y;++e){const n=o+e*v;if(n<0||n>=m.inDepth)continue;const c=e*A[0],l=t+n*R[1];for(let t=0;t<m.outHeight;++t){const e=r+t*C.strides[2],n=t*m.strideHeight-T;for(let t=0;t<O;++t){const r=n+t*j;if(r<0||r>=m.inHeight)continue;const o=c+t*A[1],d=l+r*R[2];for(let t=0;t<m.outWidth;++t){const n=e+t*m.outChannels,r=t*m.strideWidth-N;for(let t=0;t<x;++t){const e=r+t*w;if(e<0||e>=m.inWidth)continue;const c=o+t*A[2],l=d+e*m.inChannels;let h=c;for(let t=0;t<m.inChannels;++t){const e=$[l+t];for(let t=0;t<m.outChannels;++t)E[n+t]+=e*S[h+t];h+=m.outChannels}}}}}}}}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const xt={kernelName:r.v,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,dy:d}=e,{strides:h,pad:f,filterShape:m}=o;Object(c.a)([l,d],"conv3dBackpropFilterV2");const y=r.Hc.computeStrides(l.shape),O=r.Hc.computeStrides(d.shape),x=r.Tb.computeConv3DInfo(l.shape,m,h,1,f),v=x.strideDepth,j=x.strideHeight,w=x.strideWidth,I=x.filterDepth,k=x.filterHeight,N=x.filterWidth,T=new r.Ob(x.filterShape,"float32"),C=T.values,[$,S,E,R]=T.strides,A=n.data.get(d.dataId).values,[F,D,_,M]=O,P=n.data.get(l.dataId).values,[B,L,z,V]=y,W=x.padInfo.front,H=x.padInfo.left,U=x.padInfo.top;for(let t=0;t<I;++t){const e=Math.max(0,Math.ceil((W-t)/v)),n=Math.min(x.outDepth,(x.inDepth+W-t)/v),r=t*$;for(let o=0;o<k;++o){const c=Math.max(0,Math.ceil((U-o)/j)),l=Math.min(x.outHeight,(x.inHeight+U-o)/j),d=o*S+r;for(let r=0;r<N;++r){const h=Math.max(0,Math.ceil((H-r)/w)),f=Math.min(x.outWidth,(x.inWidth+H-r)/w),m=r*E+d;for(let d=0;d<x.inChannels;++d){const y=d*R+m;for(let m=0;m<x.outChannels;++m){let O=0;for(let b=0;b<x.batchSize;++b){const y=b*B,x=b*F;for(let I=e;I<n;++I){const e=(t+I*v-W)*L+y,n=I*D+x;for(let t=c;t<l;++t){const c=(o+t*j-U)*z+e,l=t*_+n;for(let t=h;t<f;++t){const e=t*M+l;O+=P[(r+t*w-H)*V+c+d]*A[e+m]}}}}C[y+m]=O}}}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const vt={kernelName:r.w,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:l,filter:filter}=e,{pad:d,strides:h,inputShape:f}=o;Object(c.a)([l],"conv3dBackpropInputV2");const m=r.Hc.computeStrides(l.shape),y=r.Hc.computeStrides(filter.shape),O=r.Tb.computeConv3DInfo(f,filter.shape,h,1,d),x=new r.Ob(O.inShape,"float32"),v=x.values,[j,w,I,k]=x.strides,N=n.data.get(l.dataId).values,[T,C,$,S]=m,E=n.data.get(filter.dataId).values,[R,A,F,D]=y,{batchSize:_,filterDepth:M,filterHeight:P,filterWidth:B,inChannels:L,inDepth:z,inHeight:V,inWidth:W,outChannels:H,outDepth:U,outHeight:G,outWidth:K,strideDepth:X,strideHeight:Y,strideWidth:Q}=O,J=M-1-O.padInfo.front,Z=P-1-O.padInfo.top,tt=B-1-O.padInfo.left;for(let b=0;b<_;++b)for(let t=0;t<L;++t)for(let e=0;e<z;++e){const n=e-J,r=Math.max(0,Math.ceil(n/X)),o=Math.min(U,(M+n)/X);for(let c=0;c<V;++c){const l=c-Z,d=Math.max(0,Math.ceil(l/Y)),h=Math.min(G,(P+l)/Y);for(let f=0;f<W;++f){const m=f-tt,y=Math.max(0,Math.ceil(m/Q)),O=Math.min(K,(B+m)/Q);let x=0;for(let e=r;e<o;++e){const r=e*X-n;for(let n=d;n<h;++n){const o=n*Y-l;for(let c=y;c<O;++c){const l=T*b+C*e+$*n+S*c,d=R*(M-1-r)+A*(P-1-o)+F*(B-1-(c*Q-m))+D*t;for(let t=0;t<H;++t){x+=N[l+t]*E[d+t]}}}}v[j*b+w*e+I*c+k*f+t]=x}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},jt=Object(O.a)(r.x,t=>Math.cos(t)),wt={kernelName:r.x,backendName:"cpu",kernelFunc:jt},It=Object(O.a)(r.y,t=>Math.cosh(t)),kt={kernelName:r.y,backendName:"cpu",kernelFunc:It};function Nt(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,filter:filter}=e,{strides:d,pad:h,dilations:f,dimRoundingMode:m}=o;Object(c.a)([l,filter],"depthwiseConv2DNative");const y=r.Hc.computeStrides(l.shape),O=r.Hc.computeStrides(filter.shape);let x=f;null==x&&(x=[1,1]),r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(d,x),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${d} and dilations '${x}'`);const v=r.Tb.computeConv2DInfo(l.shape,filter.shape,d,x,h,m,!0),{filterHeight:j,filterWidth:w,dilationHeight:I,dilationWidth:k,padInfo:N}=v,T=N.left,C=N.top,$=v.outChannels/v.inChannels,S=new r.Ob(v.outShape,l.dtype),E=n.data.get(l.dataId).values,R=n.data.get(filter.dataId).values,A=S.values;for(let b=0;b<v.batchSize;++b){const t=b*y[0],e=b*S.strides[0];for(let n=0;n<v.outHeight;++n){const r=e+n*S.strides[1],o=n*v.strideHeight-T;for(let e=0;e<j;++e){const n=o+e*I;if(n<0||n>=v.inHeight)continue;const c=e*O[0],l=t+n*y[1];for(let t=0;t<v.outWidth;++t){const e=r+t*S.strides[2],n=t*v.strideWidth-C;for(let t=0;t<w;++t){const r=n+t*k;if(r<0||r>=v.inWidth)continue;const o=c+t*O[1],d=l+r*v.inChannels;let h=e,f=o;for(let t=0;t<v.inChannels;++t){const e=E[d+t];for(let q=0;q<$;++q)A[h+q]+=e*R[f+q];h+=$,f+=$}}}}}}return n.makeTensorInfo(S.shape,S.dtype,S.values)}const Tt={kernelName:r.A,backendName:"cpu",kernelFunc:Nt};const Ct={kernelName:r.B,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l,dy:d}=e,{strides:h,dilations:f,pad:m,dimRoundingMode:y,filterShape:O}=o;Object(c.a)([l,d],"depthwiseConv2dNativeBackpropFilter");const x=r.Tb.computeConv2DInfo(l.shape,O,h,f,m,y,!0),{strideHeight:v,strideWidth:j,filterHeight:w,filterWidth:I}=x,k=new r.Ob(x.filterShape,"float32"),N=x.padInfo.left,T=x.padInfo.top,C=x.outChannels/x.inChannels,$=n.data.get(l.dataId).values,S=new r.Ob(l.shape,l.dtype,$),E=n.data.get(d.dataId).values,R=new r.Ob(d.shape,d.dtype,E);for(let t=0;t<w;++t){const e=Math.max(0,Math.ceil((T-t)/v)),n=Math.min(x.outHeight,(x.inHeight+T-t)/v);for(let r=0;r<I;++r){const o=Math.max(0,Math.ceil((N-r)/j)),c=Math.min(x.outWidth,(x.inWidth+N-r)/j);for(let l=0;l<x.outChannels;++l){const d=Math.trunc(l/C),h=l%C;let f=0;for(let b=0;b<x.batchSize;++b)for(let h=e;h<n;++h){const e=t+h*v-T;for(let t=o;t<c;++t){const n=r+t*j-N;f+=S.get(b,e,n,d)*R.get(b,h,t,l)}}k.set(f,t,r,d,h)}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const $t={kernelName:r.C,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:l,filter:filter}=e,{strides:d,dilations:h,pad:f,dimRoundingMode:m,inputShape:y}=o;Object(c.a)([l,filter],"depthwiseConv2DNativeBackpropInput");const O=r.Hc.computeStrides(l.shape),x=r.Hc.computeStrides(filter.shape),v=r.Tb.computeConv2DInfo(y,filter.shape,d,h,f,m,!0),j=new r.Ob(v.inShape,"float32"),w=j.values,[I,k,N]=j.strides,T=n.data.get(l.dataId).values,[C,$,S]=O,E=n.data.get(filter.dataId).values,[R,A,F]=x,{batchSize:D,filterHeight:_,filterWidth:M,inChannels:P,inHeight:B,inWidth:L,outChannels:z,outHeight:V,outWidth:W,strideHeight:H,strideWidth:U}=v,G=_-1-v.padInfo.top,K=M-1-v.padInfo.left,X=z/P;for(let b=0;b<D;++b)for(let t=0;t<P;++t)for(let e=0;e<B;++e){const n=e-G,r=Math.max(0,Math.ceil(n/H)),o=Math.min(V,(_+n)/H);for(let c=0;c<L;++c){const l=c-K,d=Math.max(0,Math.ceil(l/U)),h=Math.min(W,(M+l)/U);let f=0;for(let e=r;e<o;++e){const r=e*H-n;for(let n=d;n<h;++n){const o=C*b+$*e+S*n,c=R*(_-1-r)+A*(M-1-(n*U-l))+F*t;for(let e=0;e<X;++e){f+=T[o+(t*X+e)]*E[c+e]}}}w[I*b+k*e+N*c+t]=f}}return n.makeTensorInfo(j.shape,j.dtype,j.values)}},St={kernelName:r.D,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:o,filter:filter}=t,{strides:c,pad:l,dilations:d}=n,h=e,f=h.data.get(o.dataId).values,m=o.shape.length,y=h.data.get(filter.dataId).values,O=filter.shape.length,{batchSize:x,inHeight:v,inWidth:j,inChannels:w,outHeight:I,outWidth:k,padInfo:N,strideHeight:T,strideWidth:C,filterHeight:$,filterWidth:S,dilationHeight:E,dilationWidth:R,outShape:A}=r.Tb.computeDilation2DInfo(o.shape,filter.shape,c,l,"NHWC",d),F=r.Hc.sizeFromShape(A),D=A.length,_=r.Hc.getArrayFromDType(o.dtype,F);for(let b=0;b<x;++b)for(let t=0;t<I;++t){const e=t*T-N.top;for(let n=0;n<k;++n){const c=n*C-N.left;for(let l=0;l<w;++l){let d=Number.MIN_SAFE_INTEGER;for(let t=0;t<$;++t){const n=e+t*E;if(n>=0&&n<v)for(let e=0;e<S;++e){const h=c+e*R;if(h>=0&&h<j){const c=r.Hc.locToIndex([b,n,h,l],m,r.Hc.computeStrides(o.shape)),x=r.Hc.locToIndex([t,e,l],O,r.Hc.computeStrides(filter.shape)),v=f[c]+y[x];v>d&&(d=v)}}}_[r.Hc.locToIndex([b,t,n,l],D,r.Hc.computeStrides(A))]=d}}}return{dataId:h.write(r.Hc.toTypedArray(_,o.dtype),A,o.dtype),shape:A,dtype:o.dtype}}},Et={kernelName:r.E,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:o,filter:filter,dy:c}=t,{strides:l,pad:d,dilations:h}=n,f=e,m=r.Hc.toNestedArray(o.shape,f.data.get(o.dataId).values),y=r.Hc.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:O,inHeight:x,inWidth:v,inChannels:j,outHeight:w,outWidth:I,padInfo:k,strideHeight:N,strideWidth:T,filterHeight:C,filterWidth:$,dilationHeight:S,dilationWidth:E,outShape:R}=r.Tb.computeDilation2DInfo(o.shape,filter.shape,l,d,"NHWC",h);r.Hc.assert(c.rank===R.length,()=>`Error in ${r.E}, dy must have the same rank as output ${R.length}, but got `+c.rank);const A=r.Hc.toNestedArray(R,f.data.get(c.dataId).values),F=r.Hc.makeZerosNestedTypedArray(filter.shape,filter.dtype);for(let b=0;b<O;++b)for(let t=0;t<w;++t){const e=t*N-k.top;for(let n=0;n<I;++n){const r=n*T-k.left;for(let o=0;o<j;++o){let c=Number.MIN_SAFE_INTEGER,l=0,d=0;for(let t=0;t<C;++t){const n=e+t*S;if(n>=0&&n<x)for(let e=0;e<$;++e){const h=r+e*E;if(h>=0&&h<v){const r=m[b][n][h][o]+y[t][e][o];r>c&&(c=r,l=t,d=e)}}}F[l][d][o]+=A[b][t][n][o]}}}return{dataId:f.write(r.Hc.toTypedArray(F,o.dtype),filter.shape,filter.dtype),shape:filter.shape,dtype:filter.dtype}}},Rt={kernelName:r.F,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:o,filter:filter,dy:c}=t,{strides:l,pad:d,dilations:h}=n,f=e,m=r.Hc.toNestedArray(o.shape,f.data.get(o.dataId).values),y=r.Hc.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:O,inHeight:x,inWidth:v,inChannels:j,outHeight:w,outWidth:I,padInfo:k,strideHeight:N,strideWidth:T,filterHeight:C,filterWidth:$,dilationHeight:S,dilationWidth:E,outShape:R}=r.Tb.computeDilation2DInfo(o.shape,filter.shape,l,d,"NHWC",h);r.Hc.assert(c.rank===R.length,()=>`Error in ${r.F}, dy must have the same rank as output ${R.length}, but got `+c.rank);const A=r.Hc.toNestedArray(R,f.data.get(c.dataId).values),F=r.Hc.makeZerosNestedTypedArray(o.shape,o.dtype);for(let b=0;b<O;++b)for(let t=0;t<w;++t){const e=t*N-k.top;for(let n=0;n<I;++n){const r=n*T-k.left;for(let o=0;o<j;++o){let c=Number.MIN_SAFE_INTEGER,l=e<0?0:e,d=r<0?0:r;for(let t=0;t<C;++t){const n=e+t*S;if(n>=0&&n<x)for(let e=0;e<$;++e){const h=r+e*E;if(h>=0&&h<v){const r=m[b][n][h][o]+y[t][e][o];r>c&&(c=r,l=n,d=h)}}}F[b][l][d][o]+=A[b][t][n][o]}}}return{dataId:f.write(r.Hc.toTypedArray(F,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var At=n(249);const Ft=Object(w.a)((a,b)=>a/b),div=Object(At.a)(r.G,Ft),Dt={kernelName:r.G,backendName:"cpu",kernelFunc:div},p=r.Tb.ERF_P,_t=r.Tb.ERF_A1,Mt=r.Tb.ERF_A2,Pt=r.Tb.ERF_A3,Bt=r.Tb.ERF_A4,Lt=r.Tb.ERF_A5,zt=Object(O.a)(r.I,t=>{const e=Math.sign(t),n=Math.abs(t),r=1/(1+p*n);return e*(1-((((Lt*r+Bt)*r+Pt)*r+Mt)*r+_t)*r*Math.exp(-n*n))}),Vt={kernelName:r.I,backendName:"cpu",kernelFunc:zt};var Wt=n(347),Ht=n(348),Ut=n(298),Gt=n(297),qt=n(299);function Kt(input,t,e){const n=input.shape,o=n[0],c=n[1],l=e.data.get(input.dataId),d=l.complexTensorInfos.real,h=l.complexTensorInfos.imag,f=[o,c],m=r.Hc.sizeFromShape(f),y=r.Hc.getTypedArrayFromDType("float32",m),O=r.Hc.getTypedArrayFromDType("float32",m);for(let b=0;b<o;b++){const n=Object(Gt.a)({inputs:{x:d},backend:e,attrs:{begin:[b,0],size:[1,c]}}),i=Object(Gt.a)({inputs:{x:h},backend:e,attrs:{begin:[b,0],size:[1,c]}}),input=Object(ct.a)({inputs:{real:n,imag:i},backend:e}),{real:o,imag:l}=Xt(input,t,e),f=r.Tb.mergeRealAndImagArrays(o,l);for(let t=0;t<c;t++){const e=r.Tb.getComplexWithIndex(f,t);y[b*c+t]=e.real,O[b*c+t]=e.imag}e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(input)}const x=e.makeTensorInfo(f,"float32",y),v=e.makeTensorInfo(f,"float32",O),j=Object(ct.a)({inputs:{real:x,imag:v},backend:e});return e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(v),j}function Xt(input,t,e){const n=r.Hc.sizeFromShape(input.shape),o=e.data.get(input.dataId),c=e.data.get(o.complexTensorInfos.real.dataId).values,l=e.data.get(o.complexTensorInfos.imag.dataId).values;if(0==((d=n)&d-1)){const o=function t(e,n,o,c,l){if(1===o)return{real:e,imag:n};const data=r.Tb.mergeRealAndImagArrays(e,n),d=o/2,h=r.Tb.complexWithEvenIndex(data),f=h.real,m=h.imag,y=[f.length],O=l.makeTensorInfo(y,"float32",f),x=l.makeTensorInfo(y,"float32",m),v=Object(ct.a)({inputs:{real:O,imag:x},backend:l}),j=r.Tb.complexWithOddIndex(data),w=j.real,I=j.imag,k=[w.length],N=l.makeTensorInfo(k,"float32",w),T=l.makeTensorInfo(k,"float32",I),C=Object(ct.a)({inputs:{real:N,imag:T},backend:l}),$=t(f,m,d,c,l),S=$.real,E=$.imag,A=[S.length],F=l.makeTensorInfo(A,"float32",S),D=l.makeTensorInfo(A,"float32",E),_=Object(ct.a)({inputs:{real:F,imag:D},backend:l}),M=t(w,I,d,c,l),P=M.real,B=M.imag,L=[P.length],z=l.makeTensorInfo(L,"float32",P),V=l.makeTensorInfo(L,"float32",B),W=Object(ct.a)({inputs:{real:z,imag:V},backend:l}),H=r.Tb.exponents(o,c),U=[H.real.length],G=l.makeTensorInfo(U,"float32",H.real),K=l.makeTensorInfo(U,"float32",H.imag),X=Object(ct.a)({inputs:{real:G,imag:K},backend:l}),Y=Object(Ut.a)({inputs:{a:X,b:W},backend:l}),Q=Object(R.a)({inputs:{a:_,b:Y},backend:l}),J=Object(qt.a)({inputs:{a:_,b:Y},backend:l}),Z=Object(pt.a)({inputs:{input:Q},backend:l}),tt=Object(pt.a)({inputs:{input:J},backend:l}),et=ut({inputs:{input:Q},backend:l}),nt=ut({inputs:{input:J},backend:l}),at=ht({inputs:[Z,tt],backend:l,attrs:{axis:0}}),ot=ht({inputs:[et,nt],backend:l,attrs:{axis:0}}),st=l.data.get(at.dataId).values,it=l.data.get(ot.dataId).values;return l.disposeIntermediateTensorInfo(O),l.disposeIntermediateTensorInfo(x),l.disposeIntermediateTensorInfo(v),l.disposeIntermediateTensorInfo(N),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo(C),l.disposeIntermediateTensorInfo(F),l.disposeIntermediateTensorInfo(D),l.disposeIntermediateTensorInfo(_),l.disposeIntermediateTensorInfo(z),l.disposeIntermediateTensorInfo(V),l.disposeIntermediateTensorInfo(W),l.disposeIntermediateTensorInfo(G),l.disposeIntermediateTensorInfo(K),l.disposeIntermediateTensorInfo(X),l.disposeIntermediateTensorInfo(Y),l.disposeIntermediateTensorInfo(Q),l.disposeIntermediateTensorInfo(J),l.disposeIntermediateTensorInfo(Z),l.disposeIntermediateTensorInfo(et),l.disposeIntermediateTensorInfo(tt),l.disposeIntermediateTensorInfo(nt),l.disposeIntermediateTensorInfo(at),l.disposeIntermediateTensorInfo(ot),{real:st,imag:it}}(c,l,n,t,e),d=[input.shape[0],input.shape[1]];if(t){const t=e.makeTensorInfo(d,"float32",o.real),c=e.makeTensorInfo(d,"float32",o.imag),l=e.makeTensorInfo([],"float32",r.Hc.createScalarValue(n,"float32")),h=Object(j.a)({inputs:{x:l},backend:e}),f=Dt.kernelFunc({inputs:{a:t,b:l},backend:e}),m=Dt.kernelFunc({inputs:{a:c,b:h},backend:e}),y=e.data.get(f.dataId).values,O=e.data.get(m.dataId).values;return e.disposeIntermediateTensorInfo(t),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),{real:y,imag:O}}return o}{const e=function(data,t,e){const n=new Float32Array(2*t);for(let o=0;o<t;o++){let c=0,l=0;for(let n=0;n<t;n++){const d=r.Tb.exponent(o*n,t,e),h=r.Tb.getComplexWithIndex(data,n);c+=h.real*d.real-h.imag*d.imag,l+=h.real*d.imag+h.imag*d.real}e&&(c/=t,l/=t),r.Tb.assignToTypedArray(n,c,l,o)}return n}(r.Tb.mergeRealAndImagArrays(c,l),n,t);return r.Tb.splitRealAndImagArrays(e)}var d}const Yt={kernelName:r.L,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:input}=e,o=r.Hc.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],l=A({inputs:{x:input},backend:n,attrs:{shape:[o/c,c]}}),d=Kt(l,!1,n),h=A({inputs:{x:d},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}};const Qt={kernelName:r.M,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{shape:o,value:c,dtype:l}=n,d=l||r.Hc.inferDtype(c),h=r.Hc.getArrayFromDType(d,r.Hc.sizeFromShape(o));return function(t,e,n){t.fill(e)}(h,c),e.makeTensorInfo(o,d,h)}};const Jt={kernelName:r.N,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:image}=t,o=n,output=r.Hc.getTypedArrayFromDType(image.dtype,r.Hc.sizeFromShape(image.shape)),[c,l,d,h]=image.shape,f=o.data.get(image.dataId).values;for(let t=0;t<c;t++){const e=t*d*l*h;for(let t=0;t<l;t++){const n=t*(d*h);for(let col=0;col<d;col++){const r=col*h;for(let o=0;o<h;o++){const l=[c,t,col,o][2],m=Math.round(d-l),y=e+n+r+o;let O=f[y];if(m>=0&&m<d){O=f[e+n+m*h+o]}output[y]=O}}}}return{dataId:o.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}};var Zt=n(349);const te={kernelName:r.R,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:o,filter:filter,bias:c,preluActivationWeights:l}=e,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:O}=r;let x=mt({inputs:{x:o,filter:filter},backend:n,attrs:{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const t=x;x=Object(R.a)({inputs:{a:x,b:c},backend:n}),n.disposeIntermediateTensorInfo(t)}if(O){const t=x;x=E(n,x,O,l),n.disposeIntermediateTensorInfo(t)}return x}};const ee={kernelName:r.S,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:o,filter:filter,bias:c,preluActivationWeights:l}=e,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:O}=r;let x=Nt({inputs:{x:o,filter:filter},backend:n,attrs:{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const t=x;x=Object(R.a)({inputs:{a:x,b:c},backend:n}),n.disposeIntermediateTensorInfo(t)}if(O){const t=x;x=E(n,x,O,l),n.disposeIntermediateTensorInfo(t)}return x}};const ne={kernelName:r.T,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:input}=e,o=r.Hc.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],l=A({inputs:{x:input},backend:n,attrs:{shape:[o/c,c]}}),d=Kt(l,!0,n),h=A({inputs:{x:d},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}},re=Object(O.a)(r.W,t=>Number.isFinite(t)?1:0,"bool"),ae={kernelName:r.W,backendName:"cpu",kernelFunc:re},oe=Object(O.a)(r.X,t=>Math.abs(t)===1/0?1:0,"bool"),se={kernelName:r.X,backendName:"cpu",kernelFunc:oe},ie=Object(O.a)(r.Y,t=>Number.isNaN(t)?1:0,"bool"),ce={kernelName:r.Y,backendName:"cpu",kernelFunc:ie};var ue=n(350);const le=Object(O.a)(r.bb,t=>Math.log1p(t)),de={kernelName:r.bb,backendName:"cpu",kernelFunc:le},pe=Object(O.a)(r.cb,t=>t?0:1,"bool"),he={kernelName:r.cb,backendName:"cpu",kernelFunc:pe};var fe=n(351),me=n(300);const be={kernelName:r.db,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:o}=t,{reductionIndices:l,keepDims:d}=e,h=n;let f=o.shape;const m=f.length,y=r.Hc.parseAxisParam(l,f);let O=y;const x=r.Tb.getAxesPermutation(O,m);let v=h.data.get(o.dataId).values;if(null!=x){const t=new Array(m);for(let i=0;i<t.length;i++)t[i]=f[x[i]];v=Object(me.a)(v,f,o.dtype,x,t),O=r.Tb.getInnerMostAxes(O.length,m),f=t}Object(c.a)(o,"max"),r.Tb.assertAxesAreInnerMostDims("max",O,m);const[j,w]=r.Tb.computeOutAndReduceShapes(f,O),I=r.Hc.sizeFromShape(w),k=Object(fe.a)(v,I,j,o.dtype),N=h.write(k,j,o.dtype);let T=j;if(d){T=r.Tb.expandShapeToKeepDim(j,y)}return{dataId:N,shape:T,dtype:o.dtype}}};const ge={kernelName:r.eb,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l}=e;Object(c.a)(l,"maxPool");const{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=o;r.Hc.assert(r.Tb.eitherStridesOrDilationsAreOne(h,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${h} and dilations '1'`);const y=r.Tb.computePool2DInfo(l.shape,d,h,1,f,m);let O;if(1===y.filterWidth&&1===y.filterHeight&&r.Hc.arraysEqual(y.inShape,y.outShape))O=Object(j.a)({inputs:{x:l},backend:n});else{const t=n.data.get(l.dataId).values,e=r.Hc.computeStrides(l.shape),o=J(t,l.shape,l.dtype,e,y,"max");O=n.makeTensorInfo(y.outShape,l.dtype,o.values)}return O}};const ye={kernelName:r.fb,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{dy:l,input:input,output:output}=e,d=input;Object(c.a)([input,output],"maxPoolBackprop");const{filterSize:h,strides:f,pad:m,dimRoundingMode:y}=o,O=r.Tb.computePool2DInfo(d.shape,h,f,1,m,y),x=n.data.get(d.dataId).values,v=Object(r.Vb)(O.outShape,d.dtype,Z(x,d.shape,d.dtype,O).values),j=O.strideHeight,w=O.strideWidth,I=O.dilationHeight,k=O.dilationWidth,N=O.effectiveFilterHeight,T=O.effectiveFilterWidth,C=T-1-O.padInfo.left,$=N-1-O.padInfo.top,S=Object(r.Vb)(d.shape,"float32"),E=n.data.get(l.dataId).values,R=Object(r.Vb)(l.shape,"float32",E);for(let b=0;b<O.batchSize;++b)for(let t=0;t<O.inChannels;++t)for(let e=0;e<O.inHeight;++e)for(let n=0;n<O.inWidth;++n){const r=e-$,o=n-C;let c=0;for(let e=0;e<N;e+=I){const n=(r+e)/j;if(!(n<0||n>=O.outHeight||Math.floor(n)!==n))for(let r=0;r<T;r+=k){const l=(o+r)/w;if(l<0||l>=O.outWidth||Math.floor(l)!==l)continue;const mask=N*T-1-v.get(b,n,l,t)===e*T+r?1:0;if(0===mask)continue;c+=R.get(b,n,l,t)*mask}}S.set(c,b,e,n,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Oe={kernelName:r.gb,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:o}=t,{filterSize:l,strides:d,pad:h,includeBatchInIndex:f}=e,m=n;Object(c.a)(o,"MaxPoolWithArgmax");const y=m.data.get(o.dataId).values,O=r.Tb.computePool2DInfo(o.shape,l,d,[1,1],h),[x,v]=function(t,e,n,o,c){const l=J(t,0,n,r.Hc.computeStrides(e),c,"max"),d=Z(t,e,n,c,!0,o);return[l.values,d.values]}(y,o.shape,o.dtype,f,O),j=m.write(x,O.outShape,o.dtype),w=m.write(v,O.outShape,o.dtype);return[{dataId:j,shape:O.outShape,dtype:o.dtype},{dataId:w,shape:O.outShape,dtype:"int32"}]}};const xe={kernelName:r.ib,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l}=e,{paddings:d,mode:h}=o;Object(c.a)(l,"mirrorPad");const f=d.map((p,i)=>p[0]+l.shape[i]+p[1]),m=d.map(p=>p[0]),y=d.map((p,i)=>p[0]+l.shape[i]),O="reflect"===h?0:1,x=n.data.get(l.dataId).values,v=l.shape.length,j=r.Hc.computeStrides(l.shape),w=r.Hc.sizeFromShape(f),I=f.length,k=r.Hc.computeStrides(f),N=r.Hc.getTypedArrayFromDType(l.dtype,w);for(let i=0;i<w;i++){let t=r.Hc.indexToLoc(i,I,k);for(let i=0;i<I;i++)t[i]<m[i]?t[i]=2*m[i]-t[i]-O:t[i]>=y[i]&&(t[i]=2*(y[i]-1)-t[i]+O);t=t.map((t,i)=>t-m[i]);const e=r.Hc.locToIndex(t,v,j);N[i]=x[e]}return{dataId:n.write(N,f,l.dtype),shape:f,dtype:l.dtype}}},ve=r.kc.nonMaxSuppressionV4Impl,je={kernelName:r.lb,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:o}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,padToMaxOutputSize:f}=n,m=e;Object(c.a)(r,"NonMaxSuppressionPadded");const y=m.data.get(r.dataId).values,O=m.data.get(o.dataId).values,{selectedIndices:x,validOutputs:v}=ve(y,O,l,d,h,f);return[x,v]}},we=r.kc.nonMaxSuppressionV5Impl,Ie={kernelName:r.mb,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:o}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,softNmsSigma:f}=n,m=e;Object(c.a)(r,"NonMaxSuppressionWithScore");const y=m.data.get(r.dataId).values,O=m.data.get(o.dataId).values,x=l,v=d,j=h,w=f,{selectedIndices:I,selectedScores:k}=we(y,O,x,v,j,w);return[I,k]}};var ke=n(352);const Ne={kernelName:r.ob,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l}=e,{paddings:d,constantValue:h}=o;Object(c.a)(l,"pad");const f=d.map((p,i)=>p[0]+l.shape[i]+p[1]),m=d.map(p=>p[0]),y=n.data.get(l.dataId).values,O=r.Hc.sizeFromShape(l.shape),x=l.shape.length,v=r.Hc.computeStrides(l.shape),j=r.Hc.sizeFromShape(f),w=f.length,I=r.Hc.computeStrides(f),k=r.Hc.getTypedArrayFromDType(l.dtype,j);0!==h&&k.fill(h);for(let i=0;i<O;i++){const t=r.Hc.indexToLoc(i,x,v).map((t,i)=>t+m[i]);k[r.Hc.locToIndex(t,w,I)]=y[i]}return{dataId:n.write(k,f,l.dtype),shape:f,dtype:l.dtype}}},Te=Object(O.a)(r.rb,t=>1/t),Ce={kernelName:r.rb,backendName:"cpu",kernelFunc:Te},$e={kernelName:r.vb,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:image}=t,{radians:o,fillValue:c,center:l}=e,d=n,output=r.Hc.getTypedArrayFromDType(image.dtype,r.Hc.sizeFromShape(image.shape)),[h,f,m,y]=image.shape,[O,x]=r.Tb.getImageCenter(l,f,m),v=Math.sin(o),j=Math.cos(o),w=d.data.get(image.dataId).values;for(let t=0;t<h;t++){const e=t*m*f*y;for(let t=0;t<f;t++){const n=t*(m*y);for(let col=0;col<m;col++){const r=col*y;for(let o=0;o<y;o++){const l=[h,t,col,o],d=l[2],I=l[1];let k=(d-O)*j-(I-x)*v,N=(d-O)*v+(I-x)*j;k=Math.round(k+O),N=Math.round(N+x);let T=c;if("number"!=typeof c&&(T=3===o?255:c[o]),k>=0&&k<m&&N>=0&&N<f){T=w[e+N*(m*y)+k*y+o]}output[e+n+r+o]=T}}}}return{dataId:d.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}},Se=Object(O.a)(r.wb,t=>{const base=Math.floor(t);return t-base<.5?Math.floor(t):t-base>.5?Math.ceil(t):base%2==0?base:base+1}),Ee={kernelName:r.wb,backendName:"cpu",kernelFunc:Se};var Re=n(353);const Ae=r.Tb.SELU_SCALEALPHA,Fe=r.Tb.SELU_SCALE,De=Object(O.a)(r.yb,t=>t>=0?Fe*t:Ae*(Math.exp(t)-1)),_e={kernelName:r.yb,backendName:"cpu",kernelFunc:De},Me=Object(O.a)(r.zb,t=>1/(1+Math.exp(-t))),Pe={kernelName:r.zb,backendName:"cpu",kernelFunc:Me},Be=Object(O.a)(r.Ab,t=>t<0?-1:t>0?1:0),Le={kernelName:r.Ab,backendName:"cpu",kernelFunc:Be},ze=Object(O.a)(r.Bb,t=>Math.sin(t)),Ve={kernelName:r.Bb,backendName:"cpu",kernelFunc:ze},We=Object(O.a)(r.Cb,t=>Math.sinh(t)),He={kernelName:r.Cb,backendName:"cpu",kernelFunc:We},Ue=Math.log(1.1920928955078125e-7)+2,Ge=Object(O.a)(r.Eb,t=>{const e=t>-Ue,n=t<Ue,r=Math.exp(t);let o;return o=n?r:e?t:Math.log(1+r),o}),qe={kernelName:r.Eb,backendName:"cpu",kernelFunc:Ge};function Ke(t){const{inputs:e,attrs:n,backend:r}=t,{x:o}=e,{perm:l}=n;Object(c.a)(o,"transpose");const d=o.shape.length,h=new Array(d);for(let i=0;i<h.length;i++)h[i]=o.shape[l[i]];const f=r.data.get(o.dataId).values,m=Object(me.a)(f,o.shape,o.dtype,l,h);return{dataId:r.write(m,h,o.dtype),shape:h,dtype:o.dtype}}const Xe={kernelName:r.Pb,backendName:"cpu",kernelFunc:Ke};const Ye={kernelName:r.Fb,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:o}=t,{x:l}=e,{blockShape:d,paddings:h}=o;Object(c.a)([l],"spaceToBatchND");const f=r.Hc.sizeFromShape(d),m=[[0,0]];m.push(...h);for(let i=1+d.length;i<l.shape.length;++i)m.push([0,0]);const y=Ne.kernelFunc({inputs:{x:l},backend:n,attrs:{paddings:m,constantValue:0}}),O=r.Tb.getReshaped(y.shape,d,f,!1),x=r.Tb.getPermuted(O.length,d.length,!1),v=r.Tb.getReshapedPermuted(y.shape,d,f,!1),j=A({inputs:{x:y},backend:n,attrs:{shape:O}}),w=Ke({inputs:{x:j},backend:n,attrs:{perm:x}}),I=A({inputs:{x:w},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(j),n.disposeIntermediateTensorInfo(w),I}},Qe=Object(O.a)(r.Gb,t=>Math.sqrt(t)),Je={kernelName:r.Gb,backendName:"cpu",kernelFunc:Qe},Ze={kernelName:r.Hb,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Object(c.a)(n,"square");const o=r.data.get(n.dataId).values,l=new Float32Array(o.length);for(let i=0;i<o.length;++i){const t=o[i];l[i]=t*t}return{dataId:r.write(l,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var tn=n(354);const en=Object(O.a)(r.Jb,(t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha}),nn={kernelName:r.Jb,backendName:"cpu",kernelFunc:en},rn=Object(O.a)(r.Lb,t=>Math.tan(t)),an={kernelName:r.Lb,backendName:"cpu",kernelFunc:rn},on=Object(O.a)(r.Mb,t=>Math.tanh(t)),sn={kernelName:r.Mb,backendName:"cpu",kernelFunc:on};var cn=n(355);const un={kernelName:r.Qb,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:o}=n,{x:l}=e;Object(c.a)(l,"unique");const d=r.data.get(l.dataId).values,{outputValues:h,outputShape:f,indices:m}=Object(cn.a)(d,o,l.shape,l.dtype);return[r.makeTensorInfo(f,l.dtype,h),r.makeTensorInfo([m.length],"int32",m)]}},ln=[M,P.a,L,V,R.b,H,G,X,Q,tt,et,_,nt,at.b,ot.a,it,ct.b,ft,gt,yt,bt,xt,vt,Ot,wt,kt,Tt,Ct,$t,St,Rt,Et,Dt,v,Vt,Wt.a,Ht.a,Yt,Qt,Jt,Zt.a,te,ee,j.b,ne,lt,ae,se,ce,ue.a,de,he,ge,ye,Oe,be,xe,Ut.b,je,Ie,ke.a,Ne,N,pt.b,Ce,C,S,F,$e,Ee,Re.a,_e,Pe,Le,Ve,He,Gt.b,qe,Ye,Je,Ze,tn.a,nn,qt.b,an,sn,Xe,un];for(const t of ln)Object(r.pc)(t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return q}));var r=n(177),o=n(402),c=n(197);class l{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return Object(c.e)(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Object(c.e)(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(o.f)(this.node.rawAttrs,t,e);if(null!=n.s)return Object(o.i)(this.node.rawAttrs,t,e);if(null!=n.b)return Object(o.c)(this.node.rawAttrs,t,e);if(null!=n.shape)return Object(o.k)(this.node.rawAttrs,t,e);if(null!=n.type)return Object(o.e)(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(o.g)(this.node.rawAttrs,t,e);if(null!=n.list.s)return Object(o.h)(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Object(o.j)(this.node.rawAttrs,t,e);if(null!=n.list.b)return Object(o.b)(this.node.rawAttrs,t,e);if(null!=n.list.type)return Object(o.d)(this.node.rawAttrs,t,e)}return e}}var d=n(268),h=n(200),f=n(403),m=n(292),y=n(185),div=n(194),O=n(330),x=n(273),sub=n(191),v=n(261),j=n(246),w=n(227),I=n(262);var k=n(240),N=n(378),T=n(379),C=n(381),$=n(382),S=n(383),E=n(325),R=n(384),A=n(385),F=n(215),D=n(289),_=n(320),M=n(284),P=n(388),B=n(213),L=n(389),z=n(319),V=n(243),W=n(309),H=n(257),U=n(201),G=n(396),K=n(256),X=n(242),Y=n(397),Q=n(340),J=n(274),Z=n(316),tt=n(398),et=n(317),nt=n(334),at=n(220),ot=n(202),st=n(401),it=n(400),ct=n(386),ut=n(318),lt=n(339),pt=n(332),ht=n(286);function ft(t,e,n=""){r.Hc.assert(function(t,e){if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(-1!==t[i]&&-1!==e[i]&&t[i]!==e[i])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class mt{constructor(t,e,n,o,c,l,d){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=o,this.identicalElementShapes=c,this.dynamicSize=l,this.clearAfterRead=d,this.tensors=[],this.closed_=!1,this.idTensor=Object(r.rc)(0),Object(r.jc)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),ft(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Object(r.jc)(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((i,t)=>this.write(i,e[t]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let i=0;i<this.size();i++)t.push(i)}if(0===t.length)return Object(r.zc)([],[0].concat(this.elementShape));const n=this.readMany(t);return ft(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(r.wc)(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Object(r.zc)([],[0].concat(this.elementShape));const e=[];for(let i=0;i<this.size();i++)e.push(i);const n=this.readMany(e);return ft(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(r.Xb)(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Object(r.Fc)(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const o=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const c=0===n?0:e.size/n,l=[];Object(r.Dc)(()=>{e=Object(r.qc)(e,[1,n,c]);for(let i=0;i<t.length;++i){const n=[0,0===i?0:o[i-1],0],d=[1,t[i],c];l[i]=Object(r.qc)(Object(r.tc)(e,n,d),this.elementShape)}return l});const d=[];for(let i=0;i<t.length;i++)d[i]=i;this.writeMany(d,l)}}class bt{constructor(t,e,n,o=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);ft(e,t.shape,"TensorList shape mismatch: "),Object(r.jc)(t)}),this.idTensor=Object(r.rc)(0),this.maxNumElements=o,Object(r.jc)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new bt([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return ft(t,this.elementShape,"TensorList shape mismatch: "),Object(r.Dc)(()=>{const e=this.tensors.map(e=>Object(r.qc)(e,t));return Object(r.wc)(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return ft(n.shape,t,"TensorList shape mismatch: "),Object(r.qc)(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ft(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(r.jc)(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return ft(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ft(this.elementShape,e.shape,"TensorList shape mismatch: "),Object(r.jc)(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return ft(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Object(r.zc)([],[0].concat(this.elementShape)):Object(r.Dc)(()=>{const e=t.map(i=>Object(r.qc)(this.tensors[i],n));return Object(r.wc)(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return ft(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Object(r.zc)([],[0].concat(this.elementShape)):Object(r.Dc)(()=>{const t=this.tensors.map(t=>Object(r.qc)(t,e));return Object(r.Xb)(t,0)})}}const gt=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Object(c.d)("thenBranch",t,e,n),o=Object(c.d)("elseBranch",t,e,n),l=Object(c.d)("cond",t,e,n),d=Object(c.d)("args",t,e,n);return(await l.data())[0]?n.functionMap[r].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap):n.functionMap[o].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(c.d)("body",t,e,n),o=Object(c.d)("cond",t,e,n),l=Object(c.d)("args",t,e,n),d=await n.functionMap[o].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap),h=l.map(t=>t.id);let f=await d[0].data();d.forEach(t=>{t.kept||-1!==h.indexOf(t.id)||t.dispose()});let m=l;for(;f[0];){const t=m;m=await n.functionMap[r].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);const e=m.map(t=>t.id);t.forEach(t=>{t.kept||-1!==h.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const c=await n.functionMap[o].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);f=await c[0].data(),c.forEach(t=>{t.kept||-1!==h.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return m}case"LoopCond":{const r=Object(c.d)("pred",t,e,n);return[Object(c.a)(r)]}case"Switch":{const r=Object(c.d)("pred",t,e,n);let data=Object(c.d)("data",t,e,n);return data.kept||(data=Object(c.a)(data)),(await r.data())[0]?[void 0,data]:[data,void 0]}case"Merge":{const r=t.inputNames.find(t=>void 0!==Object(c.e)(t,e,n));if(r){const data=Object(c.e)(r,e,n);return[Object(c.a)(data)]}return}case"Enter":{const r=Object(c.d)("frameName",t,e,n),data=Object(c.d)("tensor",t,e,n);return n.enterFrame(r),[Object(c.a)(data)]}case"Exit":{const data=Object(c.d)("tensor",t,e,n);return n.exitFrame(),[Object(c.a)(data)]}case"NextIteration":{const data=Object(c.d)("tensor",t,e,n);return n.nextIteration(),[Object(c.a)(data)]}case"TensorArrayV3":{const o=Object(c.d)("size",t,e,n),l=Object(c.d)("dtype",t,e,n),d=Object(c.d)("elementShape",t,e,n),h=Object(c.d)("dynamicSize",t,e,n),f=Object(c.d)("clearAfterRead",t,e,n),m=Object(c.d)("identicalElementShapes",t,e,n),y=Object(c.d)("name",t,e,n),O=new mt(y,l,o,d,m,h,f);return n.addTensorArray(O),[O.idTensor,Object(r.rc)(1)]}case"TensorArrayWriteV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=Object(c.d)("index",t,e,n),l=Object(c.d)("tensor",t,e,n),d=n.getTensorArray(r.id);return d.write(o,l),[d.idTensor]}case"TensorArrayReadV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=Object(c.d)("index",t,e,n);return[n.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=Object(c.d)("indices",t,e,n),l=Object(c.d)("dtype",t,e,n);return[n.getTensorArray(r.id).gather(o,l)]}case"TensorArrayScatterV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=Object(c.d)("indices",t,e,n),l=Object(c.d)("tensor",t,e,n),d=n.getTensorArray(r.id);return d.scatter(o,l),[d.idTensor]}case"TensorArrayConcatV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=n.getTensorArray(r.id),l=Object(c.d)("dtype",t,e,n);return[o.concat(l)]}case"TensorArraySplitV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=Object(c.d)("tensor",t,e,n),l=Object(c.d)("lengths",t,e,n),d=n.getTensorArray(r.id);return d.split(l,o),[d.idTensor]}case"TensorArraySizeV3":{const o=Object(c.d)("tensorArrayId",t,e,n),l=n.getTensorArray(o.id);return[Object(r.rc)(l.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(c.d)("tensorArrayId",t,e,n),o=n.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("index",t,e,n),l=Object(c.d)("tensor",t,e,n),d=n.getTensorList(r.id);return d.setItem(o,l),[d.idTensor]}case"TensorListGetItem":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("index",t,e,n),l=Object(c.d)("elementShape",t,e,n),d=Object(c.d)("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(o,l,d)]}case"TensorListScatterV2":case"TensorListScatter":{const o=Object(c.d)("indices",t,e,n),l=function(t,e,n,o){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const c=Math.max(...e);if(null!=o&&-1!==o&&c>=o)throw new Error(`Max index must be < array size (${c}  vs. ${o})`);const l=new bt([],n,t.dtype,o),d=Object(r.Fc)(t,0);return e.forEach((t,e)=>{l.setItem(t,d[e])}),l}(Object(c.d)("tensor",t,e,n),o,Object(c.d)("elementShape",t,e,n),Object(c.d)("numElements",t,e,n));return n.addTensorList(l),[l.idTensor]}case"TensorListReserve":{const r=function(t,e,n){return new bt([],t,e,n)}(Object(c.d)("elementShape",t,e,n),Object(c.d)("elementDType",t,e,n),Object(c.d)("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListGather":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("indices",t,e,n),l=Object(c.d)("elementShape",t,e,n),d=Object(c.d)("elementDType",t,e,n);return[n.getTensorList(r.id).gather(o,d,l)]}case"TensorListStack":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("elementShape",t,e,n),l=Object(c.d)("elementDType",t,e,n),d=Object(c.d)("numElements",t,e,n);return[n.getTensorList(r.id).stack(o,l,d)]}case"TensorListFromTensor":{const o=function(t,e,n){const o=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);ft(t.shape.slice(1),e,"TensorList shape mismatch: ");const c=Object(r.Fc)(t);return new bt(c,e,o)}(Object(c.d)("tensor",t,e,n),Object(c.d)("elementShape",t,e,n),Object(c.d)("elementDType",t,e,n));return n.addTensorList(o),[o.idTensor]}case"TensorListConcat":{const r=Object(c.d)("tensorListId",t,e,n),o=n.getTensorList(r.id),l=Object(c.d)("dtype",t,e,n),d=Object(c.d)("elementShape",t,e,n);return[o.concat(l,d)]}case"TensorListPushBack":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("tensor",t,e,n),l=n.getTensorList(r.id);return l.pushBack(o),[l.idTensor]}case"TensorListPopBack":{const r=Object(c.d)("tensorListId",t,e,n),o=Object(c.d)("elementShape",t,e,n),l=Object(c.d)("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(o,l)]}case"TensorListSplit":{const o=Object(c.d)("tensor",t,e,n),l=Object(c.d)("elementShape",t,e,n),d=function(t,e,n){let o=0;const c=e.map(t=>(o+=t,o));if(o!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${o}, and tensor's shape is: ${t.shape}`);const l=0===o?0:t.size/o,d=Object(r.Dc)(()=>{const d=[];t=Object(r.qc)(t,[1,o,l]);for(let i=0;i<e.length;++i){const o=[0,0===i?0:c[i-1],0],h=[1,e[i],l];d[i]=Object(r.qc)(Object(r.tc)(t,o,h),n)}return t.dispose(),d}),h=new bt([],n,t.dtype,e.length);for(let i=0;i<d.length;i++)h.setItem(i,d[i]);return h}(o,Object(c.d)("lengths",t,e,n),l);return n.addTensorList(d),[d.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var yt=n(326),Ot=n(230),xt=n(184),vt=n(327),jt=n(245),wt=n(404),It=n(293),kt=n(295),Nt=n(405),Tt=n(406),Ct=n(407),$t=n(329);function St(t,e,n){const[r,o]=Object(c.d)("fusedOps",t,e,n),l="biasadd"===r,d="prelu"===o,h="fusedbatchnorm"===r,f=Object(c.d)("numArgs",t,e,n);if(l){if(d&&2!==f)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!d&&1!==f)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(h)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const m=Object(c.d)("strides",t,e,n),y=Object(c.c)(t,e,n),O=Object(c.d)("dataFormat",t,e,n).toUpperCase(),x=Object(c.d)("dilations",t,e,n),[v,j]=Object(c.d)("args",t,e,n);return{stride:m,pad:y,dataFormat:O,dilations:x,biasArg:v,preluArg:j,activationFunc:o}}var Et=n(305),Rt=n(408),At=n(409),Ft=n(337),Dt=n(241),_t=n(395),Mt=n(410),Pt=n(306),Bt=n(413),Lt=n(217),zt=n(196);var Vt=n(186),Wt=n(414),Ht=n(415);function Ut(t,e,n){return{boxes:Object(c.d)("boxes",t,e,n),scores:Object(c.d)("scores",t,e,n),maxOutputSize:Object(c.d)("maxOutputSize",t,e,n),iouThreshold:Object(c.d)("iouThreshold",t,e,n),scoreThreshold:Object(c.d)("scoreThreshold",t,e,n),softNmsSigma:Object(c.d)("softNmsSigma",t,e,n)}}var Gt=n(342),qt=n(343);var Kt=n(237),Xt=n(190);class Yt{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Object(r.rc)(0),this.tensorMap=new Map,Object(r.jc)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),Object(r.Dc)(()=>{const t=Object(r.Fc)(e),o=n.length,c=t.length;r.Hc.assert(o===c,()=>`The number of elements doesn't match, keys has ${o} elements, the values has ${c} elements.`);for(let i=0;i<o;i++){const e=n[i],o=t[i];Object(r.jc)(o),this.tensorMap.set(e,o)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Object(r.Dc)(()=>{const t=[];for(let i=0;i<n.length;i++){const r=n[i],o=this.findWithDefault(r,e);t.push(o)}return Object(r.wc)(t)})}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+t.dtype);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+e.dtype)}}var Qt=n(235),Jt=n(260),Zt=n(214),te=n(219),ee=n(265),ne=n(218),re=n(226),ae=n(266),oe=n(294),se=n(210);var ie=n(228),ce=n(203);var ue=n(370),le=n(333),de=n(373),pe=n(394),he=n(430);var fe=n(236),me=n(282),be=n(281),ge=n(195),ye=n(321),Oe=n(322),xe=n(323),ve=n(324),je=n(287);var we=n(209),Ie=n(291),ke=n(258),Ne=n(206),Te=n(399),Ce=n(279),$e=n(183),Se=n(225),Ee=n(255),Re=n(259),Ae=n(239),Fe=n(416),De=n(417);var _e=n(275),Me=n(276),Pe=n(277),Be=n(308);var Le=n(238),ze=n(336),Ve=n(290),We=n(264),He=n(267),Ue=n(328),Ge=n(278);function qe(t,e,n,o){const ft=((t,e,n)=>{switch(t.category){case"arithmetic":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[h.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"AddN":return[f.a(Object(c.d)("tensors",t,e,n))];case"FloorMod":case"Mod":return[m.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Mul":return[y.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"RealDiv":case"Div":return[div.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"DivNoNan":return[O.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"FloorDiv":return[x.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Sub":return[sub.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Minimum":return[v.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Maximum":return[j.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Pow":return[w.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"SquaredDifference":return[I.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[k.a(Object(c.d)("x",t,e,n))];case"Acos":return[N.a(Object(c.d)("x",t,e,n))];case"Acosh":return[T.a(Object(c.d)("x",t,e,n))];case"Asin":return[C.a(Object(c.d)("x",t,e,n))];case"Asinh":return[$.a(Object(c.d)("x",t,e,n))];case"Atan":return[S.a(Object(c.d)("x",t,e,n))];case"Atan2":return[E.a(Object(c.d)("x",t,e,n),Object(c.d)("y",t,e,n))];case"Atanh":return[R.a(Object(c.d)("x",t,e,n))];case"Ceil":return[A.a(Object(c.d)("x",t,e,n))];case"Complex":return[F.a(Object(c.d)("real",t,e,n),Object(c.d)("imag",t,e,n))];case"Cos":return[D.a(Object(c.d)("x",t,e,n))];case"Cosh":return[_.a(Object(c.d)("x",t,e,n))];case"Elu":return[M.a(Object(c.d)("x",t,e,n))];case"Erf":return[P.a(Object(c.d)("x",t,e,n))];case"Exp":return[B.a(Object(c.d)("x",t,e,n))];case"Expm1":return[L.a(Object(c.d)("x",t,e,n))];case"Floor":return[z.a(Object(c.d)("x",t,e,n))];case"Log":return[V.a(Object(c.d)("x",t,e,n))];case"Log1p":return[W.a(Object(c.d)("x",t,e,n))];case"Imag":return[H.a(Object(c.d)("x",t,e,n))];case"Neg":return[U.a(Object(c.d)("x",t,e,n))];case"Reciprocal":return[G.a(Object(c.d)("x",t,e,n))];case"Real":return[K.a(Object(c.d)("x",t,e,n))];case"Relu":return[X.a(Object(c.d)("x",t,e,n))];case"Round":return[Y.a(Object(c.d)("x",t,e,n))];case"Selu":return[Q.a(Object(c.d)("x",t,e,n))];case"Sigmoid":return[J.a(Object(c.d)("x",t,e,n))];case"Sin":return[Z.a(Object(c.d)("x",t,e,n))];case"Sign":return[tt.a(Object(c.d)("x",t,e,n))];case"Sinh":return[et.a(Object(c.d)("x",t,e,n))];case"Softplus":return[nt.a(Object(c.d)("x",t,e,n))];case"Sqrt":return[at.a(Object(c.d)("x",t,e,n))];case"Square":return[ot.a(Object(c.d)("x",t,e,n))];case"Tanh":return[st.a(Object(c.d)("x",t,e,n))];case"Tan":return[it.a(Object(c.d)("x",t,e,n))];case"Relu6":case"ClipByValue":return[ct.a(Object(c.d)("x",t,e,n),Object(c.d)("clipValueMin",t,e,n),Object(c.d)("clipValueMax",t,e,n))];case"Rsqrt":return[ut.a(Object(c.e)(t.inputNames[0],e,n))];case"Prod":return[lt.a(Object(c.d)("x",t,e,n),Object(c.d)("axes",t,e,n))];case"LeakyRelu":return[pt.a(Object(c.d)("x",t,e,n),Object(c.d)("alpha",t,e,n))];case"Prelu":return[ht.a(Object(c.d)("x",t,e,n),Object(c.d)("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return gt(t,e,n);case"convolution":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Object(c.d)("stride",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("dataFormat",t,e,n).toUpperCase(),d=Object(c.d)("dilation",t,e,n);return[yt.a(Object(c.d)("x",t,e,n),Object(c.d)("filter",t,e,n),r,o,l,d)]}case"Conv2D":{const r=Object(c.d)("strides",t,e,n),o=Object(c.c)(t,e,n),l=Object(c.d)("dataFormat",t,e,n).toUpperCase(),d=Object(c.d)("dilations",t,e,n);return[Ot.a(Object(c.d)("x",t,e,n),Object(c.d)("filter",t,e,n),[r[1],r[2]],o,l,[d[1],d[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:l,dilations:d,biasArg:h,preluArg:f,activationFunc:m}=St(t,e,n);return[xt.j.conv2d({x:Object(c.d)("x",t,e,n),filter:Object(c.d)("filter",t,e,n),strides:[r[1],r[2]],pad:o,dataFormat:l,dilations:[d[1],d[2]],bias:h,activation:m,preluActivationWeights:f})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:l,dilations:d,biasArg:h,preluArg:f,activationFunc:m}=St(t,e,n);return[xt.j.depthwiseConv2d({x:Object(c.d)("x",t,e,n),filter:Object(c.d)("filter",t,e,n),strides:[r[1],r[2]],pad:o,dataFormat:l,dilations:[d[1],d[2]],bias:h,activation:m,preluActivationWeights:f})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(c.d)("outputShape",t,e,n),o=Object(c.d)("strides",t,e,n),l=Object(c.c)(t,e,n);return[vt.a(Object(c.d)("x",t,e,n),Object(c.d)("filter",t,e,n),r,[o[1],o[2]],l)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(c.d)("strides",t,e,n),o=Object(c.c)(t,e,n),l=Object(c.d)("dilations",t,e,n),d=Object(c.d)("dataFormat",t,e,n).toUpperCase();return[jt.a(Object(c.d)("input",t,e,n),Object(c.d)("filter",t,e,n),[r[1],r[2]],o,d,[l[1],l[2]])]}case"Conv3D":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("dataFormat",t,e,n).toUpperCase(),d=Object(c.d)("dilations",t,e,n);return[wt.a(Object(c.d)("x",t,e,n),Object(c.d)("filter",t,e,n),[r[1],r[2],r[3]],o,l,[d[1],d[2],d[3]])]}case"AvgPool":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("kernelSize",t,e,n);return[It.a(Object(c.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("kernelSize",t,e,n);return[kt.a(Object(c.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("kernelSize",t,e,n),d=Object(c.d)("includeBatchInIndex",t,e,n),{result:h,indexes:f}=Nt.a(Object(c.d)("x",t,e,n),[l[1],l[2]],[r[1],r[2]],o,d);return[h,f]}case"AvgPool3D":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("kernelSize",t,e,n);return[Tt.a(Object(c.d)("x",t,e,n),[l[1],l[2],l[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("kernelSize",t,e,n);return[Ct.a(Object(c.d)("x",t,e,n),[l[1],l[2],l[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=Object(c.d)("strides",t,e,n),o=Object(c.d)("pad",t,e,n),l=Object(c.d)("dilations",t,e,n),d=r[1],h=r[2],f=l[1],m=l[2];return[$t.a(Object(c.d)("x",t,e,n),Object(c.d)("filter",t,e,n),[d,h],o,[f,m],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Object(c.d)("shape",t,e,n),o=Object(c.d)("dtype",t,e,n),l=Object(c.d)("value",t,e,n);return[Et.a(r,l,o)]}case"LinSpace":{const r=Object(c.d)("start",t,e,n),o=Object(c.d)("stop",t,e,n),l=Object(c.d)("num",t,e,n);return[Rt.a(r,o,l)]}case"Multinomial":{const r=Object(c.d)("logits",t,e,n),o=Object(c.d)("numSamples",t,e,n),l=Object(c.d)("seed",t,e,n);return[At.a(r,o,l)]}case"OneHot":{const r=Object(c.d)("indices",t,e,n),o=Object(c.d)("depth",t,e,n),l=Object(c.d)("onValue",t,e,n),d=Object(c.d)("offValue",t,e,n);return[Ft.a(r,o,l,d)]}case"Ones":return[Dt.a(Object(c.d)("shape",t,e,n),Object(c.d)("dtype",t,e,n))];case"OnesLike":return[_t.a(Object(c.d)("x",t,e,n))];case"RandomUniform":return[Mt.a(Object(c.d)("shape",t,e,n),Object(c.d)("minval",t,e,n),Object(c.d)("maxval",t,e,n),Object(c.d)("dtype",t,e,n))];case"Range":{const r=Object(c.d)("start",t,e,n),o=Object(c.d)("stop",t,e,n),l=Object(c.d)("step",t,e,n);return[Pt.a(r,o,l,Object(c.d)("dtype",t,e,n))]}case"TruncatedNormal":{const r=Object(c.d)("shape",t,e,n),o=Object(c.d)("mean",t,e,n),l=Object(c.d)("stdDev",t,e,n),d=Object(c.d)("seed",t,e,n);return[Bt.a(r,o,l,Object(c.d)("dtype",t,e,n),d)]}case"Zeros":return[Lt.a(Object(c.d)("shape",t,e,n),Object(c.d)("dtype",t,e,n))];case"ZerosLike":return[zt.a(Object(c.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:o,maxOutputSize:c,iouThreshold:l,scoreThreshold:d,softNmsSigma:h}=Ut(t,e,n),f=await xt.k.nonMaxSuppressionWithScoreAsync(r,o,c,l,d,h);return[f.selectedIndices,f.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:o,maxOutputSize:l,iouThreshold:d,scoreThreshold:h}=Ut(t,e,n),f=Object(c.d)("padToMaxOutputSize",t,e,n),m=await xt.k.nonMaxSuppressionPaddedAsync(r,o,l,d,h,f);return[m.selectedIndices,m.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:o,maxOutputSize:c,iouThreshold:l,scoreThreshold:d}=Ut(t,e,n);return[await xt.k.nonMaxSuppressionAsync(r,o,c,l,d)]}case"Where":{const r=Vt.a(Object(c.d)("condition",t,e,n),"bool"),o=[await Wt.a(r)];return r.dispose(),o}case"ListDiff":return Ht.a(Object(c.d)("x",t,e,n),Object(c.d)("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Object(c.d)("x",t,e,n),o=Object(c.d)("k",t,e,n),l=Object(c.d)("sorted",t,e,n),d=Gt.a(r,o,l);return[d.values,d.indices]}case"Unique":{const r=Object(c.d)("x",t,e,n),o=qt.a(r);return[o.values,o.indices]}case"UniqueV2":{const r=Object(c.d)("x",t,e,n),o=Object(c.d)("axis",t,e,n),l=qt.a(r,o);return[l.values,l.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Object(c.d)("images",t,e,n),o=Object(c.d)("size",t,e,n),l=Object(c.d)("alignCorners",t,e,n);return[xt.k.resizeBilinear(r,[o[0],o[1]],l)]}case"ResizeNearestNeighbor":{const r=Object(c.d)("images",t,e,n),o=Object(c.d)("size",t,e,n),l=Object(c.d)("alignCorners",t,e,n);return[xt.k.resizeNearestNeighbor(r,[o[0],o[1]],l)]}case"CropAndResize":{const image=Object(c.d)("image",t,e,n),r=Object(c.d)("boxes",t,e,n),o=Object(c.d)("boxInd",t,e,n),l=Object(c.d)("cropSize",t,e,n),d=Object(c.d)("method",t,e,n),h=Object(c.d)("extrapolationValue",t,e,n);return[xt.k.cropAndResize(image,r,o,l,d,h)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Object(c.d)("default",t,e,n);return[Object(c.e)(t.name,e,n)||r];case"Placeholder":return[Object(c.e)(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const data=Object(c.d)("x",t,e,n);return[Object(c.a)(data)]}case"IdentityN":return Object(c.d)("x",t,e,n).map(t=>Object(c.a)(t));case"Snapshot":const o=Object(c.d)("x",t,e,n);return[Object(c.a)(o)];case"Shape":return[Kt.a(Object(c.d)("x",t,e,n).shape,"int32")];case"ShapeN":return Object(c.d)("x",t,e,n).map(t=>Kt.a(t.shape));case"Size":return[Xt.a(Object(c.d)("x",t,e,n).size,"int32")];case"Rank":return[Xt.a(Object(c.d)("x",t,e,n).rank,"int32")];case"NoOp":return[Xt.a(1)];case"Print":const input=Object(c.d)("x",t,e,n),data=Object(c.d)("data",t,e,n),l=Object(c.d)("message",t,e,n),d=Object(c.d)("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let i=0;i<data.length;i++)console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0,d));return[input];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Equal":return[Qt.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"NotEqual":return[Jt.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Greater":return[Zt.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"GreaterEqual":return[te.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Less":return[ee.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"LessEqual":return[ne.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"LogicalAnd":return[re.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"LogicalNot":return[ae.a(Object(c.d)("a",t,e,n))];case"LogicalOr":return[oe.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];case"Select":case"SelectV2":return[se.a(Object(c.d)("condition",t,e,n),Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ie.a(Object(c.d)("a",t,e,n),Object(c.d)("b",t,e,n),Object(c.d)("transposeA",t,e,n),Object(c.d)("transposeB",t,e,n))];case"Transpose":return[ce.a(Object(c.d)("x",t,e,n),Object(c.d)("perm",t,e,n))];case"_FusedMatMul":const[r,o]=Object(c.d)("fusedOps",t,e,n),l="biasadd"===r,d="prelu"===o,h=Object(c.d)("numArgs",t,e,n);if(l){if(d&&2!==h)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!d&&1!==h)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[f,m]=Object(c.d)("args",t,e,n);return[xt.j.matMul({a:Object(c.d)("a",t,e,n),b:Object(c.d)("b",t,e,n),transposeA:Object(c.d)("transposeA",t,e,n),transposeB:Object(c.d)("transposeB",t,e,n),bias:f,activation:o,preluActivationWeights:m})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[ue.a(Object(c.d)("x",t,e,n),Object(c.d)("mean",t,e,n),Object(c.d)("variance",t,e,n),Object(c.d)("offset",t,e,n),Object(c.d)("scale",t,e,n),Object(c.d)("epsilon",t,e,n))];case"LRN":return[le.a(Object(c.d)("x",t,e,n),Object(c.d)("radius",t,e,n),Object(c.d)("bias",t,e,n),Object(c.d)("alpha",t,e,n),Object(c.d)("beta",t,e,n))];case"Softmax":return[de.a(Object(c.d)("x",t,e,n))];case"LogSoftmax":return[pe.a(Object(c.d)("x",t,e,n))];case"SparseToDense":return[he.a(Object(c.d)("sparseIndices",t,e,n),Object(c.d)("outputShape",t,e,n),Object(c.d)("sparseValues",t,e,n),Object(c.d)("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[fe.a(Object(c.d)("x",t,e,n),r,o)]}case"Mean":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[me.a(Object(c.d)("x",t,e,n),r,o)]}case"Min":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[be.a(Object(c.d)("x",t,e,n),r,o)]}case"Sum":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[ge.a(Object(c.d)("x",t,e,n),r,o)]}case"All":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[ye.a(Object(c.d)("x",t,e,n),r,o)]}case"Any":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[Oe.a(Object(c.d)("x",t,e,n),r,o)]}case"ArgMax":{const r=Object(c.d)("axis",t,e,n);return[xe.a(Object(c.d)("x",t,e,n),r)]}case"ArgMin":{const r=Object(c.d)("axis",t,e,n);return[ve.a(Object(c.d)("x",t,e,n),r)]}case"Prod":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("keepDims",t,e,n);return[lt.a(Object(c.d)("x",t,e,n),r,o)]}case"Cumsum":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("exclusive",t,e,n),l=Object(c.d)("reverse",t,e,n);return[je.a(Object(c.d)("x",t,e,n),r,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Object(c.d)("n",t,e,n),o=Object(c.d)("axis",t,e,n);let l=Object(c.d)("tensors",t,e,n);return l=l.slice(0,r),[we.a(l,o)]}case"GatherV2":case"Gather":{const r=Object(c.d)("axis",t,e,n),input=Object(c.d)("x",t,e,n),o=Object(c.d)("indices",t,e,n);return[Ie.a(input,Vt.a(o,"int32"),r)]}case"ReverseV2":case"Reverse":{const r=Object(c.d)("axis",t,e,n),input=Object(c.d)("x",t,e,n);return[ke.a(input,r)]}case"Slice":{const r=Object(c.d)("begin",t,e,n),o=Object(c.d)("size",t,e,n);return[Ne.a(Object(c.d)("x",t,e,n),r,o)]}case"StridedSlice":{const r=Object(c.d)("begin",t,e,n),o=Object(c.d)("end",t,e,n),l=Object(c.d)("strides",t,e,n),d=Object(c.d)("beginMask",t,e,n),h=Object(c.d)("endMask",t,e,n),f=Object(c.d)("ellipsisMask",t,e,n),m=Object(c.d)("newAxisMask",t,e,n),y=Object(c.d)("shrinkAxisMask",t,e,n),O=Object(c.d)("x",t,e,n);return[Te.a(O,r,o,l,d,h,f,m,y)]}case"Pack":return Object(r.Dc)(()=>{const o=Object(c.d)("axis",t,e,n),l=Object(c.d)("tensors",t,e,n),d=l[0].shape,h=Ce.a(l[0]).shape,f=l.map(t=>{const e=r.Hc.arraysEqual(t.shape,d);if(!e&&!r.Hc.arraysEqual(Ce.a(t).shape,h))throw new Error("the input tensors shape does not match");return e?t:$e.a(t,d)});return[Se.a(f,o)]});case"Unpack":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("tensor",t,e,n);return Ee.a(o,r)}case"Tile":{const r=Object(c.d)("reps",t,e,n);return[Re.a(Object(c.d)("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Object(c.d)("axis",t,e,n),o=Object(c.d)("numOrSizeSplits",t,e,n),l=Object(c.d)("x",t,e,n);return Ae.a(l,o,r)}case"ScatterNd":{const r=Object(c.d)("indices",t,e,n),o=Object(c.d)("values",t,e,n),l=Object(c.d)("shape",t,e,n);return[Fe.a(r,o,l)]}case"GatherNd":{const r=Object(c.d)("x",t,e,n),o=Object(c.d)("indices",t,e,n);return[De.a(r,o)]}case"SparseToDense":{const r=Object(c.d)("sparseIndices",t,e,n),o=Object(c.d)("outputShape",t,e,n),l=Object(c.d)("sparseValues",t,e,n),d=Object(c.d)("defaultValue",t,e,n);return[he.a(r,l,o,l.dtype===d.dtype?d:Vt.a(d,l.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"FFT":return[_e.a(Object(c.d)("x",t,e,n))];case"IFFT":return[Me.a(Object(c.d)("x",t,e,n))];case"RFFT":return[Pe.a(Object(c.d)("x",t,e,n))];case"IRFFT":return[Be.a(Object(c.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return r.Dc(()=>((t,e,n)=>{switch(t.op){case"Cast":return[Vt.a(Object(c.d)("x",t,e,n),Object(c.d)("dtype",t,e,n))];case"ExpandDims":{const r=Object(c.d)("axis",t,e,n);return[Le.a(Object(c.d)("x",t,e,n),r)]}case"Squeeze":{const r=Object(c.d)("axis",t,e,n);return[Ce.a(Object(c.d)("x",t,e,n),r)]}case"Reshape":return[$e.a(Object(c.d)("x",t,e,n),Object(c.d)("shape",t,e,n))];case"MirrorPad":return[ze.a(Object(c.d)("x",t,e,n),Object(c.d)("padding",t,e,n),Object(c.d)("mode",t,e,n))];case"PadV2":case"Pad":return[Ve.a(Object(c.d)("x",t,e,n),Object(c.d)("padding",t,e,n),Object(c.d)("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Object(c.d)("blockShape",t,e,n),o=Object(c.d)("paddings",t,e,n);return[We.a(Object(c.d)("x",t,e,n),r,o)]}case"BatchToSpaceND":{const r=Object(c.d)("blockShape",t,e,n),o=Object(c.d)("crops",t,e,n);return[He.a(Object(c.d)("x",t,e,n),r,o)]}case"DepthToSpace":{const r=Object(c.d)("blockSize",t,e,n),o=Object(c.d)("dataFormat",t,e,n).toUpperCase();return[Ue.a(Object(c.d)("x",t,e,n),r,o)]}case"BroadcastTo":return[Ge.a(Object(c.d)("x",t,e,n),Object(c.d)("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const o=Object(c.d)("keyDType",t,e,n),l=Object(c.d)("valueDType",t,e,n),d=new Yt(o,l);return r.addHashTable(t.name,d),[d.handle]}case"LookupTableImport":case"LookupTableImportV2":{const o=Object(c.d)("tableHandle",t,e,n,r),l=Object(c.d)("keys",t,e,n),d=Object(c.d)("values",t,e,n),h=r.getHashTableById(o.id);return[await h.import(l,d)]}case"LookupTableFind":case"LookupTableFindV2":{const o=Object(c.d)("tableHandle",t,e,n,r),l=Object(c.d)("keys",t,e,n),d=Object(c.d)("defaultValue",t,e,n),h=r.getHashTableById(o.id);return[await h.find(l,d)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,o);case"custom":const ft=Object(d.a)(t.op);if(ft&&ft.customExecutor)return ft.customExecutor(new l(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r.Hc.isPromise(ft)?ft.then(data=>[].concat(data)):[].concat(ft)}class Ke{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let i=0;i<this.contexts.length-1;i++){const e=this.contexts.slice(0,this.contexts.length-i);t.push(this.contextIdforContexts(e))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Xe(t,e,n,r){const o=new Set,l=[];let d=null,h=null;const f=new Set,m=Object.keys(t).map(t=>Object(c.g)(t)[0]);let y=[];null!=r&&(y=r.map(t=>Object(c.g)(t.name)[0]));const O=[...e];for(;O.length>0;){const t=O.pop();(Ze(t)||tn(t)||en(t))&&null==d&&(d=t,h=d.children.map(t=>t.name).filter(t=>o.has(t))),o.add(t.name),null==n[t.name]&&(-1===m.indexOf(t.name)&&-1===y.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(input=>{f.has(input.name)||(f.add(input.name),O.push(input))}):l.push(t.name)))}return{inputs:t,outputs:e,usedNodes:o,missingInputs:l,dynamicNode:d,syncInputs:h}}const Ye=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Qe=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Je=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function Ze(t){return Ye.indexOf(t.op)>=0}function tn(t){return Qe.indexOf(t.op)>=0}function en(t){return Je.indexOf(t.op)>=0}class nn{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new nn(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((map,t)=>(map[t]=this._functions[t].signature,map),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Xe(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:l}=n;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${l}]`);if(r.length>0){const n=e.map(t=>t.name),o=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${o}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:o}=n,l=[],d=Object.keys(o).map(t=>Object(c.g)(t)[0]).map(e=>t.nodes[e]),h=t.initNodes;d.forEach(input=>{r.has(input.name)&&l.push(input)}),t.weights.forEach(t=>{r.has(t.name)&&l.push(t)}),null!=h&&h.forEach(t=>{r.has(t.name)&&l.push(t)});const f=new Set,m=[];for(;l.length>0;){const t=l.pop();f.add(t.name),e[t.name]||m.push(t),t.children.forEach(t=>{!f.has(t.name)&&r.has(t.name)&&t.inputs.every(input=>f.has(input.name))&&l.push(t)})}return m}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const o=n.map(t=>this.graph.nodes[Object(c.g)(t)[0]]),l=e.map(t=>Object(c.g)(t)[0]);let d=l.map(t=>this.graph.nodes[t]);0===d.length&&(d=this._outputs);const h=this.getCompilationKey(o,d);let f=this.compiledMap.get(h);null==f&&(f=this.compile(t,d),this.compiledMap.set(h,f));const m={},y={};return Object(r.Dc)(()=>{const n=new Ke(this.weightMap,m,y,this.functionExecutorMap),o=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=Object(c.g)(e),l=[];l[r]=t[e],o[n]=l});const d=this.getFrozenTensorIds(o),h={};for(let i=0;i<f.length;i++){const t=f[i];if(!o[t.name]){const e=qe(t,o,n,this._resourceManager);if(r.Hc.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);o[t.name]=e,this.checkTensorForDisposal(t.name,t,o,n,d,l,h)}}return null==this.parent&&n.dispose(d),e.map(t=>Object(c.e)(t,o,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,o,l,d){"control"!==e.category&&-1===l.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(d[t.id]=(d[t.id]||0)+e.children.length)}),e.inputs.forEach(input=>{if("control"!==input.category){const t=Object(c.f)(input.name,n,r);null!=t&&t.forEach(t=>{if(t&&!o.has(t.id)){const e=d[t.id];1===e?(t.dispose(),delete d[t.id]):null!=e&&d[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},o={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const l=new Ke(this.weightMap,r,o,this.functionExecutorMap),d=await this.executeWithControlFlow(t,l,e,n),h=e.map(t=>Object(c.e)(t,d,l)),f=h.map(t=>t.id),m=Object.keys(t).map(e=>t[e].id),y=new Set([...f,...m,...this.weightIds]);return Object.keys(d).forEach(t=>{d[t].forEach(t=>{!t||t.isDisposed||y.has(t.id)||t.dispose()})}),null==this.parent&&l.dispose(y),h}async executeFunctionAsync(t,e,n){const r=t.reduce((map,t,e)=>(map[this.inputs[e].name]=t,map),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const o=Object.keys(t),l=o.map(t=>this.graph.nodes[Object(c.g)(t)[0]]),d=n.map(t=>Object(c.g)(t)[0]);let h=d.map(t=>this.graph.nodes[t]);0===h.length&&(h=this._outputs);const{usedNodes:f,missingInputs:m,dynamicNode:y,syncInputs:O}=Xe(t,h,this.weightMap,this._initNodes),x=[...l,...this.graph.weights,...this._initNodes||[]].map(t=>({node:t,contexts:e.currentContext})),v=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=Object(c.g)(e),o=[];o[r]=t[e],v[n]=o});const j={},w=this.getFrozenTensorIds(v),I={};for(;x.length>0;){const t=this.processStack(l,x,e,v,I,w,d,j,f);await Promise.all(t)}null!=y||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const k=h.filter(t=>!Ze(t)&&!Object(c.e)(t.name,v,e)).map(t=>t.name);if(k.length>0){let t="";throw null!=y&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${O}]`),new Error(`Cannot compute the outputs [${k}] from the provided inputs [${o}]. Consider providing the following inputs: [${m}]. ${t}`)}return v}processStack(t,e,n,o,l,d,h,f,m){const y=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let O="";if("Enter"===t.node.op&&Object(c.d)("isConstant",t.node,o,n)&&([O]=Object(c.b)(t.node.name,n)),null==o[t.node.name]){const x=qe(t.node,o,n,this._resourceManager);O||([O]=Object(c.b)(t.node.name,n));const v=n.currentContext;r.Hc.isPromise(x)?y.push(x.then(r=>(o[O]=r,n.currentContext=v,this.checkTensorForDisposal(O,t.node,o,n,d,h,f),this.processChildNodes(t.node,e,n,o,l,m),r))):(o[O]=x,this.checkTensorForDisposal(O,t.node,o,n,d,h,f),this.processChildNodes(t.node,e,n,o,l,m))}else this.processChildNodes(t.node,e,n,o,l,m)}return y}processChildNodes(t,e,n,r,o,l){t.children.forEach(t=>{const[d]=Object(c.b)(t.name,n);!o[d]&&l.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!Object(c.e)(t,r,n))&&(o[d]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!Object(c.e)(t,r,n))&&(o[d]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const input=t[e],[n]=Object(c.g)(e),o=this.graph.nodes[n];if(o.attrParams.shape&&o.attrParams.shape.value){const t=o.attrParams.shape.value,e=t.length===input.shape.length&&input.shape.every((e,n)=>-1===t[n]||t[n]===e);r.Hc.assert(e,()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${t}], but was [${input.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&r.Hc.assert(input.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${input.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=Object(c.g)(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=Object(c.g)(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class rn{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class an{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new rn}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const path=this.modelUrl;if(null!=path.load)this.handler=path;else if(null!=this.loadOptions.requestInit)this.handler=r.ic.browserHTTPRequest(path,this.loadOptions);else{const t=r.ic.getLoadHandlers(path,this.loadOptions);if(0===t.length)t.push(r.ic.browserHTTPRequest(path,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[path]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const c=r.ic.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new nn(o.a.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(c),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer){const e=o.a.Instance.transformGraph(t.modelInitializer);this.initializer=new nn(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=r.ic.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof r.Nb||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((map,e,i)=>(map[e]=t[i],map),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(map){return Object.keys(map).reduce((t,e)=>(t[e]=[map[e]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function on(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new an(t,e);return await n.load(),n}var sn=function(){return(sn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function cn(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))}function un(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}const ln=t=>({startEndTensor:t,startPoint:Object(r.tc)(t,[0,0],[-1,2]),endPoint:Object(r.tc)(t,[0,2],[-1,2])}),dn={strides:[8,16],anchors:[2,6]};function pn(t,i){let s,a,e;if(t.topLeft instanceof r.Nb&&t.bottomRight instanceof r.Nb){const[u,n]=Object(r.Dc)(()=>[Object(r.Xb)([Object(r.xc)(i-1,t.topLeft.slice(0,1)),t.topLeft.slice(1,1)]),Object(r.Xb)([Object(r.xc)(i-1,t.bottomRight.slice(0,1)),t.bottomRight.slice(1,1)])]);s=u,a=n,null!=t.landmarks&&(e=Object(r.Dc)(()=>{const e=Object(r.xc)(Object(r.Ac)([i-1,0]),t.landmarks),s=Object(r.Ac)([1,-1]);return Object(r.mc)(e,s)}))}else{const[n,r]=t.topLeft,[o,c]=t.bottomRight;s=[i-1-n,r],a=[i-1-o,c],null!=t.landmarks&&(e=t.landmarks.map(t=>[i-1-t[0],t[1]]))}const u={topLeft:s,bottomRight:a};return null!=e&&(u.landmarks=e),null!=t.probability&&(u.probability=t.probability instanceof r.Nb?t.probability.clone():t.probability),u}function hn(t,e){return Object(r.Dc)(()=>{let n;return n=t.hasOwnProperty("box")?t.box:t,((t,e)=>{const n=Object(r.mc)(t.startPoint,e),o=Object(r.mc)(t.endPoint,e),s=Object(r.Yb)([n,o],1);return ln(s)})(n,e).startEndTensor.squeeze()})}class fn{constructor(t,e,n,i,s,a){this.blazeFaceModel=t,this.width=e,this.height=n,this.maxFaces=i,this.anchorsData=function(t,e,n){const r=[];for(let o=0;o<n.strides.length;o++){const i=n.strides[o],s=Math.floor((e+i-1)/i),a=Math.floor((t+i-1)/i),c=n.anchors[o];for(let t=0;t<s;t++){const e=i*(t+.5);for(let t=0;t<a;t++){const n=i*(t+.5);for(let t=0;t<c;t++)r.push([n,e])}}}return r}(e,n,dn),this.anchors=Object(r.Bc)(this.anchorsData),this.inputSizeData=[e,n],this.inputSize=Object(r.Ac)([e,n]),this.iouThreshold=s,this.scoreThreshold=a}async getBoundingBoxes(t,e,n=!0){const[p,o,b]=Object(r.Dc)(()=>{const e=t.resizeBilinear([this.width,this.height]),n=Object(r.mc)(Object(r.xc)(e.div(255),.5),2),o=this.blazeFaceModel.predict(n).squeeze(),c=function(t,e,n){const a=Object(r.tc)(t,[0,1],[-1,2]),o=Object(r.Sb)(a,e),c=Object(r.tc)(t,[0,3],[-1,2]),l=Object(r.ac)(c,n),d=Object(r.ac)(o,n),p=Object(r.ac)(l,2),h=Object(r.xc)(d,p),b=Object(r.Sb)(d,p),g=Object(r.mc)(h,n),f=Object(r.mc)(b,n);return Object(r.Yb)([g,f],1)}(o,this.anchors,this.inputSize),l=Object(r.tc)(o,[0,0],[-1,1]);return[o,c,Object(r.sc)(l).squeeze()]}),g=console.warn;console.warn=()=>{};const c=r.hc.nonMaxSuppression(o,b,this.maxFaces,this.iouThreshold,this.scoreThreshold);console.warn=g;const l=await c.array();c.dispose();let d=l.map(t=>Object(r.tc)(o,[t,0],[1,-1]));e||(d=await Promise.all(d.map(async t=>{const e=await t.array();return t.dispose(),e})));const h=t.shape[1],f=t.shape[2];let m;m=e?Object(r.ac)([f,h],this.inputSize):[f/this.inputSizeData[0],h/this.inputSizeData[1]];const y=[];for(let t=0;t<d.length;t++){const o=d[t],c=Object(r.Dc)(()=>{const c=ln(o instanceof r.Nb?o:Object(r.Bc)(o));if(!n)return c;const d=l[t];let i;return i=e?this.anchors.slice([d,0],[1,2]):this.anchorsData[d],{box:c,landmarks:Object(r.tc)(p,[d,5],[1,-1]).squeeze().reshape([6,-1]),probability:Object(r.tc)(b,[d],[1]),anchor:i}});y.push(c)}return o.dispose(),b.dispose(),p.dispose(),{boxes:y,scaleFactor:m}}async estimateFaces(t,e=!1,n=!1,o=!0){const[,i]=function(t){return t instanceof r.Nb?[t.shape[0],t.shape[1]]:[t.height,t.width]}(t),s=Object(r.Dc)(()=>(t instanceof r.Nb||(t=r.Ub.fromPixels(t)),t.toFloat().expandDims(0))),{boxes:a,scaleFactor:c}=await this.getBoundingBoxes(s,e,o);return s.dispose(),e?a.map(t=>{const e=hn(t,c);let r={topLeft:e.slice([0],[2]),bottomRight:e.slice([2],[2])};if(o){const{landmarks:e,probability:n,anchor:o}=t,i=e.add(o).mul(c);r.landmarks=i,r.probability=n}return n&&(r=pn(r,i)),r}):Promise.all(a.map(async t=>{const e=hn(t,c);let r;if(o){const[n,o,i]=await Promise.all([t.landmarks,e,t.probability].map(async t=>t.array())),s=t.anchor,[a,u]=c,l=n.map(t=>[(t[0]+s[0])*a,(t[1]+s[1])*u]);r={topLeft:o.slice(0,2),bottomRight:o.slice(2),landmarks:l,probability:i},(t=>{t.startEndTensor.dispose(),t.startPoint.dispose(),t.endPoint.dispose()})(t.box),t.landmarks.dispose(),t.probability.dispose()}else{const t=await e.array();r={topLeft:t.slice(0,2),bottomRight:t.slice(2)}}return e.dispose(),n&&(r=pn(r,i)),r}))}}async function mn({maxFaces:t=10,inputWidth:e=128,inputHeight:n=128,iouThreshold:r=.3,scoreThreshold:o=.75}={}){const i=await on("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1",{fromTFHub:!0});return new fn(i,e,n,t,r,o)}var bn={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function gn(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function yn(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function On(t,e){void 0===e&&(e=1.5);var n=yn(t),r=gn(t),o=[e*r[0]/2,e*r[1]/2];return{startPoint:[n[0]-o[0],n[1]-o[1]],endPoint:[n[0]+o[0],n[1]+o[1]],landmarks:t.landmarks}}function xn(t,e){var n;return(n=Math.PI/2-Math.atan2(-(e[1]-t[1]),e[0]-t[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}function vn(t,e){return[[1,0,t],[0,1,e],[0,0,1]]}function jn(t,e){for(var n=0,r=0;r<t.length;r++)n+=t[r]*e[r];return n}function wn(t,e){for(var n=[],r=0;r<t.length;r++)n.push(t[r][e]);return n}function In(t,e){for(var n=[],r=t.length,o=0;o<r;o++){n.push([]);for(var i=0;i<r;i++)n[o].push(jn(t[o],wn(e,i)))}return n}function kn(t,e){var n=Math.cos(t),r=Math.sin(t),o=[[n,-r,0],[r,n,0],[0,0,1]],i=In(vn(e[0],e[1]),o);return In(i,vn(-e[0],-e[1]))}var Nn=[1,168],Tn=[3,2],Cn=function(){function t(t,e,n,r,o,i){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=t,this.meshDetector=e,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=o,this.maxFaces=i}return t.prototype.transformRawCoords=function(t,e,n,r){var o,i,s,a,c=this,u=gn({startPoint:e.startPoint,endPoint:e.endPoint}),l=[u[0]/this.meshWidth,u[1]/this.meshHeight],d=t.map((function(t){return[l[0]*(t[0]-c.meshWidth/2),l[1]*(t[1]-c.meshHeight/2),t[2]]})),h=kn(n,[0,0]),f=d.map((function(t){return function(t,e){return[jn(t,e[0]),jn(t,e[1])]}(t,h).concat([t[2]])})),p=(i=[[(o=r)[0][0],o[1][0]],[o[0][1],o[1][1]]],s=[o[0][2],o[1][2]],a=[-jn(i[0],s),-jn(i[1],s)],[i[0].concat(a[0]),i[1].concat(a[1]),[0,0,1]]),m=yn({startPoint:e.startPoint,endPoint:e.endPoint}).concat([1]),b=[jn(m,p[0]),jn(m,p[1])];return f.map((function(t){return[t[0]+b[0],t[1]+b[1],t[2]]}))},t.prototype.predict=function(t){return cn(this,void 0,void 0,(function(){var e,n,i,s,a=this;return un(this,(function(u){switch(u.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(t,!1,!0)]:[3,2];case 1:return e=u.sent(),n=e.boxes,i=e.scaleFactor,0===n.length?(this.regionsOfInterest=[],[2,null]):(s=n.map((function(t){var e,n,r={startPoint:t.box.startPoint.squeeze().arraySync(),endPoint:t.box.endPoint.squeeze().arraySync()},o=On((n=i,{startPoint:[(e=r).startPoint[0]*n[0],e.startPoint[1]*n[1]],endPoint:[e.endPoint[0]*n[0],e.endPoint[1]*n[1]]}));return sn({},o,{landmarks:t.landmarks.arraySync()})})),n.forEach((function(t){null!=t&&null!=t.startPoint&&(t.startEndTensor.dispose(),t.startPoint.dispose(),t.endPoint.dispose())})),this.updateRegionsOfInterest(s),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,u.label=3;case 3:return[2,Object(r.Dc)((function(){return a.regionsOfInterest.map((function(e,n){var o;if(468===e.landmarks.length){var i=Nn[0],s=Nn[1];o=xn(e.landmarks[i],e.landmarks[s])}else i=Tn[0],s=Tn[1],o=xn(e.landmarks[i],e.landmarks[s]);var u=yn({startPoint:e.startPoint,endPoint:e.endPoint}),c=[u[0]/t.shape[2],u[1]/t.shape[1]],l=r.hc.rotateWithOffset(t,o,0,c),d=kn(-o,u),h=function(t,e,n){var o=e.shape[1],c=e.shape[2],i=[[t.startPoint[1]/o,t.startPoint[0]/c,t.endPoint[1]/o,t.endPoint[0]/c]];return r.hc.cropAndResize(e,i,[0],n)}({startPoint:e.startPoint,endPoint:e.endPoint},l,[a.meshHeight,a.meshWidth]).div(255),f=a.meshDetector.predict(h),b=f[1],g=f[2],m=Object(r.qc)(g,[-1,3]),y=m.arraySync(),O=a.transformRawCoords(y,e,o,d),x=Object(r.Bc)(O),v=a.calculateLandmarksBoundingBox(O);return a.regionsOfInterest[n]=sn({},v,{landmarks:x.arraySync()}),{coords:m,scaledCoords:x,box:v,flag:b.squeeze()}}))}))]}}))}))},t.prototype.updateRegionsOfInterest=function(t){for(var e=0;e<t.length;e++){var n=t[e],r=this.regionsOfInterest[e],o=0;if(r&&r.startPoint){var i=n.startPoint,s=i[0],a=i[1],c=n.endPoint,u=c[0],l=c[1],d=r.startPoint,h=d[0],f=d[1],p=r.endPoint,m=p[0],b=p[1],g=Math.max(s,h),y=Math.max(a,f),O=(Math.min(u,m)-g)*(Math.min(l,b)-y);o=O/((u-s)*(l-a)+(m-h)*(b-a)-O)}o<.25&&(this.regionsOfInterest[e]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,t.length)},t.prototype.clearRegionOfInterest=function(t){null!=this.regionsOfInterest[t]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,t).concat(this.regionsOfInterest.slice(t+1)))},t.prototype.shouldUpdateRegionsOfInterest=function(){var t=this.regionsOfInterest.length,e=0===t;return 1===this.maxFaces||e?e:t!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},t.prototype.calculateLandmarksBoundingBox=function(t){var e=t.map((function(t){return t[0]})),n=t.map((function(t){return t[1]})),r={startPoint:[Math.min.apply(Math,e),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,e),Math.max.apply(Math,n)]};return On({startPoint:r.startPoint,endPoint:r.endPoint})},t}(),$n=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function q(t){var e=void 0===t?{}:t,n=e.maxContinuousChecks,r=void 0===n?5:n,o=e.detectionConfidence,i=void 0===o?.9:o,s=e.maxFaces,a=void 0===s?10:s,c=e.iouThreshold,u=void 0===c?.3:c,l=e.scoreThreshold,d=void 0===l?.75:l;return cn(this,void 0,void 0,(function(){var t,e,n;return un(this,(function(o){switch(o.label){case 0:return[4,Promise.all([Sn(a,u,d),En()])];case 1:return t=o.sent(),e=t[0],n=t[1],[2,new An(e,n,r,i,a)]}}))}))}function Sn(t,e,n){return cn(this,void 0,void 0,(function(){return un(this,(function(r){return[2,mn({maxFaces:t,iouThreshold:e,scoreThreshold:n})]}))}))}function En(){return cn(this,void 0,void 0,(function(){return un(this,(function(t){return[2,on("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function Rn(t,e){if(t.mesh instanceof r.Nb){var i=Object(r.Dc)((function(){var i=Object(r.Ac)([e-1,0,0]),s=Object(r.Ac)([1,-1,1]);return Object(r.Dc)((function(){return[Object(r.Xb)([Object(r.xc)(e-1,t.boundingBox.topLeft.slice(0,1)),t.boundingBox.topLeft.slice(1,1)]),Object(r.Xb)([Object(r.xc)(e-1,t.boundingBox.bottomRight.slice(0,1)),t.boundingBox.bottomRight.slice(1,1)]),Object(r.xc)(i,t.mesh).mul(s),Object(r.xc)(i,t.scaledMesh).mul(s)]}))})),s=i[0],a=i[1],n=i[2],u=i[3];return Object.assign({},t,{boundingBox:{topLeft:s,bottomRight:a},mesh:n,scaledMesh:u})}return Object.assign({},t,{boundingBox:{topLeft:[e-1-t.boundingBox.topLeft[0],t.boundingBox.topLeft[1]],bottomRight:[e-1-t.boundingBox.bottomRight[0],t.boundingBox.bottomRight[1]]},mesh:t.mesh.map((function(t){var n=t.slice(0);return n[0]=e-1-t[0],n})),scaledMesh:t.scaledMesh.map((function(t){var n=t.slice(0);return n[0]=e-1-t[0],n}))})}var An=function(){function t(t,e,n,r,o){this.pipeline=new Cn(t,e,192,192,n,o),this.detectionConfidence=r}return t.getAnnotations=function(){return bn},t.getUVCoords=function(){return $n},t.prototype.estimateFaces=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),cn(this,void 0,void 0,(function(){var i,s,a,o,u,c=this;return un(this,(function(l){switch(l.label){case 0:return i=function(t){return t instanceof r.Nb?[t.shape[0],t.shape[1]]:[t.height,t.width]}(t),s=i[1],a=Object(r.Dc)((function(){return t instanceof r.Nb||(t=r.Ub.fromPixels(t)),t.toFloat().expandDims(0)})),"webgl"!==Object(r.gc)()?[3,2]:(u=Object(r.cc)().get("WEBGL_PACK_DEPTHWISECONV"),Object(r.cc)().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(a)]);case 1:return o=l.sent(),Object(r.cc)().set("WEBGL_PACK_DEPTHWISECONV",u),[3,4];case 2:return[4,this.pipeline.predict(a)];case 3:o=l.sent(),l.label=4;case 4:return a.dispose(),null!=o&&o.length>0?[2,Promise.all(o.map((function(t,o){return cn(c,void 0,void 0,(function(){var i,a,c,u,l,d,h,f,p,m,b,g,y,O,x=this;return un(this,(function(v){switch(v.label){case 0:return i=t.coords,a=t.scaledCoords,c=t.box,u=t.flag,l=[u],e||(l=l.concat([i,a])),[4,Promise.all(l.map((function(t){return cn(x,void 0,void 0,(function(){return un(this,(function(e){return[2,t.array()]}))}))})))];case 1:if(d=v.sent(),h=d[0],u.dispose(),h<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(o),e)return f={faceInViewConfidence:h,mesh:i,scaledMesh:a,boundingBox:{topLeft:Object(r.Ac)(c.startPoint),bottomRight:Object(r.Ac)(c.endPoint)}},n?[2,Rn(f,s)]:[2,f];for(O in p=d.slice(1),m=p[0],b=p[1],a.dispose(),i.dispose(),g={faceInViewConfidence:h,boundingBox:{topLeft:c.startPoint,bottomRight:c.endPoint},mesh:m,scaledMesh:b},n&&(g=Rn(g,s)),y={},bn)y[O]=bn[O].map((function(t){return g.scaledMesh[t]}));return g.annotations=y,[2,g]}}))}))})))]:[2,[]]}}))}))},t}()}])]);